/*

                                  SatIO - Written by Benjamin Jack Cullen.

              A general purpose programmable I/O platform for automation and manual throughput.
    Supporting stacks (up to 10 functions per output pin) of logic across 20 output pins on the portcontroller.

  What can SatIO tell you is true? Potentially infinite things.

  Applications? Potentially infinite applications.

  Limitations? Being vastly general purpose comes at a perfromnce cost. SatIO is designed to be vastly general purpose.

  Inference in Bayesian Reasoning? Moon tracking for example can be used to track the moon, it can also be used for one example; to 
  track the tides, if the system is aware moon/planetary positioning and datetime then marine life values may also be inferred relative
  to the inferred tide values and known datetime. There is a lot of data that can be used in many ways, with a kind of network effect.
  Or more simply 'SatIO is one hell of a switch'.

  The amount of data and I/O available on this project makes this project a more than adequately general purpose platform for all
  kinds of future projects, from universally aware LLMs harnessing SatIO's optional serial output, to sensor drones, or even just a
  GPS syncronized astro clock. Everything other than the ESP32 running SatIO should be considered as optional and modular, meaning
  SatIO builds can be from a headless chip with GPS pouring out data over serial, or a full system with extra I/O and display.

  Short of quantum navigation on a microchip, GPS is currently used for navigation, providing values that many more values
  can be calculated from, providing there is not something potentially terminally wrong with the universe.

  Matrix logic is an attempt to maximize programmable potential and hardware configuration is designed to attempt maximum IO potential.
  If more output is needed then add another I2C port controller, if more input is needed then add another custom I2C sensor module.
  If more matrix logic is needed then build on another MCU, matrix switches and switch functions have been balanced to allow for plenty
  of switches and functions for said switches, with regards to available memory/storage (10 functions per switch not including switch linking
  where logic can be stacked accross multiple/all switches/memory allocations).

        Design: Break out all the things and build I2C peripherals as required to orbit the ESP32/Central-MCU.

                                Wiring For Keystudio ESP32 PLUS Development Board

                                ESP32: 1st ATMEGA2560 with shield as Port Controller (not on multiplexer):
                                ESP32: I2C SDA -> ATMEGA2560: I2C SDA
                                ESP32: I2C SCL -> ATMEGA2560: I2C SCL

                                ESP32: 2nd ATMEGA2560 with shield as Control Panel (not on multiplexer):
                                ESP32: io25    -> ATMEGA2560: io22
                                ESP32: I2C SDA -> ATMEGA2560: I2C SDA
                                ESP32: I2C SCL -> ATMEGA2560: I2C SCL

                                Other ESP32 i2C Devices (not on multiplexer):
                                ESP32: SDA0 SCL0 -> DS3231 (RTC): SDA, SCL (5v)

                                ESP32: WTGPS300P (5v) (for getting a downlink):
                                ESP32: io27 RXD -> WTGPS300P: TXD
                                ESP32: null TXD -> WTGPS300P: RXD

                                ESP32 i2C: i2C Multiplexing (3.3v) (for peripherals):
                                ESP32: i2C -> TCA9548A: SDA, SCL

                                ESP32: Analog/Digital Multiplexing (3.3v) (for peripherals):
                                ESP32: io4    -> CD74HC4067: SIG
                                ESP32: io32   -> CD74HC4067: S0
                                ESP32: io33   -> CD74HC4067: S1
                                ESP32: io16   -> CD74HC4067: S2
                                ESP32: io17   -> CD74HC4067: S3
                                CD74HC4067 C0 -> DHT11: SIG

                                ESP32 VSPI: SDCARD (5v) (for matrix and system data):
                                ESP32: io5  -> HW-125: CS (SS)
                                ESP32: io23 -> HW-125: DI (MOSI)
                                ESP32: io19 -> HW-125: DO (MISO)
                                ESP32: io18 -> HW-125: SCK (SCLK)

                                ESP32 HSPI: SSD1351 OLED (5v) (short wires recommended):
                                ESP32: io14 -> SSD1351: SCL/SCLK
                                ESP32: io12 -> SSD1351: MISO/DC
                                ESP32: io13 -> SSD1351: SDA
                                ESP32: io26 -> SSD1351: CS


                                           $SATIO SENTENCE
                              
                              RTC Sync Time (UTC)             System Uptime (Seconds)
                              |      RTC Sync Date (UTC)      |
        Tag                   |      |                        |   Longitude Degrees
        |                     |      |                        |   |
        $SATIO,000000,00000000,000000,00000000,000000,00000000,0,0,0,*CHECKSUM
              |      |                        |      |          |
              |      |                        |      |          Latitude Degrees
              |      RTC Date (UTC)           |      Local Date (UTC Offset)
              RTC Time (UTC)                  Local Time (UTC Offset)

                                          $MATRIX SENTENCE 

                                                                              Matrix Switch Output Port 19
                                                                              |
                                                                              |    Matrix Switch State 0
                                                                              |    |
    $MATRIX,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*CHECKSUM
           |                                                                                                                                                   |
          Matrix Switch Output Port 0                                                                                                                          Matrix Switch State 19
                                                                                          


                                          $SENSORS SENTENCE

                      Sensor 0
                      |
              $SENSORS,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*CHECKSUM
                                                                                  |
                                                                                  Sensor 15



                                          $SUN SENTENCE
                                                    
                                    Right Ascension 
                                    |       Azimuth 
                                    |       |       Rise
                                    |       |       |
                                $SUN,0.0,0.0,0.0,0.0,0.0,0.0,*CHECKSUM
                                        |       |       |
                                        |       |       Set 
                                        |       Altitude
                                        Declination 



                                          $MOON SENTENCE

                                                Rise
                                Right Ascension |
                                |       Azimuth | 
                                |       |       |       Phase
                                |       |       |       |
                          $MOON,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*CHECKSUM
                                    |       |       |       |
                                    |       |       Set     Luminessence
                                    |       Altitude
                                    Declination



                                        $MERCURY SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
              $MERCURY,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude  



                                         $VENUS SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
                $VENUS,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude  



                                        $MARS SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
                 $MARS,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude



                                      $JUPITER SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
              $JUPITER,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude



                                      $SATURN SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
               $SATURN,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude



                                      $URANUS SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
               $URANUS,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude 



                                      $NEPTUNE SENTENCE

                                      Rise
                      Right Ascension |       Helio Ecliptic Latitude
                      |       Azimuth |       |       Radius Vector   
                      |       |       |       |       |       Ecliptic Latitude
                      |       |       |       |       |       |
              $NEPTUNE,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0*CHECKSUM
                          |       |       |       |       |       |
                          |       |       Set     |       |       Ecliptic Longitude
                          |       Altitude        |       Distance
                          Declination             Helio Ecliptic Longitude  


  
  Summary: Over one quintillion possible combinations of stackable logic across 20 switches for a general purpose
  part or standalone device.

  Whats the point? Working with ESP32 is cheap and from this project I intend to have reusable, general purpose parts
  as modules that can work both together and standalone, creating a platform I can go to when working with ESP32 and or modules I can
  reuse/rebuild for any other future projects, as well as a large code base for future reference.

  Requires using modified SiderealPlanets library (hopefully thats okay as the modifications allow calculating rise/set
  of potentially any celestial body as described in this paper: https://stjarnhimlen.se/comp/riset.html).
  Additions: 1: doXRiseSetTimes(). This allows for calculating rise and set times of all planets and objects according to time and location.
             2: inRange60(). Ensures minutes and second values are wihin 0-59 for planet/object rise, set times.
             3: inRange24(). Ensures hour values are wihin 0-23 for planet/object rise, set times.

  ToDo: 20 programmable modulators on each output pin on the port controller. 
  
  ToDo: Terrain elevation: Experiments have been made decompressing NASA's SRTMGL1 (Shuttle Radar Topography Mission) files quickly.

  ToDo: More data and calculate more data from existing data.

  ToDo: Macros.

  ToDo: Celestial object tracking (requires new matrix function name list).

  ToDo: I am on the fence about putting SatIO online outside of a hosted RSS feed, however I may implement a crawler for sites like
  GDACS (Global Disaster & Cordination System) to provide even more data that can be used programmatically. I do not wish for SatIO
  to have too many dependencies, its meant to know what it knows as independantly/stand-alone as possible.

  ToDo: Consider compression in cases where there are large amounts of data such as matrices containing many strings, doubles and floats.

  Complete PlatformIO project files, libraries and modified libraries:
  https://drive.google.com/drive/folders/13yynSxkKL-zxb7iLSkg0v0VXkSLgmtW-?usp=sharing

  Builds:
  Nano SatIO (Passive): Serial input/output only, headless. Useful for LLMs and things.
  Full SatIO (Active): Everything.
*/

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      LIBRARIES
// ------------------------------------------------------------------------------------------------------------------------------

#include <Arduino.h>
#include "soc/rtc_wdt.h"
#include "esp_pm.h"
#include "esp_attr.h"
#include <stdio.h>
#include <limits.h>
#include <string.h>
#include <iostream>
#include <SPI.h>
#include <Wire.h>
#include <assert.h>
#include <float.h>
#include <FS.h>
#include "SdFat.h"            // https://github.com/greiman/SdFat
#include <RTClib.h>           // https://github.com/adafruit/RTClib
#include <TimeLib.h>          // https://github.com/PaulStoffregen/Time
#include <Timezone.h>         // https://github.com/JChristensen/Timezone
#include <SiderealPlanets.h>  // https://github.com/DavidArmstrong/SiderealPlanets
#include <SiderealObjects.h>  // https://github.com/DavidArmstrong/SiderealObjects
#include <DHT.h>              // https://github.com/adafruit/DHT-sensor-library
#include <CD74HC4067.h>       // https://github.com/waspinator/CD74HC4067
#include <TFT_eSPI.h>         // https://github.com/Bodmer/TFT_eSPI
#include "lcdgfx.h"           // https://github.com/lexus2k/lcdgfx
#include "lcdgfx_gui.h"       // https://github.com/lexus2k/lcdgfx
#include <math.h>

void beginSDCARD();
void endSDCARD();
void beginSSD1351();
void endSSD1351();
void sdcardQuickCheck();
void I2CRequestScan();
void requestWT901();
void UIIndicators();
void printAllTimes();
void zero_matrix();
void writePortControllerSwitchState();
String groundHeadingDegreesToNESW(float num);
String getRelatedX(char * data);
String getRelatedY(char * data);
void setMeteorShowerWarning();

char CMD_BUFFER[1024];

// --------------------------------------------------------------------------------------
// helps avoid any potential race conditions where gps data is collected on another task
// --------------------------------------------------------------------------------------
bool gps_done=false;
// --------------------------------------------------------------------------------------
// abstraction from number of satellites and HDOP precision factor
// --------------------------------------------------------------------------------------
int gps_signal=0;
int satellite_count=0;
bool rtc_sync_flag=false;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                           PINS
// ------------------------------------------------------------------------------------------------------------------------------

const int8_t ctsPin=-1;  // remap hardware serial TXD
const int8_t rtsPin=-1;  // remap hardware serial RXD

#define ISR_I2C_PERIPHERAL_PIN 25 // allows the Control Panel to interrupt us

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   MULTIPLEXERS
// ------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------
/* i2c multiplexer */
// --------------------------------------------------------------------------------------

#define TCA9548AADDR 0x70 // i2c address of TCA9548A i2c multiplexer 

void setMultiplexChannel_TCA9548A(uint8_t channel) {
  if (channel > 7) return;
  Wire.beginTransmission(TCA9548AADDR);
  Wire.write(1 << channel); // change channel of i2c multiplexer
  Wire.endTransmission();
}

// --------------------------------------------------------------------------------------
/* analog/digital multiplexer */
// --------------------------------------------------------------------------------------

int CD74HC4067_Mux_Channel[16][4]={
  {0,0,0,0}, //channel 0 
  {1,0,0,0}, //channel 1 
  {0,1,0,0}, //channel 2
  {1,1,0,0}, //channel 3
  {0,0,1,0}, //channel 4
  {1,0,1,0}, //channel 5
  {0,1,1,0}, //channel 6
  {1,1,1,0}, //channel 7
  {0,0,0,1}, //channel 8
  {1,0,0,1}, //channel 9
  {0,1,0,1}, //channel 10
  {1,1,0,1}, //channel 11
  {0,0,1,1}, //channel 12
  {1,0,1,1}, //channel 13
  {0,1,1,1}, //channel 14
  {1,1,1,1}  //channel 15
};

const int CD74HC4067_S0=32; // control pin
const int CD74HC4067_S1=33; // control pin
const int CD74HC4067_S2=16; // control pin
const int CD74HC4067_S3=17; // control pin
const int CD74HC4067_SIG=4; // signal pin
const int CD74HC4067_ControlPin[]={CD74HC4067_S0, CD74HC4067_S1, CD74HC4067_S2, CD74HC4067_S3};

void setMultiplexChannel_CD74HC4067(int channel) {
  for(int i=0; i < 4; i++){
    // change channel of analog/digital multiplexer
    digitalWrite(CD74HC4067_ControlPin[i], CD74HC4067_Mux_Channel[channel][i]);
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                            SPI
// ------------------------------------------------------------------------------------------------------------------------------

void beginSPIDevice(int SCLK, int MISO, int MOSI, int SS) {
  /*
  ESP32 default VSPI pins: SCLK=18, MISO=19, MOSI=23, SS=26
  ESP32 default HSPI pins: SCLK=14, MISO=12, MOSI=13, SS=15
  Devices sharing a bus require seperate CS/SS pin and may require seperate MISO pin.
  Note that this is a preliminary begin to be called before a 'library specific begin' like sd.begin() for example when stacking
  multiple SPI devices on the same SPI bus.
  */
  SPI.begin(SCLK, MISO, MOSI, SS); // set pins
  digitalWrite(SS, LOW); // set control pin low to begin transmission
}

void endSPIDevice(int SS) {
  SPI.end();
  digitalWrite(SS, HIGH); // set control pin high to end transmission
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                          DISPLAY WIRING LCDGFX
// ------------------------------------------------------------------------------------------------------------------------------
// this library is used because it has buffering, is fast and has menus.
// ------------------------------------------------------------------------------------------------------------------------------

// SSD1351 HSPI pins on esp32 with custom CS
int SSD1351_SCLK=14; // (SCL)
int SSD1351_MISO=12; // (DC)
int SSD1351_MOSI=13; // (SDA)
int SSD1351_CS  =26; // (CS)

// The parameters are  RST pin, BUS number, CS pin, DC pin, FREQ (0 means default), CLK pin, MOSI pin
DisplaySSD1351_128x128x16_SPI display( (int8_t)-1, {  (int8_t)-1,  (int8_t)SSD1351_CS,  (int8_t)SSD1351_MISO,  (int8_t)0,  (int8_t)-1,  (int8_t)-1  });

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                 TFT_eSPI SETUP
// ------------------------------------------------------------------------------------------------------------------------------
// this library is used for anything that lcdgfx can't currently do like arbitrary sprite rotations. (wiring in UserSetup.h)
// ------------------------------------------------------------------------------------------------------------------------------

TFT_eSPI tft = TFT_eSPI(); // Invoke custom library
TFT_eSprite hud = TFT_eSprite(&tft);
TFT_eSprite uap = TFT_eSprite(&tft);
TFT_eSprite zen = TFT_eSprite(&tft);

// ------------------------------------
// sprite data: device/vehicle rotation
// ------------------------------------
int wt901_roll = 0; // rotation angle
int mapped_roll; // mapped rotation angle
int offset_wt901_roll_0 = 90; // default (horizontal) is +90 degrees.
uint16_t uap_piv_X; // x pivot of Sprite (middle)
uint16_t uap_piv_y; // y pivot of Sprite (10 pixels from bottom)
int uap_w = 24; // width of sprite
int uap_h = 24; // height of sprite

float gpatt_yaw=0;
float mapped_yaw=0;
float gpatt_pitch=0;
float mapped_pitch=0;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   LCDGFX SETUP
// ------------------------------------------------------------------------------------------------------------------------------

NanoCanvas<6,8,1> canvas6x8; 
NanoCanvas<8,8,1> canvas8x8;
NanoCanvas<9,7,1> canvas9x7;
NanoCanvas<9,9,1> canvas9x9;
NanoCanvas<13,8,1> canvas13x8;
NanoCanvas<19,8,1> canvas19x8;
NanoCanvas<108,8,1> canvas108x8;
NanoCanvas<120,8,1> canvas120x8;
NanoCanvas<60,8,1> canvas60x8;
NanoCanvas<64,8,1> canvas64x8;
NanoCanvas<62,8,1> canvas62x8;
NanoCanvas<74,8,1> canvas74x8;
NanoCanvas<76,8,1> canvas76x8;
NanoCanvas<80,8,1> canvas80x8;
NanoCanvas<49,8,1> canvas49x8;
NanoCanvas<126,24,1> canvas126x24;
NanoCanvas<120,120,1> canvas120x120;
NanoCanvas<128,128,1> canvas128x128;
NanoCanvas<28,8,1> canvas28x8;
NanoCanvas<21,8,1> canvas21x8;
NanoCanvas<42,8,1> canvas42x8;
NanoCanvas<54,8,1> canvas54x8;
NanoCanvas<56,8,1> canvas56x8;
NanoCanvas<32,8,1> canvas32x8;
NanoCanvas<38,8,1> canvas38x8;
NanoCanvas<92,8,1> canvas92x8;
NanoPoint sprite;
NanoEngine16<DisplaySSD1351_128x128x16_SPI> engine( display );

const uint8_t image_data_serial_command_enabled[] PROGMEM = {
    // ∙∙█████∙∙
    // ∙∙█∙█∙█∙∙
    // ∙∙█████∙∙
    // █∙∙∙█∙∙∙█
    // █∙█████∙█
    // █████████
    // ∙∙█████∙∙
    0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 
    0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00
};

const uint8_t image_data_serial_command_disabled[] PROGMEM = {
    // ∙∙░░░░░∙∙
    // ∙∙░∙░∙░∙∙
    // ∙∙░░░░░∙∙
    // ░∙∙∙░∙∙∙░
    // ░∙░░░░░∙░
    // ░░░░░░░░░
    // ∙∙░░░░░∙∙
    0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 
    0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00
};

const uint8_t image_data_gpssig_0[] PROGMEM = {
    // ░∙∙∙∙∙∙∙░
    // ░∙∙∙∙∙∙∙░
    // ░░∙∙░∙∙░░
    // ∙░░░░░░░∙
    // ∙∙∙∙░∙∙∙∙
    // ∙∙∙░░░∙∙∙
    // ∙∙░░░░░∙∙
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 
    0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t image_data_gpssig_1[] PROGMEM = {
    // ▒∙∙∙∙∙∙∙▒
    // ▒∙∙∙∙∙∙∙▒
    // ▒▒∙∙▒∙∙▒▒
    // ∙▒▒▒▒▒▒▒∙
    // ∙∙∙∙▒∙∙∙∙
    // ∙∙∙▒▒▒∙∙∙
    // ∙∙▒▒▒▒▒∙∙
    0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 
    0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 
    0x07, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xe0, 
    0x00, 0x00, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00
};

const uint8_t image_data_gpssig_2[] PROGMEM = {
    // ▒∙∙∙∙∙∙∙▒
    // ▒∙∙∙∙∙∙∙▒
    // ▒▒∙∙▒∙∙▒▒
    // ∙▒▒▒▒▒▒▒∙
    // ∙∙∙∙▒∙∙∙∙
    // ∙∙∙▒▒▒∙∙∙
    // ∙∙▒▒▒▒▒∙∙
    0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
    0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
    0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x1f, 
    0x00, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00
};

const uint8_t image_data_rtcsync_0[] PROGMEM = {
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    // ∙∙∙∙∙∙∙∙∙
    0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 
    0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
    0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
    0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
    0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1f
};

const uint8_t image_data_meteor_15x15_grey[] PROGMEM = {
    // ░░░░░░░░░░░░░░░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░∙∙░░░░░░░░∙∙∙░
    // ░∙∙░∙∙∙∙░░░░∙∙░
    // ░∙∙∙∙∙∙∙∙░░░∙∙░
    // ░∙∙∙∙░░∙∙∙░░∙∙░
    // ░∙∙∙░░░░∙∙∙░∙∙░
    // ░∙∙░░░░░░∙∙░∙∙░
    // ░∙∙░░░░░░∙∙░∙∙░
    // ░∙∙∙░░░░∙∙∙░∙∙░
    // ░∙∙∙∙░░∙∙∙░░∙∙░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░░░░░░░░░░░░░░░
    0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0x39, 0xc7, 0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 
    0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7, 0x39, 0xc7
};

const uint8_t image_data_meteor_15x15_yellow[] PROGMEM = {
    // ███████████████
    // █∙∙∙∙∙∙∙∙∙∙∙∙∙█
    // █∙∙∙∙∙∙∙∙∙∙∙∙∙█
    // █∙∙████████∙∙∙█
    // █∙∙█∙∙∙∙████∙∙█
    // █∙∙∙∙∙∙∙∙███∙∙█
    // █∙∙∙∙██∙∙∙██∙∙█
    // █∙∙∙████∙∙∙█∙∙█
    // █∙∙██████∙∙█∙∙█
    // █∙∙██████∙∙█∙∙█
    // █∙∙∙████∙∙∙█∙∙█
    // █∙∙∙∙██∙∙∙██∙∙█
    // █∙∙∙∙∙∙∙∙∙∙∙∙∙█
    // █∙∙∙∙∙∙∙∙∙∙∙∙∙█
    // ███████████████
    0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
    0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xe0
};

const uint8_t image_data_meteor_15x15_red[] PROGMEM = {
    // ░░░░░░░░░░░░░░░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░∙∙░░░░░░░░∙∙∙░
    // ░∙∙░∙∙∙∙░░░░∙∙░
    // ░∙∙∙∙∙∙∙∙░░░∙∙░
    // ░∙∙∙∙░░∙∙∙░░∙∙░
    // ░∙∙∙░░░░∙∙∙░∙∙░
    // ░∙∙░░░░░░∙∙░∙∙░
    // ░∙∙░░░░░░∙∙░∙∙░
    // ░∙∙∙░░░░∙∙∙░∙∙░
    // ░∙∙∙∙░░∙∙∙░░∙∙░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░∙∙∙∙∙∙∙∙∙∙∙∙∙░
    // ░░░░░░░░░░░░░░░
    0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x10, 0x82, 0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00
};

const uint8_t UnidentifiedStudioBMP[] PROGMEM =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x21, 0x04, 0x21, 0x04, 0x29, 0x25, 0x21, 0x04, 0x18, 0xa2, 0x10, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x29, 0x25, 0x21, 0x24, 0x19, 0x23, 0x18, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x21, 0x04, 0x21, 0x04, 0x29, 0x24, 0x21, 0x04, 0x21, 0x04, 0x21, 0x05, 0x29, 0x25, 0x29, 0x05, 0x18, 0x63, 0x00, 0x00, 0x00, 0x60, 0x01, 0xc2, 0x1b, 0x04, 0x12, 0xa3, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x03, 0x29, 0x04, 0x29, 0x04, 0x29, 0x04, 0x29, 0x04, 0x29, 0x05, 0x21, 0x04, 0x21, 0x03, 0x10, 0x00, 0x00, 0x60, 0x1b, 0xe3, 0x1e, 0xe3, 0x1f, 0x63, 0x1f, 0x43, 0x1d, 0xc3, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x18, 0xa3, 0x21, 0x25, 0x19, 0x05, 0x19, 0x25, 0x19, 0x04, 0x21, 0x25, 0x29, 0x05, 0x18, 0xa3, 0x00, 0x00, 0x12, 0xa0, 0x1f, 0x02, 0x17, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x82, 0x1c, 0x83, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xe0, 0x01, 0x80, 0x01, 0xc2, 0x11, 0xe2, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x01, 0xc0, 0x01, 0x20, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x04, 0x21, 0x05, 0x21, 0x05, 0x21, 0x05, 0x21, 0x24, 0x21, 0x24, 0x18, 0xa3, 0x00, 0x60, 0x13, 0xc2, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc0, 0x1e, 0x43, 0x00, 0xa0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x80, 0x13, 0xe2, 0x15, 0x82, 0x1e, 0x43, 0x16, 0x83, 0x1e, 0xc3, 0x1e, 0xc3, 0x1e, 0xe3, 0x1f, 0x03, 0x1e, 0xe3, 0x1e, 0xc3, 0x16, 0x42, 0x1d, 0xc3, 0x14, 0xa2, 0x12, 0xe2, 0x11, 0x82, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x62, 0x29, 0x04, 0x29, 0x04, 0x21, 0x04, 0x21, 0x23, 0x29, 0x24, 0x18, 0xa3, 0x00, 0x00, 0x12, 0xc2, 0x1f, 0x43, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa0, 0x1d, 0x23, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x13, 0x40, 0x1e, 0x63, 0x17, 0x83, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0xa2, 0x1f, 0x63, 0x1e, 0xa3, 0x1d, 0x43, 0x13, 0xa2, 0x01, 0xe0, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x21, 0x03, 0x21, 0x04, 0x29, 0x24, 0x21, 0x03, 0x20, 0xe3, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0xe3, 0x17, 0x82, 0x07, 0xc0, 0x17, 0xc2, 0x1e, 0x83, 0x11, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x14, 0x82, 0x1f, 0x83, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe2, 0x07, 0xe0, 0x07, 0xe2, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe2, 0x17, 0x83, 0x1e, 0xe3, 0x1d, 0x43, 0x02, 0xe0, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x19, 0x04, 0x21, 0x05, 0x21, 0x05, 0x21, 0x25, 0x21, 0x04, 0x18, 0xa3, 0x00, 0x00, 0x00, 0xe0, 0x13, 0x62, 0x1c, 0xc2, 0x14, 0x02, 0x01, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x15, 0x43, 0x17, 0xa3, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x83, 0x1e, 0xe4, 0x1e, 0x23, 0x1d, 0xe3, 0x15, 0xe3, 0x1e, 0x43, 0x26, 0xa5, 0x27, 0x25, 0x1f, 0x63, 0x17, 0xa2, 0x07, 0xe2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xc2, 0x1f, 0x83, 0x1e, 0x23, 0x13, 0xa3, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x18, 0xa3, 0x29, 0x05, 0x29, 0x05, 0x19, 0x05, 0x21, 0x24, 0x21, 0x05, 0x18, 0x63, 0x10, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xa0, 0x14, 0x82, 0x17, 0xa2, 0x07, 0xe0, 0x17, 0xc2, 0x17, 0xc2, 0x17, 0x63, 0x1d, 0x83, 0x02, 0xe0, 0x01, 0x00, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x01, 0x20, 0x02, 0x20, 0x13, 0x42, 0x14, 0xa3, 0x1e, 0x23, 0x27, 0x04, 0x1f, 0x83, 0x17, 0x82, 0x1f, 0x63, 0x27, 0x24, 0x1e, 0x83, 0x15, 0x83, 0x1c, 0x45, 0x1a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0xe2, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x20, 0x02, 0x00, 0x02, 0x40, 0x02, 0x40, 0x01, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x10, 0x00, 0x18, 0xa3, 0x29, 0x04, 0x29, 0x05, 0x21, 0x23, 0x21, 0x24, 0x21, 0x05, 0x18, 0xe3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa4, 0x29, 0x24, 0x18, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x12, 0xa2, 0x1f, 0x03, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc0, 0x1e, 0xa3, 0x13, 0x02, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xe0, 0x01, 0xe0, 0x02, 0xe0, 0x03, 0x20, 0x02, 0xa0, 0x01, 0x80, 0x01, 0x00, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x63, 0x18, 0xa3, 0x18, 0xe3, 0x21, 0x04, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x21, 0x04, 0x18, 0xa3, 0x10, 0x62, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2e, 0x06, 0x1f, 0x23, 0x17, 0x43, 0x17, 0x42, 0x1f, 0x43, 0x1f, 0x23, 0x1f, 0x23, 0x1f, 0x43, 0x1f, 0x43, 0x1f, 0x23, 0x1f, 0x23, 0x1f, 0x43, 0x1f, 0x23, 0x1f, 0x43, 0x1f, 0x23, 0x26, 0xc4, 0x13, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x04, 0x21, 0x23, 0x21, 0x25, 0x21, 0x05, 0x21, 0x24, 0x21, 0x24, 0x29, 0x04, 0x21, 0x05, 0x21, 0x25, 0x29, 0x24, 0x29, 0x04, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1d, 0xa3, 0x17, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0xe2, 0x02, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x21, 0x04, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x18, 0xe3, 0x18, 0xa3, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xa0, 0x1d, 0x24, 0x1e, 0x62, 0x1e, 0xa3, 0x17, 0x23, 0x17, 0xa2, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xc2, 0x17, 0x03, 0x13, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x21, 0x04, 0x29, 0x05, 0x29, 0x05, 0x29, 0x24, 0x21, 0x24, 0x21, 0x23, 0x29, 0x05, 0x21, 0x05, 0x21, 0x04, 0x21, 0x04, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x62, 0x17, 0x23, 0x07, 0xc0, 0x07, 0xc0, 0x17, 0x63, 0x13, 0xa2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x21, 0x04, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x19, 0x24, 0x19, 0x03, 0x10, 0x62, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x01, 0x60, 0x01, 0x60, 0x02, 0x40, 0x14, 0xe2, 0x1f, 0x23, 0x17, 0x82, 0x17, 0xa2, 0x17, 0xc2, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc2, 0x1e, 0xe3, 0x13, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x03, 0x21, 0x04, 0x21, 0x25, 0x21, 0x05, 0x29, 0x04, 0x29, 0x06, 0x21, 0x05, 0x29, 0x24, 0x21, 0x04, 0x21, 0x04, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0x22, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xc0, 0x1d, 0xe3, 0x00, 0xe0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x26, 0x29, 0x25, 0x20, 0xe4, 0x10, 0xa2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x12, 0x62, 0x13, 0x62, 0x13, 0xc2, 0x04, 0x42, 0x1e, 0x03, 0x1f, 0x62, 0x07, 0xc0, 0x07, 0xe2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x02, 0x13, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa2, 0x29, 0x04, 0x29, 0x05, 0x21, 0x25, 0x21, 0x24, 0x21, 0x05, 0x21, 0x05, 0x29, 0x25, 0x21, 0x04, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x15, 0x62, 0x17, 0xc2, 0x07, 0xe0, 0x07, 0xc0, 0x13, 0xa2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x31, 0x06, 0x29, 0x26, 0x29, 0x25, 0x21, 0x64, 0x19, 0x03, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x01, 0x00, 0x14, 0x03, 0x1e, 0x03, 0x1e, 0x63, 0x1e, 0xa3, 0x1f, 0x02, 0x17, 0xa2, 0x17, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x03, 0x13, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0x62, 0x20, 0xe3, 0x29, 0x24, 0x21, 0x23, 0x21, 0x24, 0x29, 0x05, 0x29, 0x25, 0x21, 0x04, 0x29, 0x25, 0x18, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1e, 0x23, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x82, 0x12, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x18, 0xe3, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x26, 0x31, 0x26, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x18, 0xe3, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x02, 0x20, 0x1d, 0xc3, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0xc2, 0x1e, 0xe3, 0x13, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x18, 0xa3, 0x21, 0x23, 0x29, 0x24, 0x29, 0x24, 0x21, 0x04, 0x21, 0x04, 0x29, 0x25, 0x18, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x16, 0xa3, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x42, 0x02, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x21, 0x45, 0x29, 0x45, 0x31, 0x26, 0x29, 0x26, 0x31, 0x25, 0x29, 0x64, 0x29, 0x45, 0x29, 0x05, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x15, 0xa2, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x23, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x16, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x23, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x04, 0x29, 0x25, 0x29, 0x45, 0x21, 0x04, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x21, 0x65, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x44, 0x21, 0x64, 0x29, 0x64, 0x29, 0x45, 0x29, 0x45, 0x20, 0xe4, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x40, 0x16, 0x62, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x15, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1e, 0x83, 0x07, 0xe0, 0x07, 0xc2, 0x17, 0x23, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x24, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x60, 0x04, 0x22, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xc2, 0x07, 0xe0, 0x1d, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1e, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x42, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x10, 0x62, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0x62, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1e, 0x63, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x62, 0x02, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x10, 0x62, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x13, 0x02, 0x1f, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1d, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa2, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x21, 0x04, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x22, 0x26, 0xe4, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0xe2, 0x17, 0xc2, 0x07, 0xe0, 0x07, 0xc2, 0x14, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x18, 0xa3, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1d, 0x03, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0xe2, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x1d, 0x83, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x17, 0x22, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x62, 0x1f, 0x43, 0x07, 0xe0, 0x07, 0xe2, 0x1e, 0xe3, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x16, 0x62, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1e, 0x63, 0x07, 0xc2, 0x07, 0xe0, 0x17, 0x82, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1e, 0x23, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x15, 0x22, 0x17, 0xc2, 0x07, 0xe0, 0x07, 0xe2, 0x1d, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x21, 0x24, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1d, 0xc3, 0x07, 0xe0, 0x07, 0xe0, 0x14, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x60, 0x13, 0x22, 0x17, 0x63, 0x07, 0xe0, 0x07, 0xc0, 0x26, 0xe3, 0x01, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x18, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x03, 0x1f, 0x63, 0x07, 0xe0, 0x15, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x1e, 0xa3, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc2, 0x13, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x21, 0x04, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0x63, 0x00, 0x00, 0x00, 0x60, 0x01, 0x20, 0x1d, 0xc3, 0x07, 0xe0, 0x15, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x15, 0x02, 0x17, 0xc2, 0x07, 0xc0, 0x07, 0xc0, 0x1e, 0x03, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x46, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x05, 0x10, 0x02, 0x00, 0x00, 0x00, 0x60, 0x14, 0x82, 0x07, 0xc0, 0x1c, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x12, 0xa2, 0x1f, 0x43, 0x07, 0xc0, 0x07, 0xe0, 0x1f, 0x83, 0x02, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x25, 0x29, 0x45, 0x29, 0x44, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x44, 0x29, 0x45, 0x31, 0x26, 0x18, 0xa3, 0x00, 0x02, 0x00, 0x00, 0x14, 0x02, 0x17, 0xc0, 0x1c, 0xe3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1d, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x15, 0x83, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xe4, 0x29, 0x25, 0x29, 0x44, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x05, 0x10, 0x62, 0x00, 0x00, 0x13, 0xa2, 0x27, 0x43, 0x1c, 0xc3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xa2, 0x17, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x43, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x26, 0x29, 0x25, 0x29, 0x45, 0x29, 0x44, 0x29, 0x45, 0x29, 0x45, 0x18, 0xe3, 0x00, 0x00, 0x01, 0x80, 0x1b, 0xc3, 0x1a, 0xa3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x1e, 0x83, 0x07, 0xc0, 0x07, 0xe0, 0x17, 0xa2, 0x1d, 0x03, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x05, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x26, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x44, 0x29, 0x44, 0x10, 0x62, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x10, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0x43, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x03, 0x02, 0x62, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x44, 0x18, 0xe3, 0x10, 0x02, 0x00, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1f, 0x43, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc2, 0x1d, 0x23, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x23, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x26, 0x29, 0x26, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x15, 0x62, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x03, 0x12, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0xa2, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x26, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x26, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x26, 0x21, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x26, 0x29, 0x25, 0x29, 0x44, 0x31, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x31, 0x24, 0x31, 0x25, 0x29, 0x25, 0x29, 0x26, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0xa0, 0x1f, 0x63, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xc0, 0x15, 0x42, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 0xe3, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x26, 0x29, 0x45, 0x29, 0x64, 0x29, 0x45, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x21, 0x45, 0x29, 0x44, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1d, 0xc4, 0x17, 0xc2, 0x07, 0xc0, 0x07, 0xe0, 0x1f, 0x03, 0x12, 0xe2, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x31, 0x25, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x46, 0x21, 0x46, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x21, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x26, 0x29, 0x26, 0x29, 0x26, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x44, 0x29, 0x45, 0x29, 0x46, 0x29, 0x46, 0x29, 0x46, 0x29, 0x45, 0x29, 0x46, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x26, 0x29, 0x46, 0x21, 0x65, 0x29, 0x45, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x10, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x00, 0x00, 0x13, 0x02, 0x17, 0x63, 0x07, 0xc0, 0x07, 0xe2, 0x17, 0xa2, 0x1e, 0x03, 0x01, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x46, 0x29, 0x46, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x44, 0x29, 0x25, 0x29, 0x25, 0x31, 0x25, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x21, 0x64, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x26, 0x29, 0x44, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x21, 0x65, 0x31, 0x24, 0x31, 0x05, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xa2, 0x18, 0xe3, 0x00, 0x00, 0x00, 0xa0, 0x1d, 0x24, 0x1f, 0x45, 0x1f, 0x64, 0x1f, 0x63, 0x2f, 0x05, 0x23, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x21, 0x03, 0x29, 0x45, 0x31, 0x25, 0x31, 0x06, 0x29, 0x46, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x21, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x31, 0x26, 0x29, 0x25, 0x29, 0x25, 0x29, 0x24, 0x31, 0x25, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x31, 0x25, 0x29, 0x45, 0x31, 0x25, 0x29, 0x25, 0x31, 0x26, 0x29, 0x26, 0x29, 0x25, 0x29, 0x45, 0x29, 0x44, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x21, 0x65, 0x29, 0x45, 0x29, 0x43, 0x29, 0x24, 0x29, 0x25, 0x29, 0x43, 0x31, 0x25, 0x31, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x21, 0x46, 0x31, 0x25, 0x31, 0x24, 0x29, 0x25, 0x29, 0x44, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x05, 0x20, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x01, 0xc0, 0x02, 0x00, 0x01, 0xe0, 0x01, 0x80, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x02, 0x10, 0x02, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0x62, 0x18, 0xa3, 0x18, 0xe4, 0x18, 0xe3, 0x10, 0x63, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x00, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0x63, 0x18, 0x63, 0x18, 0x63, 0x10, 0x62, 0x10, 0x62, 0x10, 0x63, 0x10, 0x63, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x63, 0x10, 0x62, 0x10, 0x60, 0x10, 0x62, 0x10, 0x62, 0x00, 0x60, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x60, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x80, 0x01, 0x40, 0x00, 0x60, 0x01, 0x20, 0x01, 0x80, 0x01, 0x60, 0x01, 0x20, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x01, 0x20, 0x01, 0x80, 0x01, 0x20, 0x00, 0xa0, 0x01, 0x20, 0x01, 0x60, 0x01, 0x80, 0x01, 0x80, 0x01, 0x60, 0x00, 0xe0, 0x00, 0x60, 0x01, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x60, 0x01, 0x60, 0x01, 0x00, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x40, 0x01, 0x80, 0x01, 0x60, 0x01, 0x80, 0x01, 0xa0, 0x01, 0x80, 0x01, 0x60, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x80, 0x01, 0x80, 0x01, 0x40, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x60, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x40, 0x01, 0xa0, 0x01, 0x40, 0x00, 0x60, 0x01, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xa0, 0x00, 0x60, 0x01, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x60, 0x01, 0x40, 0x00, 0xe0, 0x01, 0x40, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x40, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1b, 0xe3, 0x1e, 0x63, 0x1e, 0x83, 0x14, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0xe4, 0x1e, 0x63, 0x1d, 0xe4, 0x01, 0xe0, 0x1d, 0x03, 0x1e, 0xa3, 0x1e, 0x83, 0x25, 0xe5, 0x01, 0x60, 0x00, 0x00, 0x01, 0x20, 0x25, 0x83, 0x1e, 0x63, 0x1d, 0xa3, 0x12, 0xa2, 0x26, 0x23, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0x64, 0x2d, 0x26, 0x01, 0xe0, 0x1c, 0xe3, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0x64, 0x1e, 0x63, 0x1e, 0x43, 0x25, 0x44, 0x13, 0x42, 0x00, 0xe0, 0x00, 0x00, 0x01, 0x20, 0x2d, 0xc6, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x83, 0x1d, 0x23, 0x13, 0xa2, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0x63, 0x13, 0x42, 0x00, 0x60, 0x00, 0x60, 0x1b, 0xe3, 0x1e, 0x63, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x64, 0x16, 0xc3, 0x1d, 0xe3, 0x01, 0xe0, 0x1d, 0x03, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0x64, 0x01, 0xa0, 0x1c, 0xc3, 0x1e, 0xa3, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0x83, 0x1e, 0x83, 0x2e, 0x25, 0x13, 0x62, 0x1d, 0xc3, 0x1e, 0x83, 0x1e, 0xa3, 0x1e, 0x83, 0x1e, 0x63, 0x1e, 0x24, 0x1d, 0x03, 0x12, 0xc2, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0xa2, 0x17, 0xc2, 0x17, 0xa2, 0x14, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x15, 0xe2, 0x17, 0xa2, 0x17, 0x22, 0x02, 0x40, 0x1d, 0xe3, 0x07, 0xe2, 0x07, 0xc0, 0x17, 0xa2, 0x14, 0xc3, 0x00, 0xa0, 0x01, 0x80, 0x1e, 0x63, 0x17, 0xc2, 0x1e, 0xa3, 0x12, 0x42, 0x1d, 0xa3, 0x17, 0x62, 0x17, 0xc2, 0x07, 0xc0, 0x1f, 0x43, 0x24, 0xe4, 0x01, 0xe0, 0x1d, 0xc3, 0x07, 0xe0, 0x17, 0xc2, 0x16, 0x62, 0x1e, 0x43, 0x1f, 0x23, 0x17, 0xa2, 0x1f, 0x62, 0x1d, 0x03, 0x00, 0xe0, 0x01, 0x40, 0x1f, 0x03, 0x07, 0xe0, 0x17, 0xc0, 0x17, 0x43, 0x1e, 0xe3, 0x1f, 0x03, 0x1e, 0xe3, 0x25, 0x43, 0x14, 0x22, 0x17, 0xa2, 0x07, 0xe2, 0x07, 0xc2, 0x1e, 0x83, 0x01, 0x80, 0x00, 0x60, 0x1c, 0xc3, 0x17, 0x82, 0x07, 0xc2, 0x17, 0x42, 0x1e, 0xe3, 0x1f, 0x03, 0x17, 0x22, 0x17, 0xc2, 0x07, 0xe0, 0x17, 0x62, 0x1e, 0xe3, 0x1e, 0xe3, 0x1e, 0x83, 0x1e, 0x43, 0x16, 0xe2, 0x07, 0xc2, 0x17, 0xa2, 0x17, 0x62, 0x1d, 0x23, 0x01, 0xa0, 0x1d, 0xc3, 0x07, 0xc2, 0x17, 0xc2, 0x1f, 0x22, 0x1e, 0xe3, 0x1e, 0xe3, 0x1e, 0xa2, 0x1e, 0x83, 0x1e, 0x43, 0x16, 0xa2, 0x17, 0xc2, 0x07, 0xe0, 0x17, 0x82, 0x1d, 0x83, 0x01, 0x40, 0x15, 0x82, 0x07, 0xc2, 0x07, 0xc2, 0x17, 0x62, 0x1e, 0xe3, 0x1e, 0xe3, 0x1e, 0xe3, 0x2e, 0x65, 0x13, 0x82, 0x16, 0xe2, 0x17, 0xc2, 0x17, 0x82, 0x15, 0xa2, 0x1e, 0x63, 0x17, 0x63, 0x17, 0xc2, 0x17, 0x42, 0x13, 0xe2, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0xa2, 0x07, 0xc0, 0x17, 0xc2, 0x15, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x16, 0x02, 0x07, 0xc2, 0x17, 0x42, 0x02, 0x40, 0x15, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x24, 0x02, 0xa2, 0x01, 0xa0, 0x1e, 0x83, 0x07, 0xe0, 0x16, 0xa2, 0x00, 0x60, 0x00, 0x60, 0x15, 0x82, 0x07, 0xc0, 0x07, 0xc0, 0x1d, 0x83, 0x01, 0x00, 0x01, 0x00, 0x1d, 0xc3, 0x07, 0xe0, 0x1f, 0x43, 0x02, 0x40, 0x01, 0x00, 0x12, 0xe2, 0x16, 0x63, 0x07, 0xc2, 0x1f, 0x63, 0x14, 0x02, 0x01, 0x60, 0x1f, 0x23, 0x07, 0xc0, 0x1e, 0xc2, 0x13, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x11, 0x82, 0x13, 0xc2, 0x17, 0xc2, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0xa2, 0x15, 0x22, 0x00, 0xe0, 0x1c, 0xc3, 0x17, 0xc2, 0x07, 0xc2, 0x03, 0xc2, 0x12, 0x02, 0x12, 0x22, 0x03, 0x40, 0x1f, 0x63, 0x07, 0xe0, 0x16, 0x02, 0x02, 0x82, 0x02, 0x00, 0x01, 0x80, 0x01, 0x20, 0x1c, 0xa3, 0x17, 0xc2, 0x17, 0xc2, 0x1d, 0xa3, 0x01, 0x00, 0x00, 0xa0, 0x1d, 0xe3, 0x07, 0xe0, 0x17, 0x82, 0x13, 0x82, 0x12, 0x22, 0x01, 0xe2, 0x01, 0xc0, 0x01, 0x40, 0x01, 0x00, 0x14, 0x02, 0x17, 0xa2, 0x07, 0xc0, 0x16, 0x42, 0x01, 0x00, 0x00, 0x60, 0x15, 0x82, 0x17, 0xc0, 0x17, 0x82, 0x14, 0x20, 0x12, 0x42, 0x02, 0x22, 0x12, 0x02, 0x11, 0xe2, 0x02, 0x60, 0x16, 0xe2, 0x07, 0xc2, 0x1e, 0x83, 0x00, 0xa0, 0x01, 0x00, 0x13, 0x62, 0x1e, 0xe3, 0x17, 0xc2, 0x1f, 0x03, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0xa2, 0x07, 0xc0, 0x17, 0xa2, 0x14, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0xa0, 0x16, 0x03, 0x17, 0xc2, 0x17, 0x23, 0x02, 0x40, 0x1d, 0xe2, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, 0x1e, 0x03, 0x02, 0xa0, 0x1e, 0xa3, 0x07, 0xe0, 0x1e, 0x83, 0x00, 0x60, 0x00, 0x60, 0x1d, 0x02, 0x17, 0xa2, 0x17, 0xc2, 0x1c, 0xc3, 0x00, 0xa0, 0x00, 0xe0, 0x1d, 0xc3, 0x07, 0xc0, 0x27, 0x25, 0x01, 0x60, 0x00, 0x00, 0x00, 0x60, 0x02, 0xa0, 0x17, 0xa2, 0x07, 0xc0, 0x16, 0xc3, 0x01, 0xe0, 0x17, 0x42, 0x07, 0xc0, 0x1e, 0x43, 0x02, 0x40, 0x01, 0x00, 0x01, 0x00, 0x01, 0x20, 0x00, 0xa0, 0x13, 0xa2, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe2, 0x17, 0x62, 0x13, 0x22, 0x15, 0x03, 0x17, 0xc0, 0x17, 0xa2, 0x12, 0x42, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x27, 0x25, 0x07, 0xe0, 0x1d, 0x62, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x24, 0x63, 0x17, 0xc2, 0x17, 0xc0, 0x1d, 0x03, 0x00, 0x60, 0x00, 0xa0, 0x1d, 0xe2, 0x07, 0xe0, 0x17, 0x62, 0x03, 0x00, 0x01, 0x20, 0x01, 0x00, 0x01, 0x00, 0x00, 0xa0, 0x00, 0x60, 0x1b, 0xa3, 0x17, 0xa2, 0x07, 0xc0, 0x1d, 0xa2, 0x00, 0xa0, 0x00, 0x60, 0x15, 0xa2, 0x07, 0xe0, 0x17, 0x42, 0x03, 0x60, 0x01, 0x20, 0x01, 0x20, 0x01, 0x20, 0x00, 0xa0, 0x01, 0xe0, 0x17, 0x02, 0x07, 0xc0, 0x16, 0x03, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x14, 0x62, 0x17, 0x83, 0x17, 0xc2, 0x14, 0xe3, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0x62, 0x07, 0xc0, 0x17, 0xc2, 0x14, 0xc2, 0x00, 0x60, 0x10, 0x00, 0x00, 0x60, 0x16, 0x22, 0x17, 0xc2, 0x16, 0xe2, 0x02, 0x20, 0x1d, 0xe2, 0x07, 0xe0, 0x07, 0xa2, 0x16, 0xe2, 0x17, 0xa2, 0x17, 0xa2, 0x05, 0xa2, 0x1e, 0xe3, 0x07, 0xe2, 0x1e, 0x83, 0x00, 0x60, 0x00, 0x60, 0x1c, 0xc2, 0x17, 0xc2, 0x17, 0xa2, 0x1c, 0xc3, 0x00, 0xa0, 0x00, 0xe0, 0x1d, 0xe2, 0x07, 0xe0, 0x27, 0x26, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x17, 0x02, 0x17, 0xc2, 0x1f, 0x83, 0x02, 0xa0, 0x17, 0x43, 0x07, 0xe0, 0x07, 0xe2, 0x17, 0xa2, 0x17, 0x83, 0x1f, 0x83, 0x1f, 0x83, 0x1b, 0xc3, 0x13, 0xa2, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0x00, 0x17, 0x62, 0x17, 0xa2, 0x16, 0xc3, 0x15, 0xc2, 0x17, 0xa0, 0x17, 0xa2, 0x12, 0x62, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x27, 0x45, 0x07, 0xe0, 0x1d, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x83, 0x17, 0xc2, 0x17, 0xc2, 0x1c, 0xe3, 0x00, 0x60, 0x00, 0xa0, 0x16, 0x03, 0x07, 0xe0, 0x17, 0xc0, 0x17, 0xa2, 0x1f, 0x83, 0x17, 0x63, 0x17, 0x83, 0x1d, 0x43, 0x00, 0x60, 0x13, 0xa3, 0x17, 0xa2, 0x07, 0xe0, 0x15, 0xa2, 0x00, 0xa0, 0x00, 0x60, 0x1d, 0x83, 0x07, 0xc0, 0x07, 0xc0, 0x17, 0xa2, 0x17, 0x83, 0x17, 0x83, 0x17, 0x83, 0x1d, 0x83, 0x02, 0x80, 0x17, 0x02, 0x07, 0xc0, 0x16, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x1b, 0x02, 0x1f, 0x63, 0x17, 0xc0, 0x2e, 0x24, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x02, 0x07, 0xc2, 0x17, 0xc2, 0x15, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x16, 0x82, 0x17, 0xe0, 0x16, 0xc2, 0x02, 0x00, 0x1d, 0xe3, 0x07, 0xe0, 0x17, 0x63, 0x03, 0xa0, 0x26, 0xc3, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0xc2, 0x07, 0xe0, 0x1e, 0x83, 0x00, 0x60, 0x00, 0x60, 0x1c, 0xe3, 0x17, 0xa2, 0x17, 0xc2, 0x1c, 0xc3, 0x00, 0xa0, 0x00, 0xe0, 0x16, 0x02, 0x07, 0xe0, 0x27, 0x05, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x16, 0xe2, 0x07, 0xc0, 0x17, 0x82, 0x02, 0xc0, 0x17, 0x23, 0x07, 0xe0, 0x17, 0xc2, 0x17, 0xa2, 0x17, 0x82, 0x17, 0x83, 0x1f, 0x63, 0x1b, 0xa3, 0x13, 0x82, 0x17, 0xc2, 0x17, 0xa2, 0x15, 0x22, 0x1c, 0xe3, 0x17, 0xa2, 0x07, 0xc2, 0x07, 0xa2, 0x07, 0xc0, 0x17, 0xa2, 0x12, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x1f, 0x44, 0x07, 0xe0, 0x1d, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x83, 0x17, 0xa2, 0x07, 0xc2, 0x1d, 0x03, 0x00, 0x60, 0x00, 0xa0, 0x15, 0xe3, 0x07, 0xe0, 0x17, 0xc2, 0x17, 0x82, 0x1f, 0x63, 0x1f, 0x83, 0x17, 0x82, 0x1d, 0x63, 0x00, 0x60, 0x13, 0xe3, 0x17, 0xc2, 0x07, 0xe0, 0x15, 0xa3, 0x00, 0xa0, 0x00, 0x60, 0x15, 0x83, 0x07, 0xc0, 0x07, 0xc0, 0x17, 0xa2, 0x1f, 0x63, 0x1f, 0x63, 0x1f, 0x83, 0x1d, 0x83, 0x02, 0x80, 0x17, 0x02, 0x17, 0xc2, 0x15, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x12, 0xe2, 0x1f, 0x63, 0x07, 0xc0, 0x2e, 0x44, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x82, 0x17, 0xc2, 0x17, 0xa2, 0x15, 0x22, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x17, 0x03, 0x07, 0xe0, 0x16, 0xa2, 0x02, 0x00, 0x1d, 0xe3, 0x07, 0xc0, 0x1f, 0x23, 0x02, 0x40, 0x13, 0xa2, 0x1f, 0x63, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0xa3, 0x00, 0xa0, 0x00, 0x60, 0x14, 0xe2, 0x17, 0x83, 0x17, 0xc2, 0x1c, 0xa3, 0x00, 0x60, 0x00, 0xe0, 0x15, 0xe3, 0x07, 0xe0, 0x2f, 0x05, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x17, 0x82, 0x07, 0xe0, 0x1f, 0x43, 0x02, 0x00, 0x1f, 0x22, 0x17, 0xc0, 0x1e, 0x03, 0x01, 0xe0, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0xa0, 0x13, 0xa2, 0x07, 0xc0, 0x17, 0xa2, 0x14, 0x62, 0x01, 0xe0, 0x16, 0xc2, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x82, 0x12, 0x62, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x1f, 0x44, 0x07, 0xe0, 0x15, 0x43, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x84, 0x17, 0xa3, 0x07, 0xc2, 0x1d, 0x03, 0x00, 0x60, 0x00, 0xa0, 0x1d, 0xc3, 0x07, 0xe0, 0x1f, 0x23, 0x02, 0x60, 0x01, 0x00, 0x01, 0x20, 0x01, 0x20, 0x00, 0xa0, 0x00, 0x60, 0x13, 0xe2, 0x17, 0xa2, 0x17, 0xe2, 0x1d, 0x62, 0x00, 0xa0, 0x00, 0x60, 0x15, 0xc2, 0x07, 0xe0, 0x17, 0x42, 0x03, 0x00, 0x01, 0x20, 0x01, 0x20, 0x01, 0x20, 0x00, 0xa0, 0x01, 0xe0, 0x17, 0x02, 0x07, 0xc0, 0x15, 0xc2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x14, 0x42, 0x17, 0xa3, 0x07, 0xe0, 0x1d, 0x83, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0xa2, 0x17, 0x42, 0x07, 0xc0, 0x1d, 0xe3, 0x00, 0xe0, 0x00, 0xa0, 0x12, 0x20, 0x1f, 0x82, 0x17, 0xc2, 0x1d, 0xe3, 0x01, 0xc0, 0x15, 0xe3, 0x17, 0xc0, 0x1f, 0x03, 0x01, 0xe0, 0x00, 0xe0, 0x1d, 0xa3, 0x17, 0xa0, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0x63, 0x00, 0x60, 0x00, 0x60, 0x1d, 0x22, 0x17, 0xa2, 0x07, 0xc2, 0x1d, 0x23, 0x00, 0xa0, 0x00, 0xe0, 0x15, 0xe3, 0x07, 0xe0, 0x2f, 0x23, 0x01, 0x40, 0x00, 0x60, 0x01, 0xa0, 0x15, 0x82, 0x17, 0xa2, 0x17, 0xa2, 0x1c, 0xe3, 0x01, 0xa0, 0x17, 0x23, 0x07, 0xc0, 0x1d, 0xe3, 0x01, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x13, 0x82, 0x07, 0xc2, 0x17, 0xa2, 0x14, 0x22, 0x00, 0x60, 0x13, 0x62, 0x17, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x83, 0x12, 0x42, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x1f, 0x44, 0x07, 0xe0, 0x15, 0x43, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1c, 0xc3, 0x17, 0xc2, 0x07, 0xc2, 0x1d, 0x43, 0x00, 0xa0, 0x00, 0xa0, 0x1d, 0xe3, 0x07, 0xc0, 0x1e, 0xe4, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x42, 0x17, 0xc2, 0x07, 0xc0, 0x15, 0xe2, 0x00, 0xa0, 0x00, 0x60, 0x15, 0x82, 0x17, 0xc0, 0x17, 0x22, 0x02, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x02, 0x00, 0x16, 0xe3, 0x07, 0xc2, 0x15, 0xe2, 0x00, 0xa0, 0x00, 0xa0, 0x12, 0xa2, 0x16, 0xc3, 0x07, 0xc2, 0x17, 0x62, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1d, 0xc3, 0x17, 0xc0, 0x17, 0x82, 0x1d, 0xe3, 0x04, 0xe2, 0x1e, 0xa2, 0x17, 0xa2, 0x17, 0x82, 0x1c, 0x23, 0x01, 0x20, 0x16, 0x02, 0x07, 0xe0, 0x1e, 0xe3, 0x01, 0xa0, 0x00, 0x00, 0x02, 0x40, 0x1e, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0x83, 0x01, 0x40, 0x13, 0x82, 0x16, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0x83, 0x13, 0x02, 0x01, 0x60, 0x1d, 0xc3, 0x07, 0xe0, 0x17, 0x82, 0x04, 0x82, 0x15, 0x22, 0x1e, 0xa3, 0x17, 0x82, 0x17, 0xa2, 0x1e, 0x24, 0x01, 0x80, 0x01, 0x60, 0x17, 0x23, 0x07, 0xc0, 0x17, 0x42, 0x15, 0xe2, 0x1d, 0x83, 0x15, 0xa2, 0x15, 0xa3, 0x1c, 0x43, 0x14, 0x02, 0x07, 0xc0, 0x17, 0xa3, 0x13, 0xe2, 0x00, 0x60, 0x00, 0xa0, 0x15, 0x83, 0x17, 0xc2, 0x07, 0xe0, 0x17, 0xa3, 0x12, 0x62, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x27, 0x43, 0x07, 0xe0, 0x15, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0x13, 0x82, 0x1e, 0x63, 0x07, 0xe0, 0x07, 0xc2, 0x16, 0xc2, 0x13, 0x02, 0x01, 0x20, 0x15, 0xe3, 0x07, 0xc0, 0x26, 0xe4, 0x01, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa0, 0x13, 0x02, 0x16, 0x22, 0x07, 0xc0, 0x07, 0xc0, 0x17, 0x23, 0x13, 0x82, 0x00, 0xe0, 0x15, 0x82, 0x07, 0xc0, 0x17, 0xa2, 0x16, 0x22, 0x1d, 0x83, 0x1d, 0x83, 0x15, 0x82, 0x25, 0x23, 0x13, 0x42, 0x17, 0x02, 0x17, 0xc2, 0x06, 0xe0, 0x04, 0xc0, 0x1d, 0xe3, 0x1f, 0x23, 0x17, 0xa2, 0x17, 0x82, 0x1d, 0x03, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0x60, 0x1e, 0x03, 0x17, 0x62, 0x17, 0xa2, 0x17, 0xa3, 0x17, 0x82, 0x1e, 0xe3, 0x1c, 0xe3, 0x01, 0x40, 0x00, 0xe0, 0x1d, 0xc3, 0x17, 0xc2, 0x26, 0xc5, 0x01, 0x60, 0x00, 0x00, 0x00, 0x60, 0x13, 0xc3, 0x17, 0x03, 0x17, 0xa2, 0x1e, 0x83, 0x1a, 0xe2, 0x27, 0x23, 0x17, 0x82, 0x17, 0xc2, 0x17, 0xc0, 0x1f, 0x83, 0x2e, 0x05, 0x02, 0x40, 0x1d, 0xc3, 0x17, 0xc2, 0x17, 0xc2, 0x17, 0x83, 0x17, 0x83, 0x17, 0x62, 0x17, 0x03, 0x1d, 0xa3, 0x12, 0x02, 0x00, 0x60, 0x01, 0x40, 0x1f, 0x03, 0x17, 0xc2, 0x17, 0xc2, 0x17, 0xa3, 0x17, 0xc2, 0x17, 0xc2, 0x17, 0xa2, 0x1d, 0xc4, 0x14, 0x22, 0x17, 0xa2, 0x1f, 0x63, 0x13, 0x82, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc2, 0x1e, 0x63, 0x17, 0x82, 0x17, 0x83, 0x12, 0x62, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x2f, 0x25, 0x17, 0xc2, 0x1d, 0x23, 0x00, 0x60, 0x00, 0x00, 0x12, 0x62, 0x27, 0x05, 0x1f, 0x83, 0x17, 0xc2, 0x17, 0xa3, 0x17, 0xa3, 0x26, 0x64, 0x01, 0xe0, 0x1d, 0xe3, 0x17, 0xc2, 0x26, 0xc4, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x02, 0x2e, 0xe5, 0x17, 0x82, 0x17, 0xc2, 0x17, 0xa2, 0x17, 0x83, 0x26, 0xe5, 0x11, 0xc2, 0x1d, 0x83, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x2f, 0x05, 0x13, 0xc2, 0x17, 0x02, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0x82, 0x17, 0xa2, 0x07, 0x82, 0x1e, 0xc3, 0x1c, 0xe3, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x40, 0x12, 0x82, 0x13, 0x02, 0x13, 0x22, 0x12, 0xa2, 0x02, 0x00, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x12, 0x62, 0x13, 0x42, 0x12, 0xe3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x12, 0x42, 0x13, 0x02, 0x12, 0xe2, 0x01, 0x00, 0x12, 0xe2, 0x13, 0x22, 0x13, 0x42, 0x13, 0x42, 0x13, 0x22, 0x12, 0x62, 0x01, 0x00, 0x12, 0xc2, 0x13, 0x82, 0x13, 0x42, 0x13, 0x02, 0x12, 0xc2, 0x12, 0x82, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x12, 0xe2, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x12, 0x62, 0x11, 0xe2, 0x13, 0x42, 0x1b, 0x02, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x12, 0xc2, 0x13, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1a, 0xe3, 0x13, 0x42, 0x12, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0x12, 0xe2, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x12, 0x62, 0x00, 0xa0, 0x12, 0x62, 0x13, 0x42, 0x12, 0xe3, 0x00, 0xa0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x12, 0xa2, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x13, 0x42, 0x12, 0xa2, 0x00, 0xa0, 0x12, 0x62, 0x13, 0x42, 0x13, 0x22, 0x13, 0x02, 0x13, 0x22, 0x13, 0x42, 0x13, 0x42, 0x1a, 0xe3, 0x01, 0xa0, 0x13, 0x42, 0x13, 0x62, 0x13, 0x22, 0x12, 0xe2, 0x12, 0xc2, 0x12, 0xa2, 0x01, 0xe0, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0x63, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x20, 0xe3, 0x10, 0xa2, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe0, 0x13, 0x82, 0x1d, 0x43, 0x1d, 0xc3, 0x1d, 0xc3, 0x1d, 0xc3, 0x25, 0xa3, 0x1d, 0xa3, 0x1d, 0x63, 0x1d, 0x83, 0x1d, 0x83, 0x1d, 0x43, 0x1d, 0x43, 0x1d, 0x43, 0x1d, 0x42, 0x1d, 0x22, 0x1d, 0x23, 0x14, 0xe2, 0x14, 0xe2, 0x1c, 0xe2, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0x42, 0x1c, 0xa2, 0x1c, 0x43, 0x01, 0x60, 0x1b, 0x03, 0x14, 0xa2, 0x14, 0xc2, 0x14, 0xa2, 0x14, 0x82, 0x14, 0x22, 0x13, 0x42, 0x01, 0xe0, 0x00, 0x60, 0x00, 0x60, 0x12, 0x42, 0x14, 0x63, 0x14, 0xa3, 0x14, 0xa2, 0x14, 0xc2, 0x14, 0x82, 0x1a, 0xa3, 0x00, 0x60, 0x00, 0x60, 0x12, 0x82, 0x1d, 0x03, 0x26, 0x84, 0x2e, 0xa5, 0x36, 0x85, 0x25, 0xa4, 0x13, 0xe2, 0x01, 0x20, 0x00, 0x02, 0x00, 0x00, 0x01, 0x20, 0x13, 0xe3, 0x1d, 0xa3, 0x26, 0x44, 0x26, 0x65, 0x1e, 0x85, 0x25, 0xe3, 0x1b, 0xc3, 0x00, 0xe0, 0x00, 0x00, 0x10, 0xa2, 0x1b, 0xa3, 0x14, 0xa2, 0x14, 0xa2, 0x1c, 0x43, 0x12, 0x82, 0x1c, 0x43, 0x1c, 0x43, 0x11, 0xe2, 0x01, 0x00, 0x13, 0x62, 0x14, 0xa2, 0x12, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x19, 0x03, 0x10, 0x62, 0x10, 0x02, 0x00, 0x60, 0x1c, 0x83, 0x1f, 0x62, 0x17, 0xa2, 0x1f, 0x63, 0x1e, 0xe3, 0x1f, 0x23, 0x1f, 0x82, 0x07, 0xc0, 0x07, 0xc2, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x07, 0xc0, 0x07, 0xe0, 0x17, 0xa2, 0x1f, 0x82, 0x17, 0xa2, 0x07, 0xc2, 0x07, 0xc2, 0x17, 0xa2, 0x1d, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x15, 0x62, 0x17, 0xa2, 0x17, 0x42, 0x02, 0x80, 0x1d, 0x63, 0x07, 0xc2, 0x07, 0xc0, 0x17, 0x62, 0x1f, 0x63, 0x17, 0xa2, 0x17, 0xa2, 0x1e, 0xc3, 0x13, 0xc2, 0x00, 0xe0, 0x24, 0x23, 0x27, 0x05, 0x17, 0xa2, 0x17, 0xc2, 0x17, 0xc2, 0x1f, 0x63, 0x2c, 0xc5, 0x00, 0xa0, 0x12, 0xe2, 0x1f, 0x03, 0x17, 0xc0, 0x17, 0xa2, 0x1e, 0xe3, 0x1e, 0xe3, 0x17, 0xa2, 0x17, 0xa2, 0x1d, 0x63, 0x00, 0xa0, 0x00, 0xe0, 0x1d, 0x43, 0x17, 0x82, 0x17, 0xa3, 0x1f, 0x43, 0x1e, 0xe3, 0x1f, 0x43, 0x17, 0x82, 0x27, 0x24, 0x12, 0x42, 0x00, 0x02, 0x00, 0xa0, 0x13, 0xa2, 0x16, 0xe2, 0x17, 0xa2, 0x14, 0x82, 0x03, 0x40, 0x17, 0x23, 0x17, 0x42, 0x25, 0x63, 0x03, 0xe0, 0x1f, 0x63, 0x07, 0xe2, 0x14, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x18, 0xe3, 0x10, 0x62, 0x00, 0x02, 0x01, 0xe0, 0x1f, 0x03, 0x17, 0xc0, 0x17, 0x02, 0x13, 0x22, 0x11, 0xe2, 0x12, 0x42, 0x14, 0x62, 0x1e, 0x63, 0x1d, 0xe3, 0x14, 0xa2, 0x04, 0x40, 0x16, 0x82, 0x07, 0xe0, 0x07, 0xc0, 0x05, 0x40, 0x14, 0x22, 0x04, 0x60, 0x06, 0x62, 0x07, 0xe0, 0x07, 0xc0, 0x15, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x15, 0x82, 0x07, 0xc0, 0x17, 0x42, 0x02, 0x80, 0x1d, 0x63, 0x07, 0xe0, 0x17, 0xa2, 0x04, 0x00, 0x13, 0x02, 0x15, 0x22, 0x17, 0x22, 0x17, 0xa2, 0x1f, 0x23, 0x13, 0x42, 0x11, 0x20, 0x12, 0xa2, 0x17, 0x42, 0x07, 0xe0, 0x17, 0xc2, 0x14, 0xe2, 0x01, 0x60, 0x01, 0x80, 0x1e, 0x63, 0x07, 0xe0, 0x17, 0x62, 0x14, 0x82, 0x01, 0xe2, 0x12, 0x22, 0x1d, 0x42, 0x17, 0xa2, 0x17, 0x82, 0x13, 0xa2, 0x1b, 0x03, 0x1f, 0x43, 0x17, 0xc0, 0x16, 0x42, 0x12, 0xc2, 0x02, 0x00, 0x12, 0x82, 0x14, 0xc2, 0x36, 0x25, 0x11, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1d, 0xc3, 0x1f, 0x63, 0x01, 0x20, 0x02, 0x40, 0x17, 0x23, 0x15, 0x62, 0x1e, 0xa3, 0x17, 0x02, 0x06, 0xe2, 0x17, 0xa2, 0x14, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa0, 0x1f, 0x43, 0x07, 0xc2, 0x17, 0x22, 0x13, 0xe2, 0x01, 0x80, 0x00, 0xe0, 0x00, 0xa0, 0x11, 0x40, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x60, 0x15, 0x22, 0x07, 0xc0, 0x17, 0x62, 0x02, 0x80, 0x00, 0x00, 0x00, 0x60, 0x14, 0x42, 0x17, 0xc2, 0x07, 0xc2, 0x15, 0x62, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x15, 0x62, 0x17, 0xc2, 0x17, 0x42, 0x02, 0xa0, 0x1d, 0x63, 0x07, 0xc0, 0x1f, 0x63, 0x02, 0x20, 0x00, 0x60, 0x00, 0xa0, 0x13, 0xa2, 0x17, 0x82, 0x17, 0xc0, 0x1e, 0x63, 0x00, 0xa0, 0x00, 0x60, 0x16, 0xe2, 0x07, 0xe0, 0x17, 0xc2, 0x13, 0x42, 0x00, 0x60, 0x13, 0x62, 0x17, 0x83, 0x07, 0xe0, 0x1d, 0xe3, 0x01, 0x00, 0x00, 0x60, 0x00, 0x60, 0x01, 0xc0, 0x16, 0xe2, 0x17, 0xa2, 0x16, 0x63, 0x1c, 0x63, 0x17, 0x82, 0x07, 0xe0, 0x16, 0xa2, 0x13, 0x42, 0x01, 0x80, 0x00, 0xe0, 0x00, 0xa0, 0x11, 0x82, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1d, 0x83, 0x1f, 0x43, 0x00, 0xa0, 0x02, 0x00, 0x1f, 0x03, 0x03, 0x82, 0x1d, 0x43, 0x1e, 0x84, 0x04, 0x00, 0x1f, 0x43, 0x1c, 0xc3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x63, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x1e, 0xc4, 0x17, 0xc2, 0x07, 0xe0, 0x17, 0xa2, 0x1e, 0xc3, 0x1d, 0xa3, 0x14, 0x03, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x15, 0x22, 0x17, 0xc0, 0x17, 0x43, 0x02, 0x60, 0x00, 0x00, 0x00, 0x60, 0x14, 0x02, 0x17, 0xc2, 0x17, 0xc0, 0x15, 0x62, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x15, 0xa2, 0x07, 0xc2, 0x17, 0x23, 0x02, 0x80, 0x1d, 0x63, 0x07, 0xe0, 0x1f, 0x63, 0x01, 0xe0, 0x00, 0x02, 0x00, 0x00, 0x01, 0xc0, 0x1e, 0xc2, 0x17, 0xc0, 0x1f, 0x43, 0x01, 0xe0, 0x00, 0x60, 0x1e, 0xc3, 0x07, 0xc2, 0x17, 0xc2, 0x13, 0x02, 0x00, 0x60, 0x1d, 0x03, 0x07, 0xc0, 0x07, 0xc0, 0x1c, 0xc3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1d, 0xe3, 0x07, 0xc2, 0x17, 0x82, 0x14, 0x42, 0x17, 0x43, 0x07, 0xc0, 0x17, 0xc2, 0x17, 0x82, 0x1e, 0xa2, 0x1d, 0x83, 0x13, 0x42, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x00, 0x00, 0xa0, 0x24, 0xe3, 0x2e, 0xc5, 0x00, 0xa0, 0x01, 0xa0, 0x26, 0x65, 0x12, 0x42, 0x01, 0x40, 0x11, 0xe2, 0x01, 0xe0, 0x2e, 0xc5, 0x1c, 0x43, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0xa3, 0x1e, 0xc3, 0x17, 0x82, 0x17, 0xe2, 0x07, 0xc0, 0x07, 0xc2, 0x17, 0xa2, 0x1e, 0x43, 0x01, 0x80, 0x00, 0x00, 0x00, 0x60, 0x15, 0x22, 0x07, 0xe0, 0x17, 0x42, 0x02, 0x80, 0x00, 0x00, 0x00, 0x60, 0x13, 0xa2, 0x07, 0xc2, 0x07, 0xc0, 0x15, 0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x1d, 0xc2, 0x17, 0xa2, 0x1e, 0xe2, 0x02, 0x40, 0x1d, 0x63, 0x07, 0xe0, 0x1f, 0x44, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x1e, 0x43, 0x07, 0xe0, 0x1f, 0x62, 0x12, 0xa2, 0x00, 0xa0, 0x1e, 0xa3, 0x07, 0xc0, 0x17, 0xc2, 0x12, 0xe2, 0x00, 0xe0, 0x15, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x1c, 0xa2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1d, 0xa3, 0x17, 0xa2, 0x17, 0x82, 0x02, 0xe0, 0x1c, 0x63, 0x1e, 0xe3, 0x1f, 0x83, 0x07, 0xc2, 0x07, 0xc0, 0x17, 0xc2, 0x17, 0xa3, 0x1d, 0x63, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x11, 0xe2, 0x1a, 0xa3, 0x00, 0x00, 0x00, 0x60, 0x1a, 0x83, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1a, 0xa3, 0x11, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x40, 0x1b, 0x63, 0x15, 0x82, 0x17, 0x23, 0x17, 0xc2, 0x07, 0xe0, 0x1f, 0x63, 0x1c, 0x63, 0x00, 0x60, 0x00, 0x60, 0x15, 0x02, 0x07, 0xc2, 0x1f, 0x43, 0x02, 0x80, 0x00, 0x00, 0x00, 0x60, 0x13, 0x42, 0x17, 0xc2, 0x07, 0xe0, 0x15, 0x82, 0x00, 0x62, 0x00, 0x00, 0x00, 0x60, 0x16, 0x22, 0x07, 0xe0, 0x16, 0xe2, 0x02, 0x20, 0x15, 0x82, 0x07, 0xe0, 0x1f, 0x64, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x60, 0x01, 0x60, 0x16, 0x63, 0x07, 0xe0, 0x1f, 0x43, 0x01, 0xe0, 0x00, 0xa0, 0x16, 0xc3, 0x07, 0xe0, 0x17, 0xc0, 0x13, 0x00, 0x00, 0x60, 0x1c, 0xe3, 0x07, 0xc0, 0x07, 0xe0, 0x15, 0x03, 0x00, 0x60, 0x00, 0x00, 0x10, 0x02, 0x01, 0x00, 0x16, 0x42, 0x07, 0xe2, 0x1f, 0x63, 0x01, 0x60, 0x00, 0xa0, 0x01, 0x80, 0x1b, 0xa2, 0x15, 0xc2, 0x1f, 0x42, 0x17, 0xc2, 0x07, 0xe0, 0x1f, 0x63, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x62, 0x02, 0x00, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x01, 0x00, 0x14, 0xc2, 0x17, 0xc0, 0x17, 0x83, 0x1d, 0x64, 0x00, 0xa0, 0x00, 0x00, 0x1d, 0x02, 0x17, 0xc2, 0x17, 0x43, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x12, 0xc2, 0x17, 0xa2, 0x07, 0xe0, 0x16, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0x1e, 0xe2, 0x07, 0xc0, 0x16, 0x82, 0x01, 0xe0, 0x1d, 0x63, 0x07, 0xe0, 0x1f, 0x63, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x02, 0xa0, 0x17, 0x42, 0x07, 0xe0, 0x1e, 0x63, 0x00, 0xa0, 0x00, 0x60, 0x1e, 0xe3, 0x07, 0xe0, 0x17, 0xc2, 0x13, 0x22, 0x00, 0x60, 0x03, 0x02, 0x17, 0x83, 0x07, 0xe0, 0x1e, 0xa3, 0x01, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x02, 0x40, 0x17, 0x62, 0x07, 0xc0, 0x1d, 0xe2, 0x12, 0x62, 0x01, 0x62, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x01, 0x60, 0x1e, 0x02, 0x07, 0xe0, 0x17, 0xc2, 0x1c, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xc3, 0x17, 0x43, 0x16, 0x22, 0x1c, 0x02, 0x12, 0xa2, 0x13, 0x62, 0x1e, 0x63, 0x07, 0xe0, 0x17, 0x83, 0x13, 0x63, 0x00, 0x60, 0x00, 0x00, 0x15, 0x02, 0x07, 0xc0, 0x17, 0x82, 0x02, 0x80, 0x00, 0x02, 0x00, 0x00, 0x01, 0xa0, 0x1e, 0xa3, 0x07, 0xc0, 0x17, 0x22, 0x13, 0xe2, 0x02, 0x80, 0x1c, 0xc3, 0x17, 0x82, 0x17, 0xa2, 0x1d, 0xa3, 0x01, 0x20, 0x1d, 0x63, 0x07, 0xe0, 0x1f, 0x63, 0x02, 0xe0, 0x12, 0x82, 0x1c, 0x62, 0x16, 0xe3, 0x17, 0xc2, 0x1f, 0x43, 0x13, 0x62, 0x00, 0xa0, 0x02, 0x00, 0x17, 0x43, 0x07, 0xe0, 0x17, 0xa3, 0x14, 0x22, 0x00, 0xa0, 0x01, 0x00, 0x1d, 0xe4, 0x07, 0xe0, 0x17, 0xc0, 0x16, 0x22, 0x13, 0xa3, 0x13, 0xe2, 0x16, 0x83, 0x07, 0xe2, 0x17, 0x83, 0x12, 0xe2, 0x15, 0x23, 0x26, 0xe4, 0x1d, 0xa2, 0x13, 0xc3, 0x12, 0xa2, 0x13, 0xc2, 0x17, 0x22, 0x07, 0xe0, 0x1f, 0x03, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0xa3, 0x18, 0xe5, 0x19, 0x03, 0x20, 0xe4, 0x18, 0xe5, 0x18, 0xe5, 0x21, 0x04, 0x21, 0x44, 0x29, 0x25, 0x19, 0x04, 0x00, 0x60, 0x01, 0x20, 0x12, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x43, 0x1f, 0x63, 0x17, 0xa2, 0x1f, 0x62, 0x1f, 0x43, 0x17, 0x43, 0x17, 0x82, 0x17, 0x82, 0x15, 0x02, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xe3, 0x17, 0xc2, 0x1f, 0x42, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0x82, 0x1f, 0x03, 0x17, 0x82, 0x17, 0x83, 0x1f, 0x23, 0x17, 0x83, 0x17, 0xa3, 0x1e, 0xc3, 0x12, 0xa2, 0x00, 0xa0, 0x1d, 0x63, 0x07, 0xc0, 0x17, 0xc2, 0x17, 0x03, 0x1e, 0xe3, 0x1f, 0x63, 0x17, 0xa2, 0x1f, 0x23, 0x14, 0x02, 0x00, 0xe0, 0x1c, 0x03, 0x1e, 0xe3, 0x07, 0xa3, 0x07, 0xe0, 0x17, 0xc0, 0x1f, 0x23, 0x2c, 0x85, 0x00, 0xa0, 0x02, 0x40, 0x1e, 0xa3, 0x17, 0xa2, 0x17, 0xa2, 0x1f, 0x63, 0x17, 0x83, 0x17, 0xa2, 0x17, 0x43, 0x1c, 0x42, 0x00, 0xa0, 0x14, 0xc2, 0x17, 0x82, 0x17, 0xa2, 0x1f, 0x63, 0x1f, 0x24, 0x1f, 0x43, 0x17, 0xa2, 0x1f, 0x63, 0x13, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x10, 0x02, 0x21, 0x04, 0x29, 0x25, 0x29, 0x44, 0x29, 0x25, 0x31, 0x26, 0x29, 0x26, 0x29, 0x44, 0x29, 0x45, 0x29, 0x26, 0x29, 0x25, 0x00, 0x60, 0x12, 0xe2, 0x25, 0xc5, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x13, 0xa2, 0x1c, 0xa3, 0x1c, 0xe3, 0x1d, 0x24, 0x1d, 0x03, 0x1c, 0xa3, 0x13, 0x22, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xa3, 0x25, 0xa4, 0x2d, 0x45, 0x11, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x12, 0xa2, 0x1c, 0xc4, 0x1d, 0x84, 0x1d, 0x84, 0x1d, 0x04, 0x14, 0x03, 0x02, 0x00, 0x00, 0x60, 0x00, 0x60, 0x1c, 0x03, 0x1d, 0xc3, 0x1d, 0xc4, 0x25, 0x64, 0x25, 0x24, 0x1c, 0xe4, 0x14, 0x43, 0x12, 0x82, 0x00, 0xa0, 0x00, 0x60, 0x1a, 0xe3, 0x25, 0x65, 0x1d, 0xa4, 0x1d, 0xc3, 0x1d, 0xa3, 0x25, 0x84, 0x23, 0x64, 0x00, 0x60, 0x00, 0x60, 0x01, 0xa0, 0x1b, 0xe3, 0x25, 0x24, 0x25, 0x84, 0x1d, 0x83, 0x1c, 0xa3, 0x12, 0xa2, 0x00, 0xa0, 0x00, 0x60, 0x01, 0x60, 0x1b, 0xe2, 0x1c, 0xc3, 0x1d, 0x03, 0x1d, 0x24, 0x24, 0xe3, 0x1c, 0x63, 0x12, 0xa2, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x44, 0x29, 0x25, 0x29, 0x46, 0x29, 0x44, 0x29, 0x44, 0x29, 0x45, 0x29, 0x05, 0x00, 0x60, 0x1c, 0xc2, 0x1f, 0x63, 0x13, 0x82, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0xe0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0xe0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x10, 0x62, 0x21, 0x24, 0x29, 0x26, 0x29, 0x45, 0x29, 0x46, 0x29, 0x45, 0x29, 0x44, 0x21, 0x46, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x18, 0xe3, 0x00, 0xe0, 0x1e, 0x63, 0x17, 0xc0, 0x1d, 0xc3, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x29, 0x44, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x46, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x10, 0xa2, 0x02, 0x00, 0x1f, 0x63, 0x07, 0xc0, 0x1f, 0x43, 0x12, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xa3, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xa3, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x13, 0x62, 0x03, 0x60, 0x03, 0x00, 0x02, 0xa0, 0x01, 0x80, 0x00, 0x60, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x62, 0x10, 0x63, 0x10, 0x63, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x45, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xa3, 0x18, 0xa3, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x10, 0x62, 0x02, 0xa0, 0x1f, 0x63, 0x07, 0xe0, 0x17, 0xa2, 0x1c, 0xc3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x10, 0x62, 0x00, 0x60, 0x01, 0x40, 0x1d, 0x43, 0x1f, 0x43, 0x1f, 0x83, 0x1f, 0x83, 0x1e, 0xa4, 0x02, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x02, 0x40, 0x1f, 0x63, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0x43, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x10, 0x62, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x03, 0x1f, 0x83, 0x07, 0xe0, 0x07, 0xc2, 0x1f, 0x23, 0x13, 0xe2, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa2, 0x29, 0x24, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0xe0, 0x1e, 0xc3, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x63, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x21, 0x04, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0x62, 0x00, 0x00, 0x00, 0xe0, 0x14, 0xa2, 0x1f, 0x82, 0x17, 0xc0, 0x07, 0xc0, 0x17, 0x63, 0x1c, 0xa3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x60, 0x21, 0x03, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0x60, 0x15, 0x23, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa2, 0x15, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x04, 0x18, 0xe4, 0x18, 0x63, 0x00, 0x00, 0x00, 0xa0, 0x13, 0xe2, 0x1f, 0x23, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0x83, 0x1d, 0xa3, 0x01, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x13, 0x42, 0x17, 0x62, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0x63, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x20, 0xe5, 0x18, 0xe5, 0x10, 0xa2, 0x00, 0x00, 0x00, 0xa0, 0x13, 0x82, 0x17, 0x03, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc0, 0x1e, 0x83, 0x02, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x21, 0x04, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x01, 0x80, 0x1e, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x43, 0x12, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x03, 0x19, 0x03, 0x19, 0x03, 0x19, 0x03, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x60, 0x12, 0xe2, 0x16, 0x83, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xc0, 0x1f, 0x23, 0x13, 0x62, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x10, 0x62, 0x00, 0x00, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x1d, 0xa3, 0x07, 0xc0, 0x07, 0xe0, 0x17, 0xa2, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x20, 0xe4, 0x19, 0x03, 0x21, 0x04, 0x20, 0xe4, 0x18, 0xe4, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x60, 0x02, 0x40, 0x1e, 0x23, 0x17, 0x82, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x63, 0x1c, 0xc3, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x29, 0x24, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x21, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x14, 0x02, 0x17, 0xc2, 0x07, 0xe0, 0x17, 0xc2, 0x15, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xa3, 0x10, 0x62, 0x00, 0x00, 0x01, 0x80, 0x1d, 0x83, 0x17, 0xa2, 0x07, 0xc0, 0x07, 0xe0, 0x17, 0xa2, 0x1d, 0xe3, 0x12, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x25, 0x31, 0x25, 0x31, 0x26, 0x29, 0x26, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x21, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x17, 0x43, 0x07, 0xe2, 0x07, 0xe0, 0x16, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x10, 0x62, 0x00, 0x00, 0x00, 0xe0, 0x14, 0x42, 0x1f, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa2, 0x1f, 0x03, 0x13, 0xa2, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x19, 0x23, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x44, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x04, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x16, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0xa3, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x10, 0xa2, 0x00, 0x00, 0x00, 0x60, 0x13, 0x02, 0x1f, 0x03, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0xa2, 0x1d, 0xa3, 0x01, 0xe2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x18, 0xa3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x46, 0x29, 0x25, 0x31, 0x05, 0x31, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x45, 0x29, 0x25, 0x29, 0x45, 0x29, 0x25, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x1e, 0xa3, 0x07, 0xe0, 0x07, 0xe0, 0x16, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x19, 0x03, 0x19, 0x03, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x60, 0x12, 0x22, 0x1e, 0x03, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa2, 0x1e, 0xe3, 0x13, 0xc2, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x18, 0xa3, 0x21, 0x05, 0x29, 0x46, 0x29, 0x45, 0x29, 0x24, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x21, 0x04, 0x21, 0x04, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1e, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x16, 0xc3, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x21, 0x04, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x20, 0xe3, 0x20, 0xe4, 0x20, 0xe4, 0x18, 0xa3, 0x10, 0x60, 0x00, 0x60, 0x01, 0x20, 0x1c, 0xc3, 0x1f, 0x43, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc2, 0x17, 0x63, 0x1d, 0xa2, 0x12, 0x42, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x18, 0xa3, 0x21, 0x04, 0x21, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x18, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1e, 0x83, 0x07, 0xe0, 0x07, 0xe0, 0x16, 0xe3, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x03, 0x19, 0x03, 0x20, 0xe4, 0x28, 0xe4, 0x18, 0xe3, 0x10, 0x62, 0x00, 0x00, 0x00, 0xa0, 0x13, 0x62, 0x16, 0xa3, 0x17, 0xa2, 0x07, 0xc0, 0x07, 0xe0, 0x17, 0xa2, 0x1e, 0xe2, 0x14, 0x62, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x29, 0x25, 0x29, 0x45, 0x29, 0x45, 0x29, 0x25, 0x18, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x1e, 0xa3, 0x07, 0xe0, 0x07, 0xe0, 0x16, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x03, 0x19, 0x04, 0x20, 0xe4, 0x20, 0xe4, 0x19, 0x03, 0x18, 0xe3, 0x18, 0x63, 0x00, 0x60, 0x00, 0x60, 0x02, 0x00, 0x1d, 0x63, 0x17, 0x62, 0x07, 0xc0, 0x17, 0xc0, 0x07, 0xe2, 0x17, 0xa2, 0x1e, 0x02, 0x13, 0x02, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xa3, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1e, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x1e, 0xa3, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe4, 0x18, 0xe4, 0x18, 0xe4, 0x20, 0xe4, 0x20, 0xe3, 0x20, 0xe4, 0x18, 0xa3, 0x10, 0x62, 0x00, 0x00, 0x00, 0xe0, 0x13, 0xc2, 0x1e, 0xc3, 0x17, 0xc0, 0x07, 0xc0, 0x07, 0xc2, 0x17, 0xc2, 0x1f, 0x42, 0x1d, 0x63, 0x02, 0x80, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x17, 0x22, 0x07, 0xe2, 0x07, 0xe0, 0x1e, 0x83, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x21, 0x04, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x03, 0x18, 0xe3, 0x18, 0xe3, 0x20, 0xe4, 0x20, 0xe4, 0x18, 0xe3, 0x20, 0xe4, 0x18, 0xe3, 0x18, 0x62, 0x00, 0x02, 0x00, 0x60, 0x02, 0x00, 0x1d, 0x82, 0x17, 0x62, 0x07, 0xe2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc2, 0x1f, 0x23, 0x14, 0xc2, 0x01, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x42, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xc2, 0x16, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x03, 0x18, 0xa3, 0x10, 0x02, 0x00, 0x60, 0x00, 0xa0, 0x13, 0x42, 0x1e, 0x83, 0x17, 0xa2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa3, 0x1e, 0xe3, 0x1c, 0xa3, 0x01, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1d, 0xe3, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x82, 0x14, 0xc2, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x20, 0xe3, 0x20, 0xe3, 0x18, 0x63, 0x00, 0x02, 0x00, 0x60, 0x01, 0x40, 0x1c, 0xa3, 0x1f, 0x23, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc2, 0x1f, 0x03, 0x1c, 0xc3, 0x02, 0x40, 0x00, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0xc2, 0x17, 0x82, 0x07, 0xc0, 0x07, 0xe0, 0x1f, 0x43, 0x12, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x20, 0xe4, 0x20, 0xe3, 0x20, 0xe3, 0x28, 0xe4, 0x18, 0xa3, 0x10, 0x62, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x40, 0x15, 0x42, 0x1f, 0x23, 0x17, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xc2, 0x1f, 0x43, 0x1d, 0xc3, 0x13, 0xa2, 0x01, 0xa0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x12, 0xc2, 0x1f, 0x03, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xc0, 0x15, 0xe2, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x19, 0x03, 0x19, 0x03, 0x19, 0x03, 0x19, 0x03, 0x20, 0xe3, 0x20, 0xe4, 0x18, 0xa3, 0x00, 0x60, 0x00, 0x60, 0x00, 0xa0, 0x12, 0xc0, 0x1d, 0xc3, 0x1f, 0x63, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0xa2, 0x1e, 0xc3, 0x1d, 0x43, 0x13, 0x62, 0x01, 0xe0, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x80, 0x14, 0x23, 0x1f, 0x03, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x1f, 0x02, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x21, 0x04, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe4, 0x19, 0x03, 0x19, 0x03, 0x19, 0x03, 0x18, 0xe3, 0x20, 0xe3, 0x19, 0x04, 0x18, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x13, 0x42, 0x1d, 0xe3, 0x1f, 0x63, 0x17, 0xc2, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe0, 0x07, 0xc0, 0x17, 0x82, 0x16, 0xe3, 0x1d, 0xe4, 0x1c, 0x83, 0x13, 0x42, 0x12, 0x62, 0x12, 0x20, 0x02, 0x00, 0x01, 0xe2, 0x11, 0xe2, 0x12, 0xa2, 0x14, 0x62, 0x1e, 0x83, 0x17, 0x82, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x17, 0x83, 0x1c, 0x22, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x18, 0xe3, 0x20, 0xe4, 0x20, 0xe5, 0x20, 0xe4, 0x19, 0x03, 0x18, 0xe3, 0x18, 0xa3, 0x10, 0xa2, 0x10, 0x62, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x13, 0x42, 0x1d, 0xc2, 0x1f, 0x03, 0x17, 0x82, 0x17, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe2, 0x07, 0xc2, 0x07, 0xc2, 0x17, 0xa2, 0x17, 0xc2, 0x17, 0x82, 0x17, 0x42, 0x17, 0x02, 0x17, 0x22, 0x17, 0x42, 0x17, 0xa2, 0x17, 0xc2, 0x07, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc2, 0x17, 0x63, 0x1c, 0xa3, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x18, 0xa3, 0x18, 0xa3, 0x18, 0xa3, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x62, 0x10, 0x02, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x12, 0x42, 0x14, 0x82, 0x1e, 0x63, 0x1f, 0x43, 0x17, 0xc2, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xe0, 0x17, 0xa2, 0x1e, 0xc4, 0x13, 0xe3, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x01, 0x00, 0x12, 0xc2, 0x14, 0xc2, 0x1e, 0xa3, 0x1f, 0x42, 0x17, 0x82, 0x17, 0xa2, 0x17, 0xc2, 0x07, 0xc2, 0x07, 0xc2, 0x07, 0xc0, 0x07, 0xc0, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0xa2, 0x17, 0x42, 0x1d, 0xa3, 0x12, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xa0, 0x01, 0xe0, 0x1b, 0x43, 0x1c, 0x63, 0x15, 0x43, 0x15, 0xa2, 0x15, 0xc2, 0x15, 0xc2, 0x15, 0xa2, 0x15, 0x62, 0x1d, 0x03, 0x1c, 0x63, 0x1b, 0xa2, 0x01, 0xe0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                              DISPLAY VARIABLES
// ------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------
/* try to ensure space for developments by leaving a space of 20 pages between each page group */
// ----------------------------------------------------------------------------------------------

bool update_ui_complete=false;
bool update_ui=true;
bool ui_cleared=false;
bool interaction_updateui=true; // performance and efficiency: make true when content should be updated. can be true for any reason.
bool wait_1S_to_update_ui=false;
bool ui_track_planet_period=false;

signed int menu_page=0;
int previous_menu_page;
int menu_column_selection=0;
int previous_menu_column_selection;

bool make_i2c_request=false;
int unixtime_i2C_reponse;

char input_data[1024];
char tmp_input_data[1024];
char allow_input_data=false;
signed int enter_digits_key=-1;
int astroclock_key=0;
int max_astroclock_key=10;
int meteor_index_key=0;

// ----------------------------------------------------
// HOME
// ----------------------------------------------------
static int page_home                            =0;
// ----------------------------------------------------
// INPUT DATA
// ----------------------------------------------------
static int page_input_data                      =20;
// ----------------------------------------------------
// MAIN MENU
// ----------------------------------------------------
static int page_main_menu                       =40;
/* MATRIX LOGIC */
static int page_matrix_logic_main               =60;
static int page_matrix_logic_select_setup       =61;
static int page_matrix_logic_setup_function     =62;
// ----------------------------------------------------
// MATRIX SWITCHING OVERVIEW 
// ----------------------------------------------------
static int page_overview_matrix_switching       =63;
// ----------------------------------------------------
// FILE
// ----------------------------------------------------
static int page_file_main                       =80;
static int page_file_save_matrix                =81;
static int page_file_load_matrix                =83;
static int page_file_delete_matrix              =84;
static int page_save_system_config_indicator    =85;
static int page_save_matrix_file_indicator      =86;
static int page_load_matrix_file_indicator      =87;
static int page_delete_matrix_file_indicator    =88;
static int page_restore_default_matrix_indicator=89;
// ----------------------------------------------------
// GPS
// ----------------------------------------------------
static int page_gps_main                        =100;
static int page_gps_view_gngga                  =101;
static int page_gps_view_gnrmc                  =102;
static int page_gps_view_gpatt                  =103;
static int page_gps_view_satio                  =104;
// ----------------------------------------------------
// SERIAL
// ----------------------------------------------------
static int page_serial_main                     =120;
// ----------------------------------------------------
// SYSTEM
// ----------------------------------------------------
static int page_system_main                     =140;
// ----------------------------------------------------
// UNIVERSE
// ----------------------------------------------------
static int page_universe_main                   =160;
static int page_universe_view_sun               =161;
static int page_universe_view_moon              =162;
static int page_universe_view_mercury           =163;
static int page_universe_view_venus             =164;
static int page_universe_view_mars              =165;
static int page_universe_view_jupiter           =166;
static int page_universe_view_saturn            =167;
static int page_universe_view_uranus            =168;
static int page_universe_view_neptune           =169;
// ----------------------------------------------------
// DISPLAY
// ----------------------------------------------------
static int page_display_main                      =180;
// ----------------------------------------------------
// CD74HC4067
// ----------------------------------------------------
static int page_CD74HC4067_main                   =200;
// ----------------------------------------------------
// TCA9548A
// ----------------------------------------------------
static int page_TCA9548A_main                     =250;
// ----------------------------------------------------
// TIME & DATE
// ----------------------------------------------------
static int page_timeanddate_main                  =300;
// ----------------------------------------------------
// ATTITUDE
// ----------------------------------------------------
static int page_attitude                          =400;
// ----------------------------------------------------
// MAGNETIC FIELD
// ----------------------------------------------------
static int page_view_magnetic_field               =420;
// ----------------------------------------------------
// INDICATOR PAGE
// ----------------------------------------------------
static int page_indicators                        =500;

// ----------------------------------------------------
// COMPACT VERTICAL UI SPACING
// ----------------------------------------------------
static int ui_content_0=16;
static int ui_content_1=26;
static int ui_content_2=36;
static int ui_content_3=46;
static int ui_content_4=56;
static int ui_content_5=66;
static int ui_content_6=76;
static int ui_content_7=86;
static int ui_content_8=96;
static int ui_content_9=106;
static int ui_content_10=116;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      MENU MAIN
// ------------------------------------------------------------------------------------------------------------------------------

const int max_main_menu_items=16;
const char *menuMainItems[max_main_menu_items] =
{
    "  MATRIX         ", // 0
    "  VIEW MATRIX    ", // 1
    "  FILE           ", // 2
    "  GPS            ", // 3
    "  SERIAL         ", // 4
    "  SYSTEM         ", // 5
    "  UNIVERSE       ", // 6
    "  DISPLAY        ", // 7
    "  CD74HC4067     ", // 8
    "  TCA9548A       ", // 9
    "  DATETIME       ", // 10
    "  HUD            ", // 11
    "  VIEW MAG FIELD ", // 12
    "  INDICATORS     ", // 13
    "  METEORS        ", // 14
    "  VOLCANOS       ", // 15
};
LcdGfxMenu menuMain( menuMainItems, max_main_menu_items, {{2, 15}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                      MENU MATRIX SWITCH SELECT
// ------------------------------------------------------------------------------------------------------------------------------

const int max_matrix_switch_items=20;
const char *menuMatrixSwitchSelectItems[max_matrix_switch_items] =
{
    "M0  ",
    "M1  ",
    "M2  ",
    "M3  ",
    "M4  ",
    "M5  ",
    "M6  ",
    "M7  ",
    "M8  ",
    "M9  ",
    "M10 ",
    "M11 ",
    "M12 ",
    "M13 ",
    "M14 ",
    "M15 ",
    "M16 ",
    "M17 ",
    "M18 ",
    "M19 ",
};
LcdGfxMenu menuMatrixSwitchSelect( menuMatrixSwitchSelectItems, max_matrix_switch_items, {{0, 14}, {39, 37}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                             MENU MATRIX SWITCH FUNCTION SELECT
// ------------------------------------------------------------------------------------------------------------------------------

const int max_function_menu_items=10;
const char *menuMatrixFunctionSelectItems[max_function_menu_items] =
{
    "F0 ",
    "F1 ",
    "F2 ",
    "F3 ",
    "F4 ",
    "F5 ",
    "F6 ",
    "F7 ",
    "F8 ",
    "F9 ",
};
LcdGfxMenu menuMatrixFunctionSelect( menuMatrixFunctionSelectItems, max_function_menu_items, {{95, 14}, {128, 37}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                               MENU MATRIX SWITCH CONFIGURATION
// ------------------------------------------------------------------------------------------------------------------------------

const int max_matrix_function_configure_items=5;
const char *menuMatrixConfigureFunctionItems[max_matrix_function_configure_items] =
{
    "SELECT FUNCTION",
    "ENTER  VALUE X",
    "ENTER  VALUE Y",
    "ENTER  VALUE Z",
    "CHANGE EXPRESSION",
};
LcdGfxMenu menuMatrixConfigureFunction( menuMatrixConfigureFunctionItems, max_matrix_function_configure_items, {{2, 86}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      MENU FILE
// ------------------------------------------------------------------------------------------------------------------------------

const int max_file_items=6;
const char *menuFileItems[max_file_items] =
{
    "NEW     MATRIX",
    "SAVE    MATRIX",
    "LOAD    MATRIX",
    "DELETE  MATRIX",
    "SAVE    SYSTEM",
    "RESTORE DEFAULTS",
};
LcdGfxMenu menuFile( menuFileItems, max_file_items, {{2, 62}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                MENU FILE NAMES
// ------------------------------------------------------------------------------------------------------------------------------

const int max_filepath_items=20;
const char *menuMatrixFilepathItems[max_filepath_items];
LcdGfxMenu menuMatrixFilepath( menuMatrixFilepathItems, max_filepath_items, {{2, 30}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                       MENU GPS
// ------------------------------------------------------------------------------------------------------------------------------

const int max_gps_items=9;
const char *menuGPSItems[max_gps_items];
LcdGfxMenu menuGPS( menuGPSItems, max_gps_items, {{2, 46}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    MENU SERIAL
// ------------------------------------------------------------------------------------------------------------------------------

const int max_serial_items=16;
const char *menuSerialItems[max_serial_items];
LcdGfxMenu menuSerial( menuSerialItems, max_serial_items, {{2, 14}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                  MENU UNIVERSE
// ------------------------------------------------------------------------------------------------------------------------------

const int max_universe_items=18;
const char *menuUniverseItems[max_universe_items];
LcdGfxMenu menuUniverse( menuUniverseItems, max_universe_items, {{2, 14}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   MENU DISPLAY 
// ------------------------------------------------------------------------------------------------------------------------------

const int max_display_items=9;
const char *menuDisplayItems[max_display_items];
LcdGfxMenu menuDisplay( menuDisplayItems, max_display_items, {{2, 37}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    MENU SYSTEM
// ------------------------------------------------------------------------------------------------------------------------------

const int max_system_items=6;
const char *menuSystemItems[max_system_items];
LcdGfxMenu menuSystem( menuSystemItems, max_system_items, {{2, 76}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                MENU CD74HC4067
// ------------------------------------------------------------------------------------------------------------------------------

const int max_CD74HC4067_items=17;
const char *menuCD74HC4067Items[max_CD74HC4067_items];
LcdGfxMenu menuCD74HC4067( menuCD74HC4067Items, max_CD74HC4067_items, {{2, 14}, {125, 37}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                  MENU TCA9548A
// ------------------------------------------------------------------------------------------------------------------------------

const int max_TCA9548A_items=9;
const char *menuTCA9548AItems[max_TCA9548A_items];
LcdGfxMenu menuTCA9548A( menuTCA9548AItems, max_TCA9548A_items, {{2, 14}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                               MENU TIME & DATE
// ------------------------------------------------------------------------------------------------------------------------------

const int max_timeanddate_items=2;
const char *menuTimeAndDateItems[max_timeanddate_items];
LcdGfxMenu menuTimeAndDate( menuTimeAndDateItems, max_timeanddate_items, {{2, 92}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                               MENU TIME & DATE
// ------------------------------------------------------------------------------------------------------------------------------

const int max_indicators_items=20;
const char *menuIndicatorsItems[max_indicators_items];
LcdGfxMenu menuIndicators( menuIndicatorsItems, max_indicators_items, {{2, 14}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          DHT11
// ------------------------------------------------------------------------------------------------------------------------------

/*
Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14. Pin 15 can work but DHT must be disconnected during program upload.
Uncomment whatever type you're using!
*/
#define DHTTYPE DHT11 // DHT11
// #define DHTTYPE DHT22 // DHT 22  (AM2302), AM2321
// #define DHTTYPE DHT21 // DHT 21 (AM2301)
DHT dht(CD74HC4067_SIG, DHTTYPE); // plug DHT11 into CD74HC406 analog/digital multiplexer signal pin

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          TASKS
// ------------------------------------------------------------------------------------------------------------------------------

/* ESP32 has 2 cores. initiate task handles */
TaskHandle_t GPSTask;
TaskHandle_t UpdateUITask;
TaskHandle_t TrackPlanetsTask;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                            RTC
// ------------------------------------------------------------------------------------------------------------------------------

RTC_DS3231 rtc;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                               SIDEREAL PLANETS
// ------------------------------------------------------------------------------------------------------------------------------

SiderealPlanets myAstro;    // for calculating azimuth and altitude
SiderealObjects myAstroObj; // for getting right ascension and declination of objects from star table

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                         SDCARD
// ------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------
// SDCARD VSPI pins on esp32
// ----------------------------------------------------------------
int SD_SCLK=18;  // default esp32 VSPI
int SD_MISO=19;  // default esp32 VSPI
int SD_MOSI=23;  // default esp32 VSPI
int SD_CS  =5;   // default esp32 VSPI

#define SD_FAT_TYPE 2
// ----------------------------------------------------------------
// SDCARD_SS_PIN is defined for the built-in SD on some boards.
// ----------------------------------------------------------------
const uint8_t SD_CS_PIN=5;
// ----------------------------------------------------------------
// Try max SPI clock for an SD. Reduce SPI_CLOCK if errors occur.
// ----------------------------------------------------------------
#define SPI_CLOCK SD_SCK_MHZ(4)

#define SD_CONFIG SdSpiConfig(SD_CS_PIN, SHARED_SPI, SPI_CLOCK)

SdExFat sd;
ExFile exfile;

bool sdcard_initialized=false;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                  SPI SWITCHING
// ------------------------------------------------------------------------------------------------------------------------------

void beginSDCARD() {
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
 }

 void endSDCARD() {
  sd.end();
  endSPIDevice(SD_CS);
 }

 void beginSSD1351() {
  beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS); 
  display.begin();
 }

 void endSSD1351() {
  display.end();
  endSPIDevice(SSD1351_CS);
 }

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          CHARS
// ------------------------------------------------------------------------------------------------------------------------------

#define ETX 0x03  // end of text character useful for parsing serial data

char A_char[2]="A";
char D_char[2]="D";
char N_char[2]="N";
char E_char[2]="E";
char S_char[2]="S";
char V_char[2]="V";
char W_char[2]="W";

char digit_0[2]="0";
char digit_1[2]="1";
char digit_2[2]="2";
char digit_3[2]="3";
char digit_4[2]="4";
char digit_5[2]="5";
char digit_6[2]="6";
char digit_7[2]="7";
char digit_8[2]="8";
char digit_9[2]="9";
char hyphen_char[2]="-";
char period_char[2]=".";
  
char pad_digits_new[56];     // a placeholder for digits preappended with zero's.
char pad_current_digits[56]; // a placeholder for digits to be preappended with zero's.

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   DATA: SYSTEM
// ------------------------------------------------------------------------------------------------------------------------------

struct systemStruct {

  // -----------------------------------------------------------------------------------------------------------------------
  // debug
  // -----------------------------------------------------------------------------------------------------------------------
  bool debug=false;   // print verbose information over serial
  bool t_bench=false; // prints bennchmark information for tuning
  bool serial_command=false;  // allows commands to be received over serial (strongly recommend firmware default false unless you know what you are doing)

  // -----------------------------------------------------------------------------------------------------------------------
  // display
  // -----------------------------------------------------------------------------------------------------------------------

  bool DISPLAY_ENABLED=true; // enable/disable headless mode (currently in firmware only).

  // -----------------------------------------------------------------------------------------------------------------------
  // overload
  // -----------------------------------------------------------------------------------------------------------------------
  int loops_a_second=0;
  int total_loops_a_second=0;
  float load_percentage=0;
  // are loop times within specified loop time max. if the system is programmed with any specifically required timings then
  // overload can help the user ascertain if user defined timings are being met (through observation during and after matrix setup),
  // if the system is overloading according to user defined overload time, then user should reconsider how far user is trying to push
  // the system. overload does not reflect any utilization of hardware, overload is to observe the system is operating withing a
  // required range of timing, where and if timing is required to be below a certain threshold where otherwise events may and or
  // will be missed. if GPS and no timing is of concern then overload max can be set high and ignored if overload is true. 
  bool overload=false;         
  int i_overload=0;            // count overloads
  int overload_max=100000;     // main loop overload time in micros (default 100 milliseconds for WTGPS300P output)
  int index_overload_times=10; // index of currently used time
  int max_overload_times=11;   // max overload menu values
  int overload_times[12]={
    1,
    2,
    3,
    4,
    5,
    10,
    50,
    100,
    1000,
    10000,
    100000,
    1000000,
  };
  char char_overload_times[12][56]={
    "OLOAD uS    1",
    "OLOAD uS    2",
    "OLOAD uS    3",
    "OLOAD uS    4",
    "OLOAD uS    5",
    "OLOAD uS    10",
    "OLOAD uS    50",
    "OLOAD uS    100",
    "OLOAD ms    1",
    "OLOAD ms    10",
    "OLOAD ms    100",
    "OLOAD S     1",
  };

  // -----------------------------------------------------------------------------------------------------------------------
  // home page feature
  // -----------------------------------------------------------------------------------------------------------------------
  int index_home_page_feature=1;
  int max_home_page_feature_index=1;
  char char_home_page_feature[2][56]={
    "FEATURE  DATETIME",
    "FEATURE  ASTRO.CLK"
  };

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable ui features
  // -----------------------------------------------------------------------------------------------------------------------
  bool astronarium=true;

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable system functions
  // -----------------------------------------------------------------------------------------------------------------------
  bool matrix_enabled=true;        // enables/disables matrix switching
  bool matrix_run_on_startup=true; // enables/disable matrix switch on startup as specified by system configuration file
  bool matrix_io_enabled=true;     // may be false by default but is default true for now.
  bool wt901_enabled=true;         // may be false by default but is default true for now.

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable GPS processing
  // -----------------------------------------------------------------------------------------------------------------------
  bool satio_enabled=true; // enables/disables further processing of GPS data (coordinate degrees, etc.)
  bool gngga_enabled=true; // enables/disables processing GNGGA sentence data
  bool gnrmc_enabled=true; // enables/disables processing GNRMC sentence data
  bool gpatt_enabled=true; // enables/disables processing GPATT sentence data

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable planet and object tracking
  // -----------------------------------------------------------------------------------------------------------------------
  bool sidereal_track_sun=true;      // enables/disables celestial body tracking
  bool sidereal_track_moon=true;     // enables/disables celestial body tracking
  bool sidereal_track_mercury=true;  // enables/disables celestial body tracking
  bool sidereal_track_venus=true;    // enables/disables celestial body tracking
  bool sidereal_track_mars=true;     // enables/disables celestial body tracking
  bool sidereal_track_jupiter=true;  // enables/disables celestial body tracking
  bool sidereal_track_saturn=true;   // enables/disables celestial body tracking
  bool sidereal_track_uranus=true;   // enables/disables celestial body tracking
  bool sidereal_track_neptune=true;  // enables/disables celestial body tracking

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable serial output
  // -----------------------------------------------------------------------------------------------------------------------
  bool output_satio_enabled=false;   // enables/disables output SatIO sentence over serial
  bool output_gngga_enabled=false;   // enables/disables output GPS sentence over serial
  bool output_gnrmc_enabled=false;   // enables/disables output GPS sentence over serial
  bool output_gpatt_enabled=false;   // enables/disables output GPS sentence over serial
  bool output_matrix_enabled=false;  // enables/disables output matrix switch active/inactive states sentence over serial
  bool output_sensors_enabled=false; // enables/disables output of sensory data sentence over serial
  bool output_sun_enabled=false;     // enables/disables output sentence over serial
  bool output_moon_enabled=false;    // enables/disables output sentence over serial
  bool output_mercury_enabled=false; // enables/disables output sentence over serial
  bool output_venus_enabled=false;   // enables/disables output sentence over serial
  bool output_mars_enabled=false;    // enables/disables output sentence over serial
  bool output_jupiter_enabled=false; // enables/disables output sentence over serial
  bool output_saturn_enabled=false;  // enables/disables output sentence over serial
  bool output_uranus_enabled=false;  // enables/disables output sentence over serial
  bool output_neptune_enabled=false; // enables/disables output sentence over serial
  bool output_meteors_enabled=false; // enables/disables output sentence over serial

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable CD74HC4067 channel
  // -----------------------------------------------------------------------------------------------------------------------
  bool CD74HC4067_channel_enabled[16]={
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false
  };
  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable CD74HC4067. more efficient if all channels are not used.
  // -----------------------------------------------------------------------------------------------------------------------
  bool CD74HC4067_enabled=false;

  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable TCA9548A channel
  // -----------------------------------------------------------------------------------------------------------------------
  bool TCA9548A_channel_enabled[8]={
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false
  };
  // -----------------------------------------------------------------------------------------------------------------------
  // enable/disable TCA9548A. more efficient if all channels are not used.
  // -----------------------------------------------------------------------------------------------------------------------
  bool TCA9548A_enabled=false;

  // -----------------------------------------------------------------------------------------------------------------------
  // oled protection
  // -----------------------------------------------------------------------------------------------------------------------
  bool display_auto_off=true;                          // recommended
  int index_display_autooff_times=5;                   // index of currently used time 
  int max_display_autooff_times=5;                     // max available times
  int display_autooff_times[6]={3, 5, 10, 15, 30, 60}; // available times
  char char_display_autooff_times[6][56]={
    "AUTO-OFF  3",
    "AUTO-OFF  5",
    "AUTO-OFF  10",
    "AUTO-OFF  15",
    "AUTO-OFF  30",
    "AUTO-OFF  60",
  };
  int display_timeout=display_autooff_times[index_display_autooff_times];
  
  // -----------------------------------------------------------------------------------------------------------------------
  // oled personalization: colors
  // -----------------------------------------------------------------------------------------------------------------------

  // ----------------------------------------------------------------
  // ensure rgb16 values can be equally divided by 8 unless 255 or 0
  // ----------------------------------------------------------------
  int max_color_index=6;      // max color values
  int display_color[7]={
    RGB_COLOR16(255,0,0),     // red
    RGB_COLOR16(255,255,0),   // yellow
    RGB_COLOR16(0,255,0),     // green
    RGB_COLOR16(0,0,255),     // blue
    RGB_COLOR16(0,255,255),   // light blue
    RGB_COLOR16(255,0,255),   // purple
    RGB_COLOR16(255,255,255), // white
  };

  int display_low_color[7]={
    RGB_COLOR16(128,0,0),     // red
    RGB_COLOR16(128,128,0),   // yellow
    RGB_COLOR16(0,128,0),     // green
    RGB_COLOR16(0,0,128),     // blue
    RGB_COLOR16(0,128,128),   // light blue
    RGB_COLOR16(128,0,128),   // purple
    RGB_COLOR16(128,128,128), // white
  };

  // ----------------------------------------------------------------
  // border color
  // ----------------------------------------------------------------
  char char_display_border_color[7][56]={
    "BORDER    RED",
    "BORDER    YELLOW",
    "BORDER    GREEN",
    "BORDER    BLUE",
    "BORDER    L.BLUE",
    "BORDER    PURPLE",
    "BORDER    WHITE",
  };
  int index_display_border_color=3;
  int color_border=display_color[index_display_border_color];
  int low_color_border=display_low_color[index_display_border_color];

  // ----------------------------------------------------------------
  // color is used to assist with emphasis to importance and clarity.
  // custumizable. 
  // ----------------------------------------------------------------

  // ----------------------------------------------------------------
  // content color
  // ----------------------------------------------------------------
  char char_display_content_color[7][56]={
    "CONTENT   RED",
    "CONTENT   YELLOW",
    "CONTENT   GREEN",
    "CONTENT   BLUE",
    "CONTENT   L.BLUE",
    "CONTENT   PURPLE",
    "CONTENT   WHITE",
  };
  int index_display_content_color=4;
  int color_content=display_color[index_display_content_color];
  int low_color_content=display_low_color[index_display_content_color];

  // ----------------------------------------------------------------
  // menu border color
  // ----------------------------------------------------------------
  char char_display_menu_border_color[7][56]={
    "MENUB     RED",
    "MENUB     YELLOW",
    "MENUB     GREEN",
    "MENUB     BLUE",
    "MENUB     L.BLUE",
    "MENUB     PURPLE",
    "MENUB     WHITE",
  };
  int index_display_menu_border_color=2;
  int color_menu_border=display_color[index_display_menu_border_color];
  int low_color_menu_border=display_low_color[index_display_menu_border_color];

  // ----------------------------------------------------------------
  // menu content color
  // ----------------------------------------------------------------
  char char_display_menu_content_color[7][56]={
    "MENUC     RED",
    "MENUC     YELLOW",
    "MENUC     GREEN",
    "MENUC     BLUE",
    "MENUC     L.BLUE",
    "MENUC     PURPLE",
    "MENUC     WHITE",
  };
  int index_display_menu_content_color=2;
  int color_menu_content=display_color[index_display_menu_content_color];
  int low_color_menu_content=display_low_color[index_display_menu_content_color];

  // ----------------------------------------------------------------
  // title color
  // ----------------------------------------------------------------
  char char_display_title_color[7][56]={
    "TITLE     RED",
    "TITLE     YELLOW",
    "TITLE     GREEN",
    "TITLE     BLUE",
    "TITLE     L.BLUE",
    "TITLE     PURPLE",
    "TITLE     WHITE",
  };
  int index_display_title_color=2;
  int color_title=display_color[index_display_title_color];
  int low_color_title=display_low_color[index_display_title_color];
  
  // ----------------------------------------------------------------
  // sub-title color
  // ----------------------------------------------------------------
  char char_display_subtitle_color[7][56]={
    "SUBTITLE  RED",
    "SUBTITLE  YELLOW",
    "SUBTITLE  GREEN",
    "SUBTITLE  BLUE",
    "SUBTITLE  L.BLUE",
    "SUBTITLE  PURPLE",
    "SUBTITLE  WHITE",
  };
  int index_display_color_subtitle=2;
  int color_subtitle=display_color[index_display_color_subtitle];
  int low_color_subtitle=display_low_color[index_display_color_subtitle];

  // ----------------------------------------------------------------
  // indicator colors
  // ----------------------------------------------------------------
  char char_indicator_colors_m0[8][56]={
      "M.SWITCH 0 BLACK",
      "M.SWITCH 0 RED",
      "M.SWITCH 0 YELLOW",
      "M.SWITCH 0 GREEN",
      "M.SWITCH 0 BLUE",
      "M.SWITCH 0 CYAN",
      "M.SWITCH 0 PURPLE",
      "M.SWITCH 0 WHITE"
  };
  char char_indicator_colors_m1[8][56]={
      "M.SWITCH 1 BLACK",
      "M.SWITCH 1 RED",
      "M.SWITCH 1 YELLOW",
      "M.SWITCH 1 GREEN",
      "M.SWITCH 1 BLUE",
      "M.SWITCH 1 CYAN",
      "M.SWITCH 1 PURPLE",
      "M.SWITCH 1 WHITE"
  };
  char char_indicator_colors_m2[8][56]={
      "M.SWITCH 2 BLACK",
      "M.SWITCH 2 RED",
      "M.SWITCH 2 YELLOW",
      "M.SWITCH 2 GREEN",
      "M.SWITCH 2 BLUE",
      "M.SWITCH 2 CYAN",
      "M.SWITCH 2 PURPLE",
      "M.SWITCH 2 WHITE"
  };
  char char_indicator_colors_m3[8][56]={
      "M.SWITCH 3 BLACK",
      "M.SWITCH 3 RED",
      "M.SWITCH 3 YELLOW",
      "M.SWITCH 3 GREEN",
      "M.SWITCH 3 BLUE",
      "M.SWITCH 3 CYAN",
      "M.SWITCH 3 PURPLE",
      "M.SWITCH 3 WHITE"
  };
  char char_indicator_colors_m4[8][56]={
      "M.SWITCH 4 BLACK",
      "M.SWITCH 4 RED",
      "M.SWITCH 4 YELLOW",
      "M.SWITCH 4 GREEN",
      "M.SWITCH 4 BLUE",
      "M.SWITCH 4 CYAN",
      "M.SWITCH 4 PURPLE",
      "M.SWITCH 4 WHITE"
  };
  char char_indicator_colors_m5[8][56]={
      "M.SWITCH 5 BLACK",
      "M.SWITCH 5 RED",
      "M.SWITCH 5 YELLOW",
      "M.SWITCH 5 GREEN",
      "M.SWITCH 5 BLUE",
      "M.SWITCH 5 CYAN",
      "M.SWITCH 5 PURPLE",
      "M.SWITCH 5 WHITE"
  };
  char char_indicator_colors_m6[8][56]={
      "M.SWITCH 6 BLACK",
      "M.SWITCH 6 RED",
      "M.SWITCH 6 YELLOW",
      "M.SWITCH 6 GREEN",
      "M.SWITCH 6 BLUE",
      "M.SWITCH 6 CYAN",
      "M.SWITCH 6 PURPLE",
      "M.SWITCH 6 WHITE"
  };
  char char_indicator_colors_m7[8][56]={
      "M.SWITCH 7 BLACK",
      "M.SWITCH 7 RED",
      "M.SWITCH 7 YELLOW",
      "M.SWITCH 7 GREEN",
      "M.SWITCH 7 BLUE",
      "M.SWITCH 7 CYAN",
      "M.SWITCH 7 PURPLE",
      "M.SWITCH 7 WHITE"
  };
  char char_indicator_colors_m8[8][56]={
      "M.SWITCH 8 BLACK",
      "M.SWITCH 8 RED",
      "M.SWITCH 8 YELLOW",
      "M.SWITCH 8 GREEN",
      "M.SWITCH 8 BLUE",
      "M.SWITCH 8 CYAN",
      "M.SWITCH 8 PURPLE",
      "M.SWITCH 8 WHITE"
  };
  char char_indicator_colors_m9[8][56]={
      "M.SWITCH 9 BLACK",
      "M.SWITCH 9 RED",
      "M.SWITCH 9 YELLOW",
      "M.SWITCH 9 GREEN",
      "M.SWITCH 9 BLUE",
      "M.SWITCH 9 CYAN",
      "M.SWITCH 9 PURPLE",
      "M.SWITCH 9 WHITE"
  };
  char char_indicator_colors_m10[8][56]={
      "M.SWITCH 10 BLACK",
      "M.SWITCH 10 RED",
      "M.SWITCH 10 YELLOW",
      "M.SWITCH 10 GREEN",
      "M.SWITCH 10 BLUE",
      "M.SWITCH 10 CYAN",
      "M.SWITCH 10 PURPLE",
      "M.SWITCH 10 WHITE"
  };
  char char_indicator_colors_m11[8][56]={
      "M.SWITCH 11 BLACK",
      "M.SWITCH 11 RED",
      "M.SWITCH 11 YELLOW",
      "M.SWITCH 11 GREEN",
      "M.SWITCH 11 BLUE",
      "M.SWITCH 11 CYAN",
      "M.SWITCH 11 PURPLE",
      "M.SWITCH 11 WHITE"
  };
  char char_indicator_colors_m12[8][56]={
      "M.SWITCH 12 BLACK",
      "M.SWITCH 12 RED",
      "M.SWITCH 12 YELLOW",
      "M.SWITCH 12 GREEN",
      "M.SWITCH 12 BLUE",
      "M.SWITCH 12 CYAN",
      "M.SWITCH 12 PURPLE",
      "M.SWITCH 12 WHITE"
  };
  char char_indicator_colors_m13[8][56]={
      "M.SWITCH 13 BLACK",
      "M.SWITCH 13 RED",
      "M.SWITCH 13 YELLOW",
      "M.SWITCH 13 GREEN",
      "M.SWITCH 13 BLUE",
      "M.SWITCH 13 CYAN",
      "M.SWITCH 13 PURPLE",
      "M.SWITCH 13 WHITE"
  };
  char char_indicator_colors_m14[8][56]={
      "M.SWITCH 14 BLACK",
      "M.SWITCH 14 RED",
      "M.SWITCH 14 YELLOW",
      "M.SWITCH 14 GREEN",
      "M.SWITCH 14 BLUE",
      "M.SWITCH 14 CYAN",
      "M.SWITCH 14 PURPLE",
      "M.SWITCH 14 WHITE"
  };
  char char_indicator_colors_m15[8][56]={
      "M.SWITCH 15 BLACK",
      "M.SWITCH 15 RED",
      "M.SWITCH 15 YELLOW",
      "M.SWITCH 15 GREEN",
      "M.SWITCH 15 BLUE",
      "M.SWITCH 15 CYAN",
      "M.SWITCH 15 PURPLE",
      "M.SWITCH 15 WHITE"
  };
  char char_indicator_colors_m16[8][56]={
      "M.SWITCH 16 BLACK",
      "M.SWITCH 16 RED",
      "M.SWITCH 16 YELLOW",
      "M.SWITCH 16 GREEN",
      "M.SWITCH 16 BLUE",
      "M.SWITCH 16 CYAN",
      "M.SWITCH 16 PURPLE",
      "M.SWITCH 16 WHITE"
  };
  char char_indicator_colors_m17[8][56]={
      "M.SWITCH 17 BLACK",
      "M.SWITCH 17 RED",
      "M.SWITCH 17 YELLOW",
      "M.SWITCH 17 GREEN",
      "M.SWITCH 17 BLUE",
      "M.SWITCH 17 CYAN",
      "M.SWITCH 17 PURPLE",
      "M.SWITCH 17 WHITE"
  };
  char char_indicator_colors_m18[8][56]={
      "M.SWITCH 18 BLACK",
      "M.SWITCH 18 RED",
      "M.SWITCH 18 YELLOW",
      "M.SWITCH 18 GREEN",
      "M.SWITCH 18 BLUE",
      "M.SWITCH 18 CYAN",
      "M.SWITCH 18 PURPLE",
      "M.SWITCH 18 WHITE"
  };
  char char_indicator_colors_m19[8][56]={
      "M.SWITCH 19 BLACK",
      "M.SWITCH 19 RED",
      "M.SWITCH 19 YELLOW",
      "M.SWITCH 19 GREEN",
      "M.SWITCH 19 BLUE",
      "M.SWITCH 19 CYAN",
      "M.SWITCH 19 PURPLE",
      "M.SWITCH 19 WHITE"
  };
};
systemStruct systemData;

void WaitToUpdateUI() {
   while (!update_ui_complete==true) {delay(1);}
   interaction_updateui=true;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                PRINT FUNCTIONS
// ------------------------------------------------------------------------------------------------------------------------------

void debug(String x) {if (systemData.debug==true) {Serial.println(x);}}

void bench(String x) {if (systemData.t_bench==true) {Serial.println(x);}}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                 DATA: SERIAL 1
// ------------------------------------------------------------------------------------------------------------------------------

struct Serial1Struct {
  unsigned long nbytes;             // number of bytes read by serial
  unsigned long iter_token;         // count token iterations
  char BUFFER[2000];                // serial buffer
  char * token=strtok(BUFFER, ","); // token pointer 
  int collected=0;                  // counts how many unique sentences have been collected.
  bool gngga_bool=false;            // has sentence been collected
  bool gnrmc_bool=false;            // has sentence been collected
  bool gpatt_bool=false;            // has sentence been collected
};
Serial1Struct serial1Data;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                             SERIAL LINK STRUCT
// ------------------------------------------------------------------------------------------------------------------------------

struct SerialLinkStruct {
  char BUFFER[2000];
  char BUFFER1[2000];
  unsigned long nbytes;
  unsigned long TOKEN_i;
  int i_token=0;
  char * token;
  bool validation=false;
  char checksum[56];
  uint8_t checksum_of_buffer;
  uint8_t checksum_in_buffer;
  char gotSum[4];
  int i_XOR;
  int XOR;
  int c_XOR;
};
SerialLinkStruct SerialLink;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   DATA: SDCARD
// ------------------------------------------------------------------------------------------------------------------------------

struct SDCardStruct {
  // ----------------------------------------------------------
  // max matrix file names available
  // ----------------------------------------------------------
  int max_char_slots=20; 
  // ----------------------------------------------------------
  // matrix filenames created, stored and found by system
  // ----------------------------------------------------------
  char char_slots[20][56]={  
    "", "", "", "", "",
    "", "", "", "", "",
    "", "", "", "", "",
    "", "", "", "", "",
    };
  // ----------------------------------------------------------
  // max matrix file names available
  // ----------------------------------------------------------
  int max_matrix_filenames=20; 
  // ----------------------------------------------------------
  // matrix filenames created, stored and found by system
  // ----------------------------------------------------------
  char matrix_filenames[20][56]={  
    "", "", "", "", "",
    "", "", "", "", "",
    "", "", "", "", "",
    "", "", "", "", "",
    };
  // ----------------------------------------------------------
  // paths and names
  // ----------------------------------------------------------
  char sysconf[56]="/SYSTEM/SYSTEM.CONFIG";
  char default_matrix_filepath[56]="/MATRIX/M_0.SAVE";
  char matrix_filename[56]="";
  char matrix_filepath[56]="";
  char tempmatrixfilepath[56];
  char system_dirs[2][56]={"/MATRIX/", "/SYSTEM/"};
  char save_ext[56]=".SAVE";
  char matrix_fname[10]="M";
  ExFile current_file;
  char newfilename[56];
  // ----------------------------------------------------------
  // read/write data
  // ----------------------------------------------------------
  unsigned long iter_token;
  char BUFFER[2048];
  String SBUFFER;
  char * token=strtok(BUFFER, ",");
  char data_0[56];
  char data_1[56];
  char data_2[56];
  char data_3[56];
  char data_4[56];
  char data_5[56];
  char data_6[56];
  char data_7[56];
  char data_8[56];
  char data_9[56];
  char file_data[1024];
  char delim[56]=",";
  char tmp[56];
  char tag_0[56]="r";
  char tag_1[56]="e";
};
SDCardStruct sdcardData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                     DATA: TIME
// ------------------------------------------------------------------------------------------------------------------------------

struct TimeStruct {
  double accumulated_intervals; // time (units defined by alarm) accumulated by isr timer
  double accumulated_seconds;
  signed long mainLoopTimeTaken;
  signed long mainLoopTimeStart;
  signed long mainLoopTimeTakenMax;
  unsigned long t0;
  unsigned long t1;
  long uptime_seconds;
  long uptime_years;
  long uptime_months;
  long uptime_days;
  long uptime_hours;
  long uptime_minutes;
};
TimeStruct timeData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                     INTERRUPT INTERVAL COUNTER
// ------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------
// HWTimer designed to be agnostic to any specific unit of time so that interval time can be adjusted according to a given system.
// ------------------------------------------------------------------------------------------------------------------------------

static int INTERVAL_TIME;                // interval of time between alarms
volatile int interrupt_interval_counter; // for counting interrupt
hw_timer_t * interval_timer=NULL;        // H/W timer defining (Pointer to the Structure)
portMUX_TYPE interval_timer_mux=portMUX_INITIALIZER_UNLOCKED;

void IRAM_ATTR  isr_interval_timer() {
  portENTER_CRITICAL_ISR(&interval_timer_mux);
  interrupt_interval_counter++;
  timeData.accumulated_intervals++;
  portEXIT_CRITICAL_ISR(&interval_timer_mux);
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                       INTERRUPT SECOND COUNTER
// ------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------
// HWTimer designed to specifically count seconds.
// ------------------------------------------------------------------------------------------------------------------------------

volatile int interrupt_second_counter; // for counting interrupt
hw_timer_t * second_timer=NULL;        // H/W timer defining (Pointer to the Structure)
portMUX_TYPE second_timer_mux=portMUX_INITIALIZER_UNLOCKED;

void IRAM_ATTR isr_second_timer() {
  portENTER_CRITICAL_ISR(&second_timer_mux);
  interrupt_second_counter++;
  timeData.accumulated_seconds++;
  timeData.uptime_seconds++;
  portEXIT_CRITICAL_ISR(&second_timer_mux);
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    PLANET DATA
// ------------------------------------------------------------------------------------------------------------------------------

/* -------------------------------------------------------------

Astronomy: Ra:  Right Ascension (ranges from 0 to 24 hours)
           Dec: Declination     (ranges from -90 to 90 degrees)
           Az:  Azimuth         (ranges from 0 to 360 degrees)
           Alt: Altitude        (ranges from -90 to 90 degrees)
           R:   Rise            (time)
           S:   Set             (time)
           P:   Phase

------------------------------------------------------------- */

struct SiderealPlantetsStruct {
  double earth_ecliptic_lat;
  double earth_ecliptic_long;
  double sun_ra;
  double sun_dec;
  double sun_az;
  double sun_alt;
  double sun_r;
  double sun_s;
  double sun_helio_ecliptic_lat;
  double sun_helio_ecliptic_long;
  double sun_radius_vector;
  double sun_distance;
  double sun_ecliptic_lat;
  double sun_ecliptic_long;
  double moon_ra;
  double moon_dec;
  double moon_az;
  double moon_alt;
  double moon_r;
  double moon_s;
  double moon_p;
  char moon_p_name[8][28]={
    "New Moon",
    "Waxing Crescent",
    "First Quarter",
    "Waxing Gibbous",
    "Full Moon",
    "Waning Gibbous",
    "Third Quarter",
    "Waning Crescent"
  };
  double moon_lum;
  double mercury_ra;
  double mercury_dec;
  double mercury_az;
  double mercury_alt;
  double mercury_r;
  double mercury_s;
  double mercury_helio_ecliptic_lat;
  double mercury_helio_ecliptic_long;
  double mercury_radius_vector;
  double mercury_distance;
  double mercury_ecliptic_lat;
  double mercury_ecliptic_long;
  double venus_ra;
  double venus_dec;
  double venus_az;
  double venus_alt;
  double venus_r;
  double venus_s;
  double venus_helio_ecliptic_lat;
  double venus_helio_ecliptic_long;
  double venus_radius_vector;
  double venus_distance;
  double venus_ecliptic_lat;
  double venus_ecliptic_long;
  double mars_ra;
  double mars_dec;
  double mars_az;
  double mars_alt;
  double mars_r;
  double mars_s;
  double mars_helio_ecliptic_lat;
  double mars_helio_ecliptic_long;
  double mars_radius_vector;
  double mars_distance;
  double mars_ecliptic_lat;
  double mars_ecliptic_long;
  double jupiter_ra;
  double jupiter_dec;
  double jupiter_az;
  double jupiter_alt;
  double jupiter_r;
  double jupiter_s;
  double jupiter_helio_ecliptic_lat;
  double jupiter_helio_ecliptic_long;
  double jupiter_radius_vector;
  double jupiter_distance;
  double jupiter_ecliptic_lat;
  double jupiter_ecliptic_long;
  double saturn_ra;
  double saturn_dec;
  double saturn_az;
  double saturn_alt;
  double saturn_r;
  double saturn_s;
  double saturn_helio_ecliptic_lat;
  double saturn_helio_ecliptic_long;
  double saturn_radius_vector;
  double saturn_distance;
  double saturn_ecliptic_lat;
  double saturn_ecliptic_long;
  double uranus_ra;
  double uranus_dec;
  double uranus_az;
  double uranus_alt;
  double uranus_r;
  double uranus_s;
  double uranus_helio_ecliptic_lat;
  double uranus_helio_ecliptic_long;
  double uranus_radius_vector;
  double uranus_distance;
  double uranus_ecliptic_lat;
  double uranus_ecliptic_long;
  double neptune_ra;
  double neptune_dec;
  double neptune_az;
  double neptune_alt;
  double neptune_r;
  double neptune_s;
  double neptune_helio_ecliptic_lat;
  double neptune_helio_ecliptic_long;
  double neptune_radius_vector;
  double neptune_distance;
  double neptune_ecliptic_lat;
  double neptune_ecliptic_long;
  char sentence[1024];
};
SiderealPlantetsStruct siderealPlanetData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    OBJECT DATA
// ------------------------------------------------------------------------------------------------------------------------------

struct SiderealObjectStruct {
  char object_name[56];
  char object_table_name[56];
  int  object_number;
  int  object_table_i;
  double object_ra;
  double object_dec;
  double object_az;
  double object_alt;
  double object_mag;
  double object_r;
  double object_s;
  // double objects_data[609][7]; // memory limitation. exploring alternate options for storing object data.
  char object_table[7][20] =
  {
    "Star Table",          // 0
    "NGC Table",           // 1
    "IC Table",            // 2
    "Other Objects Table", // 3
    "Messier Table",       // 4
    "Caldwell Table",      // 5
    "Herschel 400 Table",  // 6
  };
};
SiderealObjectStruct siderealObjectData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                               DATA: VALIDATION
// ------------------------------------------------------------------------------------------------------------------------------

struct validationStruct {
  int  valid_i=0;         // validation counter
  bool valid_b=true;      // validation bool
  char *find_char;        // validation pointer
  int  index;             // a placeholder for char index
  bool bool_data_0=false; // load matrix values validation bool
  bool bool_data_1=false; // load matrix values validation bool
};
validationStruct validData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   GET CHECKSUM
// ------------------------------------------------------------------------------------------------------------------------------

int getCheckSum(char * string) {
  for (SerialLink.XOR=0, SerialLink.i_XOR=0; SerialLink.i_XOR < strlen(string); SerialLink.i_XOR++) {
    SerialLink.c_XOR=(unsigned char)string[SerialLink.i_XOR];
    if (SerialLink.c_XOR=='*') break;
    if (SerialLink.c_XOR != '$') SerialLink.XOR ^= SerialLink.c_XOR;
  }
  return SerialLink.XOR;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   HEX TO DIGIT
// ------------------------------------------------------------------------------------------------------------------------------

uint8_t h2d(char hex) {if(hex > 0x39) hex -= 7; return(hex & 0xf);}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                              2 HEX TO 2 DIGITS
// ------------------------------------------------------------------------------------------------------------------------------

/*
converts each digit it to its decimal equivalent, shifts first digit left by 4 bits and 'ORing' with the second digit.
The result is a single byte value representing two hexadecimal digits combined.
*/
uint8_t h2d2(char h1, char h2) {return (h2d(h1)<<4) | h2d(h2);}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                              VALIDATE CHECKSUM
// ------------------------------------------------------------------------------------------------------------------------------

bool validateChecksum(char * buffer) {
  memset(SerialLink.gotSum, 0, sizeof(SerialLink.gotSum));
  SerialLink.gotSum[0]=buffer[strlen(buffer) - 3];
  SerialLink.gotSum[1]=buffer[strlen(buffer) - 2];
  SerialLink.checksum_of_buffer= getCheckSum(buffer);
  SerialLink.checksum_in_buffer=h2d2(SerialLink.gotSum[0], SerialLink.gotSum[1]);
  if (SerialLink.checksum_in_buffer==SerialLink.checksum_of_buffer) {return true;}
  return false;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                CREATE CHECKSUM
// ------------------------------------------------------------------------------------------------------------------------------

void createChecksum(char * buffer) {
  SerialLink.checksum_of_buffer=getCheckSum(buffer);
  sprintf(SerialLink.checksum,"%X",SerialLink.checksum_of_buffer);
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                               VALIDATION: DATA
// ------------------------------------------------------------------------------------------------------------------------------

/*
checks can be tuned and ellaborated upon individually.
each sentence has a checksum that is for checking if the payload is more or less intact, while in contrast checks below are for
sanitizing each element of a sentence. thorough testing is required to ensure no false negatives/positives.
*/


bool count_digits(char * data, int expected) {
  validData.valid_i=0;
  for (int i=0; i < strlen(data); i++) {if (isdigit(data[i])==1) {validData.valid_i++;}}
  if (validData.valid_i==expected) {return true;} else {return false;}
}

bool count_alpha(char * data, int expected) {
  validData.valid_i=0;
  for (int i=0; i < strlen(data); i++) {if (isalpha(data[i])==1) {validData.valid_i++;}}
  if (validData.valid_i==expected) {return true;} else {return false;}
}

bool is_all_digits(char * data) {
  validData.valid_b=true;
  for (int i=0; i < strlen(data); i++) {if (isdigit(data[i])==0) {validData.valid_b=false;}}
  return validData.valid_b;
}

bool is_all_digits_plus_char(char * data, char find_char) {
  /* designed to check all chars are digits except one find_char */
  validData.valid_b=true;
  validData.find_char=strchr(data, find_char);
  validData.index=(int)(validData.find_char - data);
  for (int i=0; i < strlen(data); i++) {if (isdigit(data[i])==0) {if (i != validData.index) {validData.valid_b=false;}}}
  return validData.valid_b;
}

bool is_positive_negative_num(char * data) {
  /*
  designed to check all chars are digits except one period and the signed bit. allows positive/negative floats,
  doubles and ints.
  allows one period anywhere.
  allows one minus (-) sign at index zero.
  */
  validData.valid_b=true;
  validData.find_char=strchr(data, '.');
  validData.index=(int)(validData.find_char - data);
  for (int i=0; i < strlen(data); i++) {
    if (isdigit(data[i])==0) {if (i != validData.index) {if ((data[i] != '-') && (i > 0)) {validData.valid_b=false;}}}}
  return validData.valid_b;
}

bool is_all_alpha(char * data) {
  validData.valid_b=true;
  for (int i=0; i < strlen(data); i++) {if (isalpha(data[i])==0) {validData.valid_b=false;}}
  return validData.valid_b;
}

bool val_utc_time(char * data) {
  bool check_pass=false;
  if (strlen(data)==9) {
    if (data[6]=='.') {
      if (count_digits(data, 8)==true) {
        if ((atoi(data) >= 0.0) && (atoi(data) <= 235959.99)) {check_pass=true;}
      }
    }
  }
  return check_pass;
}

bool val_utc_date(char * data) {
  bool check_pass=false;
  if (strlen(data)==6) {
    if (is_all_digits(data)==true) {
      if ((atoi(data) >= 0.0) && (atoi(data) <= 999999)) {check_pass=true;}
    }
  }
  return check_pass;
}

bool val_latitude(char * data) {
  bool check_pass=false;
  if (strlen(data)==13) {
    if (data[4]=='.') {
      if (count_digits(data, 12)==true) {
        if (is_positive_negative_num(data)==true) {
          check_pass=true;
        }
      }
    }
  }
  return check_pass;
}

bool val_longitude(char * data) {
  bool check_pass=false;
  if (strlen(data)==14) {
    if (data[5]=='.') {
      if (count_digits(data, 13)==true) {
        if (is_positive_negative_num(data)==true) {
          check_pass=true;
        }
      }
    }
  }
  return check_pass;
}

bool val_latitude_H(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if ((strcmp(data, "N")==0) || (strcmp(data, "S")==0)) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_longitude_H(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if ((strcmp(data, "E")==0) || (strcmp(data, "W")==0)) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_positioning_status_gngga(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if (is_all_digits(data)==true) {
      if ((atoi(data) >= 0) && (atoi(data) <= 6)) {
        check_pass=true;
      }
    }
  }
  return check_pass;
}

bool val_satellite_count(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if (atoi(data) >= 0){
      check_pass=true;
      }
  }
  return check_pass;
}

bool val_hdop_precision_factor(char * data) {
  bool check_pass=false;
  if (is_all_digits_plus_char(data, '.')==true) {
    if (atoi(data) >= 0){
      check_pass=true;
  }
  }
  return check_pass;
}

bool val_altitude(char * data) {
  // account for decimal point
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
      check_pass=true;
  }
  return check_pass;
}

bool val_altitude_units(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if (strcmp(data, "M")==0) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_geoidal(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_geoidal_units(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if (strcmp(data, "M")==0) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_differential_delay(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_basestation_id(char * data) {
  // Serial.println("[val_basestation_id] " + String(data));
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if (strlen(data)==4) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_positioning_status_gnrmc(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if ((strcmp(data, "A")==0) || (strcmp(data, "V")==0)) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_ground_speed(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_ground_heading(char * data) {
  bool check_pass=false;
  if (is_all_digits_plus_char(data, '.')==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 360)) {
      check_pass=true;
    }
  }
  return check_pass;
}

// todo
bool val_installation_angle(char * data) {
  bool check_pass=false;
  if (is_all_digits_plus_char(data, '.')==true) {
    if (atoi(data) >= 0) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_installation_angle_direction(char * data) {
  bool check_pass=false;
  if (strlen(data)==1) {
    if ((strcmp(data, "E")==0) || (strcmp(data, "W")==0) || (strcmp(data, "M")==0)) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_mode_indication(char * data) {
  // Serial.println("[val_mode_indication]" + String(data));
  bool check_pass=false;
  if (strlen(data)==1) {
    if ((strcmp(data, "A")==0) || (strcmp(data, "D")==0) || (strcmp(data, "E")==0) || (strcmp(data, "N")==0)) {
      check_pass=true;
    }
  }
  return check_pass;
}

bool val_pitch_gpatt(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_roll_gpatt(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_yaw_gpatt(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_angle_channle_p_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "p")==0) {check_pass=true;}
  return check_pass;
}

bool val_angle_channle_r_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "r")==0) {check_pass=true;}
  return check_pass;
}

bool val_angle_channle_y_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "y")==0) {check_pass=true;}
  return check_pass;
}

bool val_version_channel_s_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "S")==0) {check_pass=true;}
  return check_pass;
}

bool val_software_version_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if (atoi(data)==20230219) {check_pass=true;}
  }
  return check_pass;
}

bool val_product_id_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "003E009")==0) {check_pass=true;}
  return check_pass;
}

bool val_id_channel_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "ID")==0) {check_pass=true;}
  return check_pass;
}

bool val_ins_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data)==0) || (atoi(data)==1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ins_channel_gpatt(char * data) {
  bool check_pass=false;
  if (strcmp(data, "INS")==0) {check_pass=true;}
  return check_pass;
}

bool val_hardware_version_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if (strcmp(data, "3335")==0) {check_pass=true;}
  }
  return check_pass;
}

bool val_run_state_flag_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((strcmp(data, "01")==0) || (strcmp(data, "02")==0) || (strcmp(data, "03")==0)) {check_pass=true;}
  }
  return check_pass;
}

// todo
bool val_mis_angle_num_gpatt(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_static_flag_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data)==0) || (atoi(data)==1)) {check_pass=true;}
  }
  return check_pass;
}

// todo
bool val_user_code_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits_plus_char(data, '.')==true) {
    if (atoi(data) >= 0) {check_pass=true;}
  }
  return check_pass;
}

bool val_gst_data_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if (atoi(data) >= 0) {check_pass=true;}
  }
  return check_pass;
}

bool val_line_flag_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data)==0) || (atoi(data)==1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_mis_att_flag_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data)==0) || (atoi(data)==1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_imu_kind_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 8)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ubi_car_kind_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 1) && (atoi(data) <= 4)) {check_pass=true;}
  }
  return check_pass;
}

bool val_mileage_gpatt(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_run_inetial_flag_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 4)) {check_pass=true;}
  }
  return check_pass;
}

bool val_speed_enable_gpatt(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data)==0) || (atoi(data)==1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_speed_num_gpatt(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_speed_status(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 2)) {check_pass=true;}
  }
  return check_pass;
}

bool val_accelleration_delimiter(char * data) {
  bool check_pass=false;
  if (strcmp(data, "A")==0) {check_pass=true;}
  return check_pass;
}

bool val_axis_accelleration(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_angular_velocity_delimiter(char * data) {
  bool check_pass=false;
  if (strcmp(data, "G")==0) {check_pass=true;}
  return check_pass;
}

bool val_gyro_angular_velocity(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_status_delimiter(char * data) {
  bool check_pass=false;
  if (strcmp(data, "S")==0) {check_pass=true;}
  return check_pass;
}

bool val_ubi_state_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ubi_state_kind_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 8)) {check_pass=true;}
  }
  return check_pass;
}

bool val_code_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_gset_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_sset_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ang_dget_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ins_run_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_fix_kind_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_fiobject_roll_flag(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_fix_pitch_flag(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_ubi_on_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 8)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ubi_kind_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 2)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ubi_a_set(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
  if ((atoi(data) >= 0) && (atoi(data) <= 19)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ubi_b_set(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
  if ((atoi(data) >= 0) && (atoi(data) <= 19)) {check_pass=true;}
  }
  return check_pass;
}

bool val_acc_X_data(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_acc_Y_data(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_gyro_Z_data(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_pitch_angle(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_roll_angle(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_yaw_angle(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_car_speed(char * data) {
  bool check_pass=false;
  if (is_all_digits_plus_char(data, '.')==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 100)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ins_flag(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
    if ((atoi(data) >= 0) && (atoi(data) <= 4)) {check_pass=true;}
  }
  return check_pass;
}

bool val_ubi_num(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_ubi_valid(char * data) {
  bool check_pass=false;
  if (is_all_digits(data)==true) {
  if ((atoi(data) >= 0) && (atoi(data) <= 1)) {check_pass=true;}
  }
  return check_pass;
}

bool val_coll_T_data(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_coll_T_heading(char * data) {
  bool check_pass=false;
  if (is_positive_negative_num(data)==true) {
    check_pass=true;
  }
  return check_pass;
}

bool val_custom_flag(char * data) {
  bool check_pass=false;
  if (strlen(data) >= 1) {check_pass=true;}
  return check_pass;
}

bool val_checksum(char * data) {
  bool check_pass=false;
  if (strlen(data)==3) {check_pass=true;}
  return check_pass;
}

bool val_scalable(char * data) {
  bool check_pass=false;
  if (strlen(data) >= 1) {check_pass=true;}
  return check_pass;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   DATA: MATRIX
// ------------------------------------------------------------------------------------------------------------------------------

struct MatrixStruct {

  int max_matrices=20;         // number of matrix switches 
  int max_matrix_functions=10; // number of functions available to a matrix switch

  int matrix_enabled_i=0;      // count how many matrx switches are enabled
  int matrix_disabled_i=0;     // count how many matrx switches are disabled
  int matrix_active_i=0;       // count how many matrx switches are active
  int matrix_inactive_i=0;     // count how many matrx switches are inactive

  char temp[256];              // a general place to store temporary chars relative to MatrixStruct
  char matrix_sentence[256];   // an NMEA inspired sentence reflecting matrix switch states
  String tempStr="";

  // -------------------------------------------------------------------------------------------------------
  // matrix switch active/inactive states each loop of matrix switch function
  // -------------------------------------------------------------------------------------------------------
  bool matrix_switch_state[1][20]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    }
  };

  // -------------------------------------------------------------------------------------------------------
  // matrix switch active/inactive states each loop of matrix switch function
  // -------------------------------------------------------------------------------------------------------
  bool tmp_matrix_switch_state[1][20]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    }
  };

  // -------------------------------------------------------------------------------------------------------
  // matrix switch enabled/disabled
  // -------------------------------------------------------------------------------------------------------
  int matrix_switch_enabled[1][20]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    }
  };

  // -------------------------------------------------------------------------------------------------------
  // matrix switch output mode: 0=high/low
  // -------------------------------------------------------------------------------------------------------
  int matrix_switch_output_mode[1][20]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    }
  };

  // ------------------------------------------------------------
  // matrix indicator colors
  // ------------------------------------------------------------
  int indicator_number=0;
  long matrix_indicator_colors[1][20] = {
    {
      4,4,4,4,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,4
    }
  };
  long tmp_matrix_indicator_colors[1][20] = {
    {
      1,1,1,1,1,1,1,1,1,1,
      1,1,1,1,1,1,1,1,1,1
    }
  };

  int max_indicator_colors=7;
  char available_matrix_indicator_colors[8][56] = {
    "Black",
    "Red",
    "Yellow",
    "Green",
    "Blue",
    "Cyan",
    "Purple",
    "White",
  };

  // -------------------------------------------------------------------------------------------------------
  // reflects matrix switch inverted logic bool (per function)
  // -------------------------------------------------------------------------------------------------------
  bool matrix_switch_inverted_logic[20][10]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 4
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 6
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 12
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 14
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 15
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 17
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 18
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 19
    },
  };

  int matrix_switch_expression_index[20][10]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 2
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 3
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 4
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 5
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 6
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 7
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 11
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 12
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 13
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 14
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 15
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 17
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 18
    },
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 19
    },
  };

  // -------------------------------------------------------------------------------------------------------
  /*
  a placeholder for timings when timer functions are selected for a matrix switch.
  allows modulation with second resolution.
  currently intended as one timer per switch so be careful.
  */
  // -------------------------------------------------------------------------------------------------------
  unsigned long matrix_timers[1][20]={
    {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    }
  };

  // -------------------------------------------------------------------------------------------------------
  // a placeholder for matrix switch ports (default no port)
  // -------------------------------------------------------------------------------------------------------
  signed int matrix_port_map[1][20]={
    {
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    }
  };

  // -------------------------------------------------------------------------------------------------------
  // a placeholder for matrix switch ports (default no port)
  // -------------------------------------------------------------------------------------------------------
  signed int tmp_matrix_port_map[1][20]={
    {
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    }
  };

  // -------------------------------------------------------------------------------------------------------
  // a placeholder for hardcoded matrix switch ports (default ATMEGA2560 digital)
  // -------------------------------------------------------------------------------------------------------
  // signed int matrix_port_map[1][20]={
  //   {
  //     23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
  //     33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
  //   }
  // };

  // -------------------------------------------------------------------------------------------------------
  // store up to 10 functions names per switch (default None)
  // -------------------------------------------------------------------------------------------------------
  char matrix_function[20][10][25]={
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 1
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 2
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 3
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 4
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 5
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 6
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 7
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 8
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 9
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 10
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 11
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 12
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 13
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 14
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 15
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 16
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 17
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 18
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 19
     },
    {"None", "None", "None", "None", "None", "None", "None", "None", "None", "None", // 20
     },
    };

  // -------------------------------------------------------------------------------------------------------
  /*
  store up to 3 values for each matrix switch function:

                                      0     1     2     
                                      X     Y     Z    
                              {  {   0.0,  0.0,  0.0   } }
  */
  // -------------------------------------------------------------------------------------------------------
  double matrix_function_xyz[20][10][3]={
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 1
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 2
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 3
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 4
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 5
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 6
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 7
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 8
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 9
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 10
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 11
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 12
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 13
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 14
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 15
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 16
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 17
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 18
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 19
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
    {
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, // 20
      {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}
    },
  };

  // -------------------------------------------------------------------------------------------------------
  // function expressions
  // -------------------------------------------------------------------------------------------------------
  char expression[5][16] =
  {
    "", // empty for functions that take no expression
    "Equal",
    "Over",
    "Under",
    "Range",
  };
  int i_expression=0;

  // -------------------------------------------------------------------------------------------------------
  // number of available base function names that can be used to program a matrix switch
  // -------------------------------------------------------------------------------------------------------
  int max_matrix_function_names=157;

  // -------------------------------------------------------------------------------------------------------
  // function names for function name matrix
  // -------------------------------------------------------------------------------------------------------
  char matrix_function_names[157][25]=
  {
    "None",
    "Enabled",
    "Overload",
    "SwitchLink",
    "MatrixTimer",
    "LocalTime",
    "DaySunday",
    "DayMonday",
    "DayTuesday",
    "DayWednesday",
    "DayThursday",
    "DayFriday",
    "DaySaturday",
    "DateDayX",
    "DateMonthX",
    "DateYearX",
    "DegLat",
    "DegLon",
    "DegLatLon",
    "UTCTimeGNGGA",
    "PosStatusGNGGA",
    "SatCount",
    "HemiGNGGANorth",
    "HemiGNGGASouth",
    "HemiGNGGAEast",
    "HemiGNGGAWest",
    "GPSPrecision",
    "AltGNGGA",
    "UTCTimeGNRMC",
    "PosStatusGNRMCA",
    "PosStatusGNRMCV",
    "ModeGNRMCA",
    "ModeGNRMCD",
    "ModeGNRMCE",
    "ModeGNRMCN",
    "HemiGNRMCNorth",
    "HemiGNRMCSouth",
    "HemiGNRMCEast",
    "HemiGNRMCWest",
    "GSpeedGNRMC",
    "HeadingGNRMC",
    "UTCDateGNRMC",
    "LFlagGPATT",
    "SFlagGPATT",
    "RSFlagGPATT",
    "INSGPATT",
    "SpeedNumGPATT",
    "MileageGPATT",
    "GSTDataGPATT",
    "YawGPATT",
    "RollGPATT",
    "PitchGPATT",
    "GNGGAValidCS",
    "GNRMCValidCS",
    "GPATTValidCS",
    "GNGGAValidCD",
    "GNRMCValidCD",
    "GPATTValidCD",
    "WT901AccX",
    "WT901AccY",
    "WT901AccZ",
    "WT901AngX",
    "WT901AngY",
    "WT901AngZ",
    "WT901MagX",
    "WT901MagY",
    "WT901MagZ",
    "WT901GyroX",
    "WT901GyroY",
    "WT901GyroZ",
    "Meteors",
    "SunAz",
    "SunAlt",
    "DayTime",
    "NightTime",
    "Sunrise",
    "Sunset",
    "MoonAz",
    "MoonAlt",
    "MoonUp",
    "MoonDown",
    "Moonrise",
    "Moonset",
    "MoonPhase",
    "MercuryAz",
    "MercuryAlt",
    "MercuryUp",
    "MercuryDown",
    "MercuryRise",
    "MercurySet",
    "VenusAz",
    "VenusAlt",
    "VenusUp",
    "VenusDown",
    "VenusRise",
    "VenusSet",
    "MarsAz",
    "MarsAlt",
    "MarsUp",
    "MarsDown",
    "MarsRise",
    "MarsSet",
    "JupiterAz",
    "JupiterAlt",
    "JupiterUp",
    "JupiterDown",
    "JupiterRise",
    "JupiterSet",
    "SaturnAz",
    "SaturnAlt",
    "SaturnUp",
    "SaturnDown",
    "SaturnRise",
    "SaturnSet",
    "UranusAz",
    "UranusAlt",
    "UranusUp",
    "UranusDown",
    "UranusRise",
    "UranusSet",
    "NeptuneAz",
    "NeptuneAlt",
    "NeptuneUp",
    "NeptuneDown",
    "NeptuneRise",
    "NeptuneSet",
    "DHT11H0",
    "DHT11C0",
    "DHT11F",
    "DHT11HIC0",
    "DHT11HIF0",
    "Sensor0",
    "Sensor1",
    "Sensor2",
    "Sensor3",
    "Sensor4",
    "Sensor5",
    "Sensor6",
    "Sensor7",
    "Sensor8",
    "Sensor9",
    "Sensor10",
    "Sensor11",
    "Sensor12",
    "Sensor13",
    "Sensor14",
    "Sensor15",
    "JoyS0Up",
    "JoyS0Down",
    "JoyS0Left",
    "JoyS0Right",
    "JoyS0Click",
    "JoyS1Up",
    "JoyS1Down",
    "JoyS1Left",
    "JoyS1Right",
    "JoyS1Click",
  };
};
MatrixStruct matrixData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                            MENU FUNCTION NAMES
// ------------------------------------------------------------------------------------------------------------------------------
// this list is currently seperate from matrix_function_names in matrixData so that function names are not dependant on lcdgfx.
// the lists would be preferrably merged (providing function names are still not tied to any particular display driver). 
// ------------------------------------------------------------------------------------------------------------------------------
const char *menuMatrixSetFunctionNameItems[157] =
{
  matrixData.matrix_function_names[0],
  matrixData.matrix_function_names[1],
  matrixData.matrix_function_names[2],
  matrixData.matrix_function_names[3],
  matrixData.matrix_function_names[4],
  matrixData.matrix_function_names[5],
  matrixData.matrix_function_names[6],
  matrixData.matrix_function_names[7],
  matrixData.matrix_function_names[8],
  matrixData.matrix_function_names[9],
  matrixData.matrix_function_names[10],
  matrixData.matrix_function_names[11],
  matrixData.matrix_function_names[12],
  matrixData.matrix_function_names[13],
  matrixData.matrix_function_names[14],
  matrixData.matrix_function_names[15],
  matrixData.matrix_function_names[16],
  matrixData.matrix_function_names[17],
  matrixData.matrix_function_names[18],
  matrixData.matrix_function_names[19],
  matrixData.matrix_function_names[20],
  matrixData.matrix_function_names[21],
  matrixData.matrix_function_names[22],
  matrixData.matrix_function_names[23],
  matrixData.matrix_function_names[24],
  matrixData.matrix_function_names[25],
  matrixData.matrix_function_names[26],
  matrixData.matrix_function_names[27],
  matrixData.matrix_function_names[28],
  matrixData.matrix_function_names[29],
  matrixData.matrix_function_names[30],
  matrixData.matrix_function_names[31],
  matrixData.matrix_function_names[32],
  matrixData.matrix_function_names[33],
  matrixData.matrix_function_names[34],
  matrixData.matrix_function_names[35],
  matrixData.matrix_function_names[36],
  matrixData.matrix_function_names[37],
  matrixData.matrix_function_names[38],
  matrixData.matrix_function_names[39],
  matrixData.matrix_function_names[40],
  matrixData.matrix_function_names[41],
  matrixData.matrix_function_names[42],
  matrixData.matrix_function_names[43],
  matrixData.matrix_function_names[44],
  matrixData.matrix_function_names[45],
  matrixData.matrix_function_names[46],
  matrixData.matrix_function_names[47],
  matrixData.matrix_function_names[48],
  matrixData.matrix_function_names[49],
  matrixData.matrix_function_names[50],
  matrixData.matrix_function_names[51],
  matrixData.matrix_function_names[52],
  matrixData.matrix_function_names[53],
  matrixData.matrix_function_names[54],
  matrixData.matrix_function_names[55],
  matrixData.matrix_function_names[56],
  matrixData.matrix_function_names[57],
  matrixData.matrix_function_names[58],
  matrixData.matrix_function_names[59],
  matrixData.matrix_function_names[60],
  matrixData.matrix_function_names[61],
  matrixData.matrix_function_names[62],
  matrixData.matrix_function_names[63],
  matrixData.matrix_function_names[64],
  matrixData.matrix_function_names[65],
  matrixData.matrix_function_names[66],
  matrixData.matrix_function_names[67],
  matrixData.matrix_function_names[68],
  matrixData.matrix_function_names[69],
  matrixData.matrix_function_names[70],
  matrixData.matrix_function_names[71],
  matrixData.matrix_function_names[72],
  matrixData.matrix_function_names[73],
  matrixData.matrix_function_names[74],
  matrixData.matrix_function_names[75],
  matrixData.matrix_function_names[76],
  matrixData.matrix_function_names[77],
  matrixData.matrix_function_names[78],
  matrixData.matrix_function_names[79],
  matrixData.matrix_function_names[80],
  matrixData.matrix_function_names[81],
  matrixData.matrix_function_names[82],
  matrixData.matrix_function_names[83],
  matrixData.matrix_function_names[84],
  matrixData.matrix_function_names[85],
  matrixData.matrix_function_names[86],
  matrixData.matrix_function_names[87],
  matrixData.matrix_function_names[88],
  matrixData.matrix_function_names[89],
  matrixData.matrix_function_names[90],
  matrixData.matrix_function_names[91],
  matrixData.matrix_function_names[92],
  matrixData.matrix_function_names[93],
  matrixData.matrix_function_names[94],
  matrixData.matrix_function_names[95],
  matrixData.matrix_function_names[96],
  matrixData.matrix_function_names[97],
  matrixData.matrix_function_names[98],
  matrixData.matrix_function_names[99],
  matrixData.matrix_function_names[100],
  matrixData.matrix_function_names[101],
  matrixData.matrix_function_names[102],
  matrixData.matrix_function_names[103],
  matrixData.matrix_function_names[104],
  matrixData.matrix_function_names[105],
  matrixData.matrix_function_names[106],
  matrixData.matrix_function_names[107],
  matrixData.matrix_function_names[108],
  matrixData.matrix_function_names[109],
  matrixData.matrix_function_names[110],
  matrixData.matrix_function_names[111],
  matrixData.matrix_function_names[112],
  matrixData.matrix_function_names[113],
  matrixData.matrix_function_names[114],
  matrixData.matrix_function_names[115],
  matrixData.matrix_function_names[116],
  matrixData.matrix_function_names[117],
  matrixData.matrix_function_names[118],
  matrixData.matrix_function_names[119],
  matrixData.matrix_function_names[120],
  matrixData.matrix_function_names[121],
  matrixData.matrix_function_names[122],
  matrixData.matrix_function_names[123],
  matrixData.matrix_function_names[124],
  matrixData.matrix_function_names[125],
  matrixData.matrix_function_names[126],
  matrixData.matrix_function_names[127],
  matrixData.matrix_function_names[128],
  matrixData.matrix_function_names[129],
  matrixData.matrix_function_names[130],
  matrixData.matrix_function_names[131],
  matrixData.matrix_function_names[132],
  matrixData.matrix_function_names[133],
  matrixData.matrix_function_names[134],
  matrixData.matrix_function_names[135],
  matrixData.matrix_function_names[136],
  matrixData.matrix_function_names[137],
  matrixData.matrix_function_names[138],
  matrixData.matrix_function_names[139],
  matrixData.matrix_function_names[140],
  matrixData.matrix_function_names[141],
  matrixData.matrix_function_names[142],
  matrixData.matrix_function_names[143],
  matrixData.matrix_function_names[144],
  matrixData.matrix_function_names[145],
  matrixData.matrix_function_names[146],
  matrixData.matrix_function_names[147],
  matrixData.matrix_function_names[148],
  matrixData.matrix_function_names[149],
  matrixData.matrix_function_names[150],
  matrixData.matrix_function_names[151],
  matrixData.matrix_function_names[152],
  matrixData.matrix_function_names[153],
  matrixData.matrix_function_names[154],
  matrixData.matrix_function_names[155],
  matrixData.matrix_function_names[156],
  // matrixData.matrix_function_names[157],
  // matrixData.matrix_function_names[158],
  // matrixData.matrix_function_names[159],
  // matrixData.matrix_function_names[160],
  // matrixData.matrix_function_names[161],
  // matrixData.matrix_function_names[162],
  // matrixData.matrix_function_names[163],
  // matrixData.matrix_function_names[164],
  // matrixData.matrix_function_names[165],
  // matrixData.matrix_function_names[166],
  // matrixData.matrix_function_names[167],
  // matrixData.matrix_function_names[168],
  // matrixData.matrix_function_names[169],
  // matrixData.matrix_function_names[170],
  // matrixData.matrix_function_names[171],
  // matrixData.matrix_function_names[172],
  // matrixData.matrix_function_names[173],
  // matrixData.matrix_function_names[174],
  // matrixData.matrix_function_names[175],
  // matrixData.matrix_function_names[176],
  // matrixData.matrix_function_names[177],
  // matrixData.matrix_function_names[178],
  // matrixData.matrix_function_names[179],
  // matrixData.matrix_function_names[180],
  // matrixData.matrix_function_names[181],
  // matrixData.matrix_function_names[182],
  // matrixData.matrix_function_names[183],
  // matrixData.matrix_function_names[184],
  // matrixData.matrix_function_names[185],
  // matrixData.matrix_function_names[186],
  // matrixData.matrix_function_names[187],
  // matrixData.matrix_function_names[188],
  // matrixData.matrix_function_names[189],
  // matrixData.matrix_function_names[190],
  // matrixData.matrix_function_names[191],
  // matrixData.matrix_function_names[192],
  // matrixData.matrix_function_names[193],
  // matrixData.matrix_function_names[194],
  // matrixData.matrix_function_names[195],
  // matrixData.matrix_function_names[196],
  // matrixData.matrix_function_names[197],
  // matrixData.matrix_function_names[198],
  // matrixData.matrix_function_names[199],
  // matrixData.matrix_function_names[200],
  // matrixData.matrix_function_names[201],
  // matrixData.matrix_function_names[202],
  // matrixData.matrix_function_names[203],
  // matrixData.matrix_function_names[204],
  // matrixData.matrix_function_names[205],
  // matrixData.matrix_function_names[206],
  // matrixData.matrix_function_names[207],
  // matrixData.matrix_function_names[208],
  // matrixData.matrix_function_names[209],
  // matrixData.matrix_function_names[210],
  // matrixData.matrix_function_names[211],
  // matrixData.matrix_function_names[212],
  // matrixData.matrix_function_names[213],
  // matrixData.matrix_function_names[214],
  // matrixData.matrix_function_names[215],
  // matrixData.matrix_function_names[216],
  // matrixData.matrix_function_names[217],
  // matrixData.matrix_function_names[218],
  // matrixData.matrix_function_names[219],
  // matrixData.matrix_function_names[220],
  // matrixData.matrix_function_names[221],
  // matrixData.matrix_function_names[222],
  // matrixData.matrix_function_names[223],
  // matrixData.matrix_function_names[224],
  // matrixData.matrix_function_names[225],
  // matrixData.matrix_function_names[226],
  // matrixData.matrix_function_names[227],
  // matrixData.matrix_function_names[228],
  // matrixData.matrix_function_names[229],
  // matrixData.matrix_function_names[230],
  // matrixData.matrix_function_names[231],
  // matrixData.matrix_function_names[232],
  // matrixData.matrix_function_names[233],
  // matrixData.matrix_function_names[234],
  // matrixData.matrix_function_names[235],
  // matrixData.matrix_function_names[236],
  // matrixData.matrix_function_names[237],
  // matrixData.matrix_function_names[238],
  // matrixData.matrix_function_names[239],
  // matrixData.matrix_function_names[240],
  // matrixData.matrix_function_names[241],
  // matrixData.matrix_function_names[242],
  // matrixData.matrix_function_names[243],
  // matrixData.matrix_function_names[244],
  // matrixData.matrix_function_names[245],
  // matrixData.matrix_function_names[246],
  // matrixData.matrix_function_names[247],
  // matrixData.matrix_function_names[248],
  // matrixData.matrix_function_names[249],
  // matrixData.matrix_function_names[250],
  // matrixData.matrix_function_names[251],
  // matrixData.matrix_function_names[252],
  // matrixData.matrix_function_names[253],
  // matrixData.matrix_function_names[254],
  // matrixData.matrix_function_names[255],
};
LcdGfxMenu menuMatrixSetFunctionName( menuMatrixSetFunctionNameItems, 157, {{2, 86}, {125, 125}} );

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    DATA: GNGGA
// ------------------------------------------------------------------------------------------------------------------------------

struct GNGGAStruct {
  char sentence[200];
  char outsentence[200];
  char tag[56];                                                                                             // <0> Log header
  char utc_time[56];                  int bad_utc_time_i;              bool bad_utc_time=true;              // <1> UTC time, the format is hhmmss.sss
  char latitude[56];                  int bad_latitude_i;              bool bad_latitude=true;              // <2> Latitude, the format is  ddmm.mmmmmmm
  char latitude_hemisphere[56];       int bad_latitude_hemisphere_i;   bool bad_latitude_hemisphere=true;   // <3> Latitude hemisphere, N or S (north latitude or south latitude)
  char longitude[56];                 int bad_longitude_i;             bool bad_longitude=true;             // <4> Longitude, the format is dddmm.mmmmmmm
  char longitude_hemisphere[56];      int bad_longitude_hemisphere_i;  bool bad_longitude_hemisphere=true;  // <5> Longitude hemisphere, E or W (east longitude or west longitude)
  char solution_status[56];           int bad_solution_status_i;       bool bad_solution_status=true;       // <6> GNSS positioning status: 0 not positioned, 1 single point positioning, 2: pseudorange difference, 6: pure INS */
  char satellite_count_gngga[56]="0"; int bad_satellite_count_gngga_i; bool bad_satellite_count_gngga=true; // <7> Number of satellites used
  char hdop_precision_factor[56];     int bad_hdop_precision_factor_i; bool bad_hdop_precision_factor=true; // <8> HDOP level precision factor
  char altitude[56];                  int bad_altitude_i;              bool bad_altitude=true;              // <9> Altitude
  char altitude_units[56];            int bad_altitude_units_i;        bool bad_altitude_units=true;        // <10> 
  char geoidal[56];                   int bad_geoidal_i;               bool bad_geoidal=true;               // <11> The height of the earth ellipsoid relative to the geoid 
  char geoidal_units[56];             int bad_geoidal_units_i;         bool bad_geoidal_units=true;         // <12> 
  char differential_delay[56];        int bad_differential_delay_i;    bool bad_differential_delay=true;    // <13>
  char id[56];                        int bad_id_i;                    bool bad_id=true;                    // <14> base station ID
  char check_sum[56];                 int bad_check_sum_i;             bool bad_check_sum=true;             // <15> XOR check value of all bytes starting from $ to *
  int count_valid_elements=0;         int bad_checksum_validity;       bool valid_checksum=false;           // Checksum validity bool, counters and a counter for how many elements passed further testing (gngga count_valid_elements should result in 16)
  int max_valid_elements=16;
  int total_invalid_elements=0;
  int max_bad=9999;
};
GNGGAStruct gnggaData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          GNGGA
// ------------------------------------------------------------------------------------------------------------------------------

void clearDynamicGNGGA() {
  // ---------------------------------------------------------------------------------------
  // clear dynamic data while retaining data that may stay the same if running as a station
  // ---------------------------------------------------------------------------------------
  memset(gnggaData.solution_status, 0, 56);
  memset(gnggaData.satellite_count_gngga, 0, 56);
  memset(gnggaData.hdop_precision_factor, 0, 56);
  memset(gnggaData.geoidal, 0, 56);
  memset(gnggaData.geoidal_units, 0, 56);
  memset(gnggaData.differential_delay, 0, 56);
}

void clearGNGGA() {
  // -------------------------------
  // clear all data
  // -------------------------------
  memset(gnggaData.utc_time, 0, 56);
  memset(gnggaData.latitude, 0, 56);
  memset(gnggaData.latitude_hemisphere, 0, 56);
  memset(gnggaData.longitude, 0, 56);
  memset(gnggaData.longitude_hemisphere, 0, 56);
  memset(gnggaData.solution_status, 0, 56);
  memset(gnggaData.satellite_count_gngga, 0, 56);
  memset(gnggaData.hdop_precision_factor, 0, 56);
  memset(gnggaData.altitude, 0, 56);
  memset(gnggaData.altitude_units, 0, 56);
  memset(gnggaData.geoidal, 0, 56);
  memset(gnggaData.geoidal_units, 0, 56);
  memset(gnggaData.differential_delay, 0, 56);
}

void GNGGA() {
  // ---------------------
  // tokenize and validate
  // ---------------------
  gnggaData.count_valid_elements=0;
  memset(gnggaData.tag, 0, 56);
  serial1Data.iter_token=0;
  serial1Data.token=strtok(gnggaData.sentence, ",");
  while( serial1Data.token != NULL ) {
    if     (serial1Data.iter_token==0)    {if (strcmp(serial1Data.token, "$GNGGA")==0)                {strcpy(gnggaData.tag, serial1Data.token);                   gnggaData.count_valid_elements++;}                                            else {}}
    else if (serial1Data.iter_token ==1)  {if (val_utc_time(serial1Data.token)==true)                 {strcpy(gnggaData.utc_time, serial1Data.token);              gnggaData.count_valid_elements++; gnggaData.bad_utc_time=false;}              else {gnggaData.bad_utc_time_i++;              gnggaData.bad_utc_time=true;}}
    else if (serial1Data.iter_token ==2)  {if (val_latitude(serial1Data.token)==true)                 {strcpy(gnggaData.latitude, serial1Data.token);              gnggaData.count_valid_elements++; gnggaData.bad_latitude=false;}              else {gnggaData.bad_latitude_i++;              gnggaData.bad_latitude=true;}}
    else if (serial1Data.iter_token ==3)  {if (val_latitude_H(serial1Data.token)==true)               {strcpy(gnggaData.latitude_hemisphere, serial1Data.token);   gnggaData.count_valid_elements++; gnggaData.bad_latitude_hemisphere=false;}   else {gnggaData.bad_latitude_hemisphere_i++;   gnggaData.bad_latitude_hemisphere=true;}}
    else if (serial1Data.iter_token ==4)  {if (val_longitude(serial1Data.token)==true)                {strcpy(gnggaData.longitude, serial1Data.token);             gnggaData.count_valid_elements++; gnggaData.bad_longitude=false;}             else {gnggaData.bad_longitude_i++;             gnggaData.bad_longitude=true;}}
    else if (serial1Data.iter_token ==5)  {if (val_longitude_H(serial1Data.token)==true)              {strcpy(gnggaData.longitude_hemisphere, serial1Data.token);  gnggaData.count_valid_elements++; gnggaData.bad_longitude_hemisphere=false;}  else {gnggaData.bad_longitude_hemisphere_i++;  gnggaData.bad_longitude_hemisphere=true;}}
    else if (serial1Data.iter_token ==6)  {if (val_positioning_status_gngga(serial1Data.token)==true) {strcpy(gnggaData.solution_status, serial1Data.token);       gnggaData.count_valid_elements++; gnggaData.bad_solution_status=false;}       else {gnggaData.bad_solution_status_i++;       gnggaData.bad_solution_status=true;}}
    else if (serial1Data.iter_token ==7)  {if (val_satellite_count(serial1Data.token)==true)          {strcpy(gnggaData.satellite_count_gngga, serial1Data.token); gnggaData.count_valid_elements++; gnggaData.bad_satellite_count_gngga=false;} else {gnggaData.bad_satellite_count_gngga_i++; gnggaData.bad_satellite_count_gngga=true;}}
    else if (serial1Data.iter_token ==8)  {if (val_hdop_precision_factor(serial1Data.token)==true)    {strcpy(gnggaData.hdop_precision_factor, serial1Data.token); gnggaData.count_valid_elements++; gnggaData.bad_hdop_precision_factor=false;} else {gnggaData.bad_hdop_precision_factor_i++; gnggaData.bad_hdop_precision_factor=true;}}
    else if (serial1Data.iter_token ==9)  {if (val_altitude(serial1Data.token)==true)                 {strcpy(gnggaData.altitude, serial1Data.token);              gnggaData.count_valid_elements++; gnggaData.bad_altitude=false;}              else {gnggaData.bad_altitude_i++;              gnggaData.bad_altitude=true;}}
    else if (serial1Data.iter_token ==10) {if (val_altitude_units(serial1Data.token)==true)           {strcpy(gnggaData.altitude_units, serial1Data.token);        gnggaData.count_valid_elements++; gnggaData.bad_altitude_units=false;}        else {gnggaData.bad_altitude_units_i++;        gnggaData.bad_altitude_units=true;}}
    else if (serial1Data.iter_token ==11) {if (val_geoidal(serial1Data.token)==true)                  {strcpy(gnggaData.geoidal, serial1Data.token);               gnggaData.count_valid_elements++; gnggaData.bad_geoidal=false;}               else {gnggaData.bad_geoidal_i++;               gnggaData.bad_geoidal=true;}}
    else if (serial1Data.iter_token ==12) {if (val_geoidal_units(serial1Data.token)==true)            {strcpy(gnggaData.geoidal_units, serial1Data.token);         gnggaData.count_valid_elements++; gnggaData.bad_geoidal_units=false;}         else {gnggaData.bad_geoidal_units_i++;         gnggaData.bad_geoidal_units=true;}}
    else if (serial1Data.iter_token ==13) {if (val_differential_delay(serial1Data.token)==true)       {strcpy(gnggaData.differential_delay, serial1Data.token);    gnggaData.count_valid_elements++; gnggaData.bad_differential_delay=false;}    else {gnggaData.bad_differential_delay_i++;    gnggaData.bad_differential_delay=true;}}
    else if (serial1Data.iter_token ==14) {serial1Data.token=strtok(serial1Data.token, "*"); if (val_basestation_id(serial1Data.token)==true) {strcpy(gnggaData.id, serial1Data.token); gnggaData.count_valid_elements++; gnggaData.bad_id=false;} else {gnggaData.bad_id_i++;                  gnggaData.bad_id=true;}}
    else if (serial1Data.iter_token ==15) {gnggaData.count_valid_elements++;} // skip element: checksum (validated seperately)
    serial1Data.token=strtok(NULL, ",");
    serial1Data.iter_token++;
  }
  // ------------------
  // total bad elements
  // ------------------
  gnggaData.total_invalid_elements=
  gnggaData.bad_utc_time_i+
  gnggaData.bad_latitude_i+
  gnggaData.bad_latitude_hemisphere_i+
  gnggaData.bad_longitude_i+
  gnggaData.bad_longitude_hemisphere_i+
  gnggaData.bad_solution_status_i+
  gnggaData.bad_satellite_count_gngga_i+
  gnggaData.bad_hdop_precision_factor_i+
  gnggaData.bad_altitude_i+
  gnggaData.bad_altitude_units_i+
  gnggaData.bad_geoidal_i+
  gnggaData.bad_geoidal_units_i+
  gnggaData.bad_differential_delay_i+
  gnggaData.bad_id_i;
  // -------------------------------
  // reset counters (memory/ui safe)
  // -------------------------------
  if (gnggaData.total_invalid_elements>gnggaData.max_bad) {gnggaData.total_invalid_elements=0;}
  if (gnggaData.bad_utc_time_i>gnggaData.max_bad) {gnggaData.bad_utc_time_i=0;}
  if (gnggaData.bad_latitude_i>gnggaData.max_bad) {gnggaData.bad_latitude_i=0;}
  if (gnggaData.bad_latitude_hemisphere_i>gnggaData.max_bad) {gnggaData.bad_latitude_hemisphere_i=0;}
  if (gnggaData.bad_longitude_i>gnggaData.max_bad) {gnggaData.bad_longitude_i=0;}
  if (gnggaData.bad_longitude_hemisphere_i>gnggaData.max_bad) {gnggaData.bad_longitude_hemisphere_i=0;}
  if (gnggaData.bad_solution_status_i>gnggaData.max_bad) {gnggaData.bad_solution_status_i=0;}
  if (gnggaData.bad_satellite_count_gngga_i>gnggaData.max_bad) {gnggaData.bad_satellite_count_gngga_i=0;}
  if (gnggaData.bad_hdop_precision_factor_i>gnggaData.max_bad) {gnggaData.bad_hdop_precision_factor_i=0;}
  if (gnggaData.bad_altitude_i>gnggaData.max_bad) {gnggaData.bad_altitude_i=0;}
  if (gnggaData.bad_altitude_units_i>gnggaData.max_bad) {gnggaData.bad_altitude_units_i=0;}
  if (gnggaData.bad_geoidal_i>gnggaData.max_bad) {gnggaData.bad_geoidal_i=0;}
  if (gnggaData.bad_geoidal_units_i>gnggaData.max_bad) {gnggaData.bad_geoidal_units_i=0;}
  if (gnggaData.bad_differential_delay_i>gnggaData.max_bad) {gnggaData.bad_differential_delay_i=0;}
  // -------------------------------
  // debug
  // -------------------------------
  // systemData.debug=true;
  // if (systemData.debug==true) {
  //   Serial.println("[gnggaData.tag] "                    + String(gnggaData.tag));
  //   Serial.println("[gnggaData.utc_time] "               + String(gnggaData.utc_time)              + " (bad: " + String(gnggaData.bad_utc_time_i) + ")");
  //   Serial.println("[gnggaData.latitude] "               + String(gnggaData.latitude)              + " (bad: " + String(gnggaData.bad_latitude_i) + ")");
  //   Serial.println("[gnggaData.latitude_hemisphere] "    + String(gnggaData.latitude_hemisphere)   + " (bad: " + String(gnggaData.bad_latitude_hemisphere_i) + ")");
  //   Serial.println("[gnggaData.longitude] "              + String(gnggaData.longitude)             + " (bad: " + String(gnggaData.bad_longitude_i) + ")");
  //   Serial.println("[gnggaData.longitude_hemisphere] "   + String(gnggaData.longitude_hemisphere)  + " (bad: " + String(gnggaData.bad_longitude_hemisphere_i) + ")");
  //   Serial.println("[gnggaData.solution_status] "        + String(gnggaData.solution_status)       + " (bad: " + String(gnggaData.bad_solution_status_i) + ")");
  //   Serial.println("[gnggaData.satellite_count_gngga] "  + String(gnggaData.satellite_count_gngga) + " (bad: " + String(gnggaData.bad_satellite_count_gngga_i) + ")");
  //   Serial.println("[gnggaData.hdop_precision_factor] "  + String(gnggaData.hdop_precision_factor) + " (bad: " + String(gnggaData.bad_hdop_precision_factor_i) + ")");
  //   Serial.println("[gnggaData.altitude] "               + String(gnggaData.altitude)              + " (bad: " + String(gnggaData.bad_altitude_i) + ")");
  //   Serial.println("[gnggaData.altitude_units] "         + String(gnggaData.altitude_units)        + " (bad: " + String(gnggaData.bad_altitude_units_i) + ")");
  //   Serial.println("[gnggaData.geoidal] "                + String(gnggaData.geoidal)               + " (bad: " + String(gnggaData.bad_geoidal_i) + ")");
  //   Serial.println("[gnggaData.geoidal_units] "          + String(gnggaData.geoidal_units)         + " (bad: " + String(gnggaData.bad_geoidal_units_i) + ")");
  //   Serial.println("[gnggaData.differential_delay] "     + String(gnggaData.differential_delay)    + " (bad: " + String(gnggaData.bad_differential_delay_i) + ")");
  //   Serial.println("[gnggaData.id] "                     + String(gnggaData.id)                    + " (bad: " + String(gnggaData.bad_id_i) + ")");
  //   Serial.println("[gnggaData.count_valid_elements] "   + String(gnggaData.count_valid_elements));
  //   Serial.println("[gnggaData.total_invalid_elements] " + String(gnggaData.total_invalid_elements));
  // }
  // systemData.debug=false;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    DATA: GNRMC
// ------------------------------------------------------------------------------------------------------------------------------

struct GNRMCStruct {
  char sentence[200];
  char outsentence[200];
  char tag[56];                                                                                                                        // <0> Log header
  char utc_time[56];                     unsigned long bad_utc_time_i;                     bool bad_utc_time=true;                     // <1> UTC time, the format is hhmmss.sss
  char positioning_status[56];           unsigned long bad_positioning_status_i;           bool bad_positioning_status=true;           // <2> Positioning status, A=effective positioning, V=invalid positioning
  char latitude[56];                     unsigned long bad_latitude_i;                     bool bad_latitude=true;                     // <3> Latitude, the format is  ddmm.mmmmmmm
  char latitude_hemisphere[56];          unsigned long bad_latitude_hemisphere_i;          bool bad_latitude_hemisphere=true;          // <4> Latitude hemisphere, N or S (north latitude or south latitude)
  char longitude[56];                    unsigned long bad_longitude_i;                    bool bad_longitude=true;                    // <5> Longitude, the format is dddmm.mmmmmmm
  char longitude_hemisphere[56];         unsigned long bad_longitude_hemisphere_i;         bool bad_longitude_hemisphere=true;         // <6> Longitude hemisphere, E or W (east longitude or west longitude)
  char ground_speed[56];                 unsigned long bad_ground_speed_i;                 bool bad_ground_speed=true;                 // <7> Ground speed
  char ground_heading[56];               unsigned long bad_ground_heading_i;               bool bad_ground_heading=true;               // <8> Ground heading (take true north as the reference datum)
  char utc_date[56];                     unsigned long bad_utc_date_i;                     bool bad_utc_date=true;                     // <9> UTC date, the format is ddmmyy (day, month, year)
  char installation_angle[56];           unsigned long bad_installation_angle_i;           bool bad_installation_angle=true;           // <10> Magnetic declination (000.0~180.0 degrees)
  char installation_angle_direction[56]; unsigned long bad_installation_angle_direction_i; bool bad_installation_angle_direction=true; // <11> Magnetic declination direction, E (east) or W (west)
  char mode_indication[56];              unsigned long bad_mode_indication_i;              bool bad_mode_indication=true;              // <12> Mode indication (A=autonomous positioning, D=differential E=estimation, N=invalid data) */
  char check_sum[56];                    unsigned long bad_check_sum_i;                    bool bad_check_sum=true;                    // <13> XOR check value of all bytes starting from $ to *
  int count_valid_elements=0;            unsigned long bad_checksum_validity;              bool valid_checksum=false;                  // Checksum validity bool, counters and a counter for how many elements passed further testing (gnrmc count_valid_elements should result in 13)
  int max_valid_elements=13;
  int total_invalid_elements=0;
  int max_bad=9999;
};
GNRMCStruct gnrmcData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          GNRMC
// ------------------------------------------------------------------------------------------------------------------------------

void clearDynamicGNRMC() {
  // ---------------------------------------------------------------------------------------
  // clear dynamic data while retaining data that may stay the same if running as a station
  // ---------------------------------------------------------------------------------------
  memset(gnrmcData.positioning_status, 0, 56);
  memset(gnrmcData.ground_speed, 0, 56);
  memset(gnrmcData.ground_heading, 0, 56);
  memset(gnrmcData.utc_date, 0, 56);
  memset(gnrmcData.installation_angle, 0, 56);
  memset(gnrmcData.installation_angle_direction, 0, 56);
}

void clearGNRMC() {
  // -------------------------------
  // clear all data
  // -------------------------------
  memset(gnrmcData.utc_time, 0, 56);
  memset(gnrmcData.latitude, 0, 56);
  memset(gnrmcData.latitude_hemisphere, 0, 56);
  memset(gnrmcData.longitude, 0, 56);
  memset(gnrmcData.longitude_hemisphere, 0, 56);
  memset(gnrmcData.positioning_status, 0, 56);
  memset(gnrmcData.ground_speed, 0, 56);
  memset(gnrmcData.ground_heading, 0, 56);
  memset(gnrmcData.utc_date, 0, 56);
  memset(gnrmcData.installation_angle, 0, 56);
  memset(gnrmcData.installation_angle_direction, 0, 56);
} 

void GNRMC() {
  // ---------------------
  // tokenize and validate
  // ---------------------
  gnrmcData.count_valid_elements=0;
  serial1Data.iter_token=0;
  serial1Data.token=strtok(gnrmcData.sentence, ",");
  while( serial1Data.token != NULL ) {
    if      (serial1Data.iter_token==0)   {if (strcmp(serial1Data.token, "$GNRMC")==0)                    {strcpy(gnrmcData.tag, serial1Data.token);                          gnrmcData.count_valid_elements++;}}
    else if (serial1Data.iter_token ==1)  {if (val_utc_time(serial1Data.token)==true)                     {strcpy(gnrmcData.utc_time, serial1Data.token);                     gnrmcData.count_valid_elements++; gnrmcData.bad_utc_time=false;}                     else {gnrmcData.bad_utc_time_i++;                     gnrmcData.bad_utc_time=true;}}
    else if (serial1Data.iter_token ==2)  {if (val_positioning_status_gnrmc(serial1Data.token)==true)     {strcpy(gnrmcData.positioning_status, serial1Data.token);           gnrmcData.count_valid_elements++; gnrmcData.bad_positioning_status=false;}           else {gnrmcData.bad_positioning_status_i++;           gnrmcData.bad_positioning_status=true;}}
    else if (serial1Data.iter_token ==3)  {if (val_latitude(serial1Data.token)==true)                     {strcpy(gnrmcData.latitude, serial1Data.token);                     gnrmcData.count_valid_elements++; gnrmcData.bad_latitude=false;}                     else {gnrmcData.bad_latitude_i++;                     gnrmcData.bad_latitude=true;}}
    else if (serial1Data.iter_token ==4)  {if (val_latitude_H(serial1Data.token)==true)                   {strcpy(gnrmcData.latitude_hemisphere, serial1Data.token);          gnrmcData.count_valid_elements++; gnrmcData.bad_latitude_hemisphere=false;}          else {gnrmcData.bad_latitude_hemisphere_i++;          gnrmcData.bad_latitude_hemisphere=true;}}
    else if (serial1Data.iter_token ==5)  {if (val_longitude(serial1Data.token)==true)                    {strcpy(gnrmcData.longitude, serial1Data.token);                    gnrmcData.count_valid_elements++; gnrmcData.bad_longitude=false;}                    else {gnrmcData.bad_longitude_i++;                    gnrmcData.bad_longitude=true;}}
    else if (serial1Data.iter_token ==6)  {if (val_longitude_H(serial1Data.token)==true)                  {strcpy(gnrmcData.longitude_hemisphere, serial1Data.token);         gnrmcData.count_valid_elements++; gnrmcData.bad_longitude_hemisphere=false;}         else {gnrmcData.bad_longitude_hemisphere_i++;         gnrmcData.bad_longitude_hemisphere=true;}}
    else if (serial1Data.iter_token ==7)  {if (val_ground_speed(serial1Data.token)==true)                 {strcpy(gnrmcData.ground_speed, serial1Data.token);                 gnrmcData.count_valid_elements++; gnrmcData.bad_ground_speed=false;}                 else {gnrmcData.bad_ground_speed_i++;                 gnrmcData.bad_ground_speed=true;}}
    else if (serial1Data.iter_token ==8)  {if (val_ground_heading(serial1Data.token)==true)               {strcpy(gnrmcData.ground_heading, serial1Data.token);               gnrmcData.count_valid_elements++; gnrmcData.bad_ground_heading=false;}               else {gnrmcData.bad_ground_heading_i++;               gnrmcData.bad_ground_heading=true;}}
    else if (serial1Data.iter_token ==9)  {if (val_utc_date(serial1Data.token)==true)                     {strcpy(gnrmcData.utc_date, serial1Data.token);                     gnrmcData.count_valid_elements++; gnrmcData.bad_utc_date=false;}                     else {gnrmcData.bad_utc_date_i++;                     gnrmcData.bad_utc_date=true;}}
    else if (serial1Data.iter_token ==10) {if (val_installation_angle(serial1Data.token)==true)           {strcpy(gnrmcData.installation_angle, serial1Data.token);           gnrmcData.count_valid_elements++; gnrmcData.bad_installation_angle=false;}           else {gnrmcData.bad_installation_angle_i++;           gnrmcData.bad_installation_angle=true;}}
    else if (serial1Data.iter_token ==11) {if (val_installation_angle_direction(serial1Data.token)==true) {strcpy(gnrmcData.installation_angle_direction, serial1Data.token); gnrmcData.count_valid_elements++; gnrmcData.bad_installation_angle_direction=false;} else {gnrmcData.bad_installation_angle_direction_i++; gnrmcData.bad_installation_angle_direction=true;}}
    else if (serial1Data.iter_token ==12) {serial1Data.token=strtok(serial1Data.token, "*"); if (val_mode_indication(serial1Data.token)==true) {strcpy(gnrmcData.mode_indication, serial1Data.token); gnrmcData.count_valid_elements++; gnrmcData.bad_mode_indication=false;} else {gnrmcData.bad_mode_indication_i++; gnrmcData.bad_mode_indication=true;}}
    else if (serial1Data.iter_token ==13) {gnggaData.count_valid_elements++;} // skip element: checksum (validated seperately)
    serial1Data.token=strtok(NULL, ",");
    serial1Data.iter_token++;
  }
  // ------------------
  // total bad elements
  // ------------------
  gnrmcData.total_invalid_elements=
  gnrmcData.bad_utc_time_i+
  gnrmcData.bad_positioning_status_i+
  gnrmcData.bad_latitude_i+
  gnrmcData.bad_latitude_hemisphere_i+
  gnrmcData.bad_longitude_i+
  gnrmcData.bad_longitude_hemisphere_i+
  gnrmcData.bad_ground_speed_i+
  gnrmcData.bad_ground_heading_i+
  gnrmcData.bad_utc_date_i+
  gnrmcData.bad_installation_angle_i+
  gnrmcData.bad_installation_angle_direction_i+
  gnrmcData.bad_mode_indication_i;
  // -------------------------------
  // reset counters (memory/ui safe)
  // -------------------------------
  if (gnrmcData.total_invalid_elements>gnrmcData.max_bad) {gnrmcData.total_invalid_elements=0;}
  if (gnrmcData.bad_utc_time_i>gnrmcData.max_bad) {gnrmcData.bad_utc_time_i=0;}
  if (gnrmcData.bad_positioning_status_i>gnrmcData.max_bad) {gnrmcData.bad_positioning_status=0;}
  if (gnrmcData.bad_latitude_i>gnrmcData.max_bad) {gnrmcData.bad_latitude_i=0;}
  if (gnrmcData.bad_latitude_hemisphere_i>gnrmcData.max_bad) {gnrmcData.bad_latitude_hemisphere_i=0;}
  if (gnrmcData.bad_longitude_i>gnrmcData.max_bad) {gnrmcData.bad_longitude_i=0;}
  if (gnrmcData.bad_longitude_hemisphere_i>gnrmcData.max_bad) {gnrmcData.bad_longitude_hemisphere_i=0;}
  if (gnrmcData.bad_ground_speed_i>gnrmcData.max_bad) {gnrmcData.bad_ground_speed_i=0;}
  if (gnrmcData.bad_ground_heading_i>gnrmcData.max_bad) {gnrmcData.bad_ground_heading_i=0;}
  if (gnrmcData.bad_utc_date_i>gnrmcData.max_bad) {gnrmcData.bad_utc_date_i=0;}
  if (gnrmcData.bad_installation_angle_i>gnrmcData.max_bad) {gnrmcData.bad_installation_angle_i=0;}
  if (gnrmcData.bad_installation_angle_direction_i>gnrmcData.max_bad) {gnrmcData.bad_installation_angle_direction_i=0;}
  if (gnrmcData.bad_mode_indication_i>gnrmcData.max_bad) {gnrmcData.bad_mode_indication_i=0;}
  // -------------------------------
  // debug
  // -------------------------------
  // systemData.debug=true;
  // if (systemData.debug==true) {
  //   Serial.println("[gnrmcData.tag] "                          + String(gnrmcData.tag));
  //   Serial.println("[gnrmcData.utc_time] "                     + String(gnrmcData.utc_time)                     + " (bad: " + String(gnrmcData.bad_utc_time_i) + ")");
  //   Serial.println("[gnrmcData.positioning_status] "           + String(gnrmcData.positioning_status)           + " (bad: " + String(gnrmcData.bad_positioning_status) + ")");
  //   Serial.println("[gnrmcData.latitude] "                     + String(gnrmcData.latitude)                     + " (bad: " + String(gnrmcData.bad_latitude_i) + ")");
  //   Serial.println("[gnrmcData.latitude_hemisphere] "          + String(gnrmcData.latitude_hemisphere)          + " (bad: " + String(gnrmcData.bad_latitude_hemisphere_i) + ")");
  //   Serial.println("[gnrmcData.longitude] "                    + String(gnrmcData.longitude)                    + " (bad: " + String(gnrmcData.bad_longitude_i) + ")");
  //   Serial.println("[gnrmcData.longitude_hemisphere] "         + String(gnrmcData.longitude_hemisphere)         + " (bad: " + String(gnrmcData.bad_longitude_hemisphere_i) + ")");
  //   Serial.println("[gnrmcData.ground_speed] "                 + String(gnrmcData.ground_speed)                 + " (bad: " + String(gnrmcData.bad_ground_speed_i) + ")");
  //   Serial.println("[gnrmcData.ground_heading] "               + String(gnrmcData.ground_heading)               + " (bad: " + String(gnrmcData.bad_ground_heading_i) + ")");
  //   Serial.println("[gnrmcData.utc_date] "                     + String(gnrmcData.utc_date)                     + " (bad: " + String(gnrmcData.bad_utc_date_i) + ")");
  //   Serial.println("[gnrmcData.installation_angle] "           + String(gnrmcData.installation_angle)           + " (bad: " + String(gnrmcData.bad_installation_angle_i) + ")");
  //   Serial.println("[gnrmcData.installation_angle_direction] " + String(gnrmcData.installation_angle_direction) + " (bad: " + String(gnrmcData.bad_installation_angle_direction_i) + ")");
  //   Serial.println("[gnrmcData.mode_indication] "              + String(gnrmcData.mode_indication)              + " (bad: " + String(gnrmcData.bad_mode_indication_i) + ")");
  //   Serial.println("[gnrmcData.count_valid_elements] "         + String(gnrmcData.count_valid_elements));
  //   Serial.println("[gnrmcData.total_invalid_elements] "       + String(gnrmcData.total_invalid_elements));
  // }
  // systemData.debug=false;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    DATA: GPATT
// ------------------------------------------------------------------------------------------------------------------------------

struct GPATTStruct {
  char sentence[200];
  char outsentence[200];
  char tag[56];                                                                                     // <0> Log header
  char pitch[56];             unsigned long bad_pitch_i;            bool bad_pitch=true;            // <1> pitch angle
  char angle_channel_0[56];   unsigned long bad_angle_channel_0_i;  bool bad_angle_channel_0=true;  // <2> P
  char roll[56];              unsigned long bad_roll_i;             bool bad_roll=true;             // <3> Roll angle
  char angle_channel_1[56];   unsigned long bad_angle_channel_1_i;  bool bad_angle_channel_1=true;  // <4> R
  char yaw[56];               unsigned long bad_yaw_i;              bool bad_yaw=true;              // <5> Yaw angle
  char angle_channel_2[56];   unsigned long bad_angle_channel_2_i;  bool bad_angle_channel_2=true;  // <6> Y
  char software_version[56];  unsigned long bad_software_version_i; bool bad_software_version=true; // <7> software verion
  char version_channel[56];   unsigned long bad_version_channel_i;  bool bad_version_channel=true;  // <8> S
  char product_id[56];        unsigned long bad_product_id_i;       bool bad_product_id=true;       // <9> Product ID: 96 bit unique ID
  char id_channel[56];        unsigned long bad_id_channel_i;       bool bad_id_channel=true;       // <10> ID 
  char ins[56];               unsigned long bad_ins_i;              bool bad_ins=true;              // <11> INS Default open inertial navigation system
  char ins_channel[56];       unsigned long bad_ins_channel_i;      bool bad_ins_channel=true;      // <12> whether inertial navigation open
  char hardware_version[56];  unsigned long bad_hardware_version_i; bool bad_hardware_version=true; // <13> Named after master chip
  char run_state_flag[56];    unsigned long bad_run_state_flag_i;   bool bad_run_state_flag=true;   // <14> Algorithm status flag: 1->3
  char mis_angle_num[56];     unsigned long bad_mis_angle_num_i;    bool bad_mis_angle_num=true;    // <15> number of Installation
  char custom_logo_0[56];     unsigned long bad_custom_logo_0_i;    bool bad_custom_logo_0=true;    // <16>
  char custom_logo_1[56];     unsigned long bad_custom_logo_1_i;    bool bad_custom_logo_1=true;    // <17>
  char custom_logo_2[56];     unsigned long bad_custom_logo_2_i;    bool bad_custom_logo_2=true;    // <18>
  char static_flag[56];       unsigned long bad_static_flag_i;      bool bad_static_flag=true;      // <19> 1:Static 0：dynamic
  char user_code[56];         unsigned long bad_user_code_i;        bool bad_user_code=true;        // <20> 1：Normal user X：Customuser
  char gst_data[56];          unsigned long bad_gst_data_i;         bool bad_gst_data=true;         // <21> User satellite accuracy
  char line_flag[56];         unsigned long bad_line_flag_i;        bool bad_line_flag=true;        // <22> 1：straight driving，0：curve driving
  char custom_logo_3[56];     unsigned long bad_custom_logo_3_i;    bool bad_custom_logo_3=true;    // <23>
  char mis_att_flag[56];      unsigned long bad_mis_att_flag_i;     bool bad_mis_att_flag=true;     // <24> 
  char imu_kind[56];          unsigned long bad_imu_kind_i;         bool bad_imu_kind=true;         // <25> Sensor Type: 0->BIms055; 1->BMI160; 2->LSM6DS3TR-C; 3->LSM6DSOW 4->ICM-40607; 5->ICM-40608 6->ICM-42670; 7->LSM6DSR
  char ubi_car_kind[56];      unsigned long bad_ubi_car_kind_i;     bool bad_ubi_car_kind=true;     // <26> 1: small car, 2: big car
  char mileage[56];           unsigned long bad_mileage_i;          bool bad_mileage=true;          // <27> kilometers: max 9999 kilometers
  char custom_logo_4[56];     unsigned long bad_custom_logo_4_i;    bool bad_custom_logo_4=true;    // <28>
  char custom_logo_5[56];     unsigned long bad_custom_logo_5_i;    bool bad_custom_logo_5=true;    // <29>
  char run_inetial_flag[56];  unsigned long bad_run_inetial_flag_i; bool bad_run_inetial_flag=true; // <30> 1->4
  char custom_logo_6[56];     unsigned long bad_custom_logo_6_i;    bool bad_custom_logo_6=true;    // <31>
  char custom_logo_7[56];     unsigned long bad_custom_logo_7_i;    bool bad_custom_logo_7=true;    // <32>
  char custom_logo_8[56];     unsigned long bad_custom_logo_8_i;    bool bad_custom_logo_8=true;    // <33>
  char custom_logo_9[56];     unsigned long bad_custom_logo_9_i;    bool bad_custom_logo_9=true;    // <34>
  char speed_enable[56];      unsigned long bad_speed_enable_i;     bool bad_speed_enable=true;     // <35> 
  char custom_logo_10[56];    unsigned long bad_custom_logo_10_i;   bool bad_custom_logo_10=true;   // <36>
  char custom_logo_11[56];    unsigned long bad_custom_logo_11_i;   bool bad_custom_logo_11=true;   // <37>
  char speed_num[56];         unsigned long bad_speed_num_i;        bool bad_speed_num=true;        // <38> 1：fixed setting，0：Self adaptive installation
  char scalable[56];          unsigned long bad_scalable_i;         bool bad_scalable=true;         // <39> 
  char check_sum[56];         unsigned long bad_check_sum_i;        bool bad_check_sum=true;        // <40> XOR check value of all bytes starting from $ to *
  int count_valid_elements=0; unsigned long bad_checksum_validity;  bool valid_checksum=false;      // Checksum validity bool, counters and a counter for how many elements passed further testing (gnrmc count_valid_elements should result in 39)
  int max_valid_elements=39;
  int total_invalid_elements=0;
  int max_bad=9999;
};
GPATTStruct gpattData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          GPATT
// ------------------------------------------------------------------------------------------------------------------------------

void clearGPATT() {
  // -------------------------------
  // clear all data
  // -------------------------------
  memset(gpattData.pitch, 0, 56);
  memset(gpattData.angle_channel_0, 0, 56);
  memset(gpattData.roll, 0, 56);
  memset(gpattData.angle_channel_1, 0, 56);
  memset(gpattData.yaw, 0, 56);
  memset(gpattData.angle_channel_2, 0, 56);
  memset(gpattData.software_version, 0, 56);
  memset(gpattData.version_channel, 0, 56);
  memset(gpattData.product_id, 0, 56);
  memset(gpattData.id_channel, 0, 56);
  memset(gpattData.ins, 0, 56);
  memset(gpattData.ins_channel, 0, 56);
  memset(gpattData.hardware_version, 0, 56);
  memset(gpattData.run_state_flag, 0, 56);
  memset(gpattData.mis_angle_num, 0, 56);
  memset(gpattData.custom_logo_0, 0, 56);
  memset(gpattData.custom_logo_1, 0, 56);
  memset(gpattData.custom_logo_2, 0, 56);
  memset(gpattData.static_flag, 0, 56);
  memset(gpattData.user_code, 0, 56);
  memset(gpattData.gst_data, 0, 56);
  memset(gpattData.line_flag, 0, 56);
  memset(gpattData.custom_logo_3, 0, 56);
  memset(gpattData.mis_att_flag, 0, 56);
  memset(gpattData.imu_kind, 0, 56);
  memset(gpattData.ubi_car_kind, 0, 56);
  memset(gpattData.mileage, 0, 56);
  memset(gpattData.custom_logo_4, 0, 56);
  memset(gpattData.custom_logo_5, 0, 56);
  memset(gpattData.run_inetial_flag, 0, 56);
  memset(gpattData.custom_logo_6, 0, 56);
  memset(gpattData.custom_logo_7, 0, 56);
  memset(gpattData.custom_logo_8, 0, 56);
  memset(gpattData.custom_logo_9, 0, 56);
  memset(gpattData.speed_enable, 0, 56);
  memset(gpattData.custom_logo_10, 0, 56); 
  memset(gpattData.custom_logo_11, 0, 56);
  memset(gpattData.speed_num, 0, 56);
}

void GPATT() {
  // ---------------------
  // tokenize and validate
  // ---------------------
  gpattData.count_valid_elements=0;
  serial1Data.iter_token=0;
  serial1Data.token=strtok(gpattData.sentence, ",");
  while( serial1Data.token != NULL ) { 
    if      (serial1Data.iter_token==0) {if (strcmp(serial1Data.token, "$GPATT")==0)               {strcpy(gpattData.tag, serial1Data.token);              gpattData.count_valid_elements++;}}
    else if (serial1Data.iter_token==1) {if (val_pitch_gpatt(serial1Data.token)==true)             {strcpy(gpattData.pitch, serial1Data.token);            gpattData.count_valid_elements++; gpattData.bad_pitch=false;}            else {gpattData.bad_pitch_i++;            gpattData.bad_pitch=true;}}
    else if (serial1Data.iter_token==2) {if (val_angle_channle_p_gpatt(serial1Data.token)==true)   {strcpy(gpattData.angle_channel_0, serial1Data.token);  gpattData.count_valid_elements++; gpattData.bad_angle_channel_0=false;}  else {gpattData.bad_angle_channel_0_i++;  gpattData.bad_angle_channel_0=true;}}
    else if (serial1Data.iter_token==3) {if (val_roll_gpatt(serial1Data.token)==true)              {strcpy(gpattData.roll, serial1Data.token);             gpattData.count_valid_elements++; gpattData.bad_roll=false;}             else {gpattData.bad_roll_i++;             gpattData.bad_roll=true;}}
    else if (serial1Data.iter_token==4) {if (val_angle_channle_r_gpatt(serial1Data.token)==true)   {strcpy(gpattData.angle_channel_1, serial1Data.token);  gpattData.count_valid_elements++; gpattData.bad_angle_channel_1=false;}  else {gpattData.bad_angle_channel_1_i++;  gpattData.bad_angle_channel_1=true;}}
    else if (serial1Data.iter_token==5) {if (val_yaw_gpatt(serial1Data.token)==true)               {strcpy(gpattData.yaw, serial1Data.token);              gpattData.count_valid_elements++; gpattData.bad_yaw=false;}              else {gpattData.bad_yaw_i++;              gpattData.bad_yaw=true;}}
    else if (serial1Data.iter_token==6) {if (val_angle_channle_y_gpatt(serial1Data.token)==true)   {strcpy(gpattData.angle_channel_2, serial1Data.token);  gpattData.count_valid_elements++; gpattData.bad_angle_channel_2=false;}  else {gpattData.bad_angle_channel_2_i++;  gpattData.bad_angle_channel_2=true;}}
    else if (serial1Data.iter_token==7) {if (val_software_version_gpatt(serial1Data.token)==true)  {strcpy(gpattData.software_version, serial1Data.token); gpattData.count_valid_elements++; gpattData.bad_software_version=false;} else {gpattData.bad_software_version_i++; gpattData.bad_software_version=true;}}
    else if (serial1Data.iter_token==8) {if (val_version_channel_s_gpatt(serial1Data.token)==true) {strcpy(gpattData.version_channel, serial1Data.token);  gpattData.count_valid_elements++; gpattData.bad_version_channel=false;}  else {gpattData.bad_version_channel_i++;  gpattData.bad_version_channel=true;}}
    else if (serial1Data.iter_token==9) {if (val_product_id_gpatt(serial1Data.token)==true)        {strcpy(gpattData.product_id, serial1Data.token);       gpattData.count_valid_elements++; gpattData.bad_product_id=false;}       else {gpattData.bad_product_id_i++;       gpattData.bad_product_id=true;}}
    else if (serial1Data.iter_token==10) {if (val_id_channel_gpatt(serial1Data.token)==true)       {strcpy(gpattData.id_channel, serial1Data.token);       gpattData.count_valid_elements++; gpattData.bad_id_channel=false;}       else {gpattData.bad_id_channel_i++;       gpattData.bad_id_channel=true;}}
    else if (serial1Data.iter_token==11) {if (val_ins_gpatt(serial1Data.token)==true)              {strcpy(gpattData.ins, serial1Data.token);              gpattData.count_valid_elements++; gpattData.bad_ins=false;}              else {gpattData.bad_ins_i++;              gpattData.bad_ins=true;}}
    else if (serial1Data.iter_token==12) {if (val_ins_channel_gpatt(serial1Data.token)==true)      {strcpy(gpattData.ins_channel, serial1Data.token);      gpattData.count_valid_elements++; gpattData.bad_ins_channel=false;}      else {gpattData.bad_ins_channel_i++;      gpattData.bad_ins_channel=true;}}
    else if (serial1Data.iter_token==13) {if (val_hardware_version_gpatt(serial1Data.token)==true) {strcpy(gpattData.hardware_version, serial1Data.token); gpattData.count_valid_elements++; gpattData.bad_hardware_version=false;} else {gpattData.bad_hardware_version_i++; gpattData.bad_hardware_version=true;}}
    else if (serial1Data.iter_token==14) {if (val_run_state_flag_gpatt(serial1Data.token)==true)   {strcpy(gpattData.run_state_flag, serial1Data.token);   gpattData.count_valid_elements++; gpattData.bad_run_state_flag=false;}   else {gpattData.bad_run_state_flag_i++;   gpattData.bad_run_state_flag=true;}}
    else if (serial1Data.iter_token==15) {if (val_mis_angle_num_gpatt(serial1Data.token)==true)    {strcpy(gpattData.mis_angle_num, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_mis_angle_num=false;}    else {gpattData.bad_mis_angle_num_i++;    gpattData.bad_mis_angle_num=true;}}
    else if (serial1Data.iter_token==16) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_0, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_0=false;}    else {gpattData.bad_custom_logo_0_i++;    gpattData.bad_custom_logo_0=true;}}
    else if (serial1Data.iter_token==17) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_1, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_1=false;}    else {gpattData.bad_custom_logo_1_i++;    gpattData.bad_custom_logo_1=true;}}
    else if (serial1Data.iter_token==18) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_2, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_2=false;}    else {gpattData.bad_custom_logo_2_i++;    gpattData.bad_custom_logo_2=true;}}
    else if (serial1Data.iter_token==19) {if (val_static_flag_gpatt(serial1Data.token)==true)      {strcpy(gpattData.static_flag, serial1Data.token);      gpattData.count_valid_elements++; gpattData.bad_static_flag=false;}      else {gpattData.bad_static_flag_i++;      gpattData.bad_static_flag=true;}}
    else if (serial1Data.iter_token==20) {if (val_user_code_gpatt(serial1Data.token)==true)        {strcpy(gpattData.user_code, serial1Data.token);        gpattData.count_valid_elements++; gpattData.bad_user_code=false;}        else {gpattData.bad_user_code_i++;        gpattData.bad_user_code=true;}}
    else if (serial1Data.iter_token==21) {if (val_gst_data_gpatt(serial1Data.token)==true)         {strcpy(gpattData.gst_data, serial1Data.token);         gpattData.count_valid_elements++; gpattData.bad_gst_data=false;}         else {gpattData.bad_gst_data_i++;         gpattData.bad_gst_data=true;}}
    else if (serial1Data.iter_token==22) {if (val_line_flag_gpatt(serial1Data.token)==true)        {strcpy(gpattData.line_flag, serial1Data.token);        gpattData.count_valid_elements++; gpattData.bad_line_flag=false;}        else {gpattData.bad_line_flag_i++;        gpattData.bad_line_flag=true;}}
    else if (serial1Data.iter_token==23) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_3, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_3=false;}    else {gpattData.bad_custom_logo_3_i++;    gpattData.bad_custom_logo_3=true;}}
    else if (serial1Data.iter_token==24) {if (val_mis_att_flag_gpatt(serial1Data.token)==true)     {strcpy(gpattData.mis_att_flag, serial1Data.token);     gpattData.count_valid_elements++; gpattData.bad_mis_att_flag=false;}     else {gpattData.bad_mis_att_flag_i++;     gpattData.bad_mis_att_flag=true;}}
    else if (serial1Data.iter_token==25) {if (val_imu_kind_gpatt(serial1Data.token)==true)         {strcpy(gpattData.imu_kind, serial1Data.token);         gpattData.count_valid_elements++; gpattData.bad_imu_kind=false;}         else {gpattData.bad_imu_kind_i++;         gpattData.bad_imu_kind=true;}}
    else if (serial1Data.iter_token==26) {if (val_ubi_car_kind_gpatt(serial1Data.token)==true)     {strcpy(gpattData.ubi_car_kind, serial1Data.token);     gpattData.count_valid_elements++; gpattData.bad_ubi_car_kind=false;}     else {gpattData.bad_ubi_car_kind_i++;     gpattData.bad_ubi_car_kind=true;}}
    else if (serial1Data.iter_token==27) {if (val_mileage_gpatt(serial1Data.token)==true)          {strcpy(gpattData.mileage, serial1Data.token);          gpattData.count_valid_elements++; gpattData.bad_mileage=false;}          else {gpattData.bad_mileage_i++;          gpattData.bad_mileage=true;}}
    else if (serial1Data.iter_token==28) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_4, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_4=false;}    else {gpattData.bad_custom_logo_4_i++;    gpattData.bad_custom_logo_4=true;}}
    else if (serial1Data.iter_token==29) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_5, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_5=false;}    else {gpattData.bad_custom_logo_5_i++;    gpattData.bad_custom_logo_5=true;}}
    else if (serial1Data.iter_token==30) {if (val_run_inetial_flag_gpatt(serial1Data.token)==true) {strcpy(gpattData.run_inetial_flag, serial1Data.token); gpattData.count_valid_elements++; gpattData.bad_run_inetial_flag=false;} else {gpattData.bad_run_inetial_flag_i++; gpattData.bad_run_inetial_flag=true;}}
    else if (serial1Data.iter_token==31) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_6, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_6=false;}    else {gpattData.bad_custom_logo_6_i++;    gpattData.bad_custom_logo_6=true;}}
    else if (serial1Data.iter_token==32) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_7, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_7=false;}    else {gpattData.bad_custom_logo_7_i++;    gpattData.bad_custom_logo_7=true;}}
    else if (serial1Data.iter_token==33) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_8, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_8=false;}    else {gpattData.bad_custom_logo_8_i++;    gpattData.bad_custom_logo_8=true;}}
    else if (serial1Data.iter_token==34) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_9, serial1Data.token);    gpattData.count_valid_elements++; gpattData.bad_custom_logo_9=false;}    else {gpattData.bad_custom_logo_9_i++;    gpattData.bad_custom_logo_9=true;}}
    else if (serial1Data.iter_token==35) {if (val_speed_enable_gpatt(serial1Data.token)==true)     {strcpy(gpattData.speed_enable, serial1Data.token);     gpattData.count_valid_elements++; gpattData.bad_speed_enable=false;}     else {gpattData.bad_speed_enable_i++;     gpattData.bad_speed_enable=true;}}
    else if (serial1Data.iter_token==36) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_10, serial1Data.token);   gpattData.count_valid_elements++; gpattData.bad_custom_logo_10=false;}   else {gpattData.bad_custom_logo_10_i++;   gpattData.bad_custom_logo_10=true;}}
    else if (serial1Data.iter_token==37) {if (val_custom_flag(serial1Data.token)==true)            {strcpy(gpattData.custom_logo_11, serial1Data.token);   gpattData.count_valid_elements++; gpattData.bad_custom_logo_11=false;}   else {gpattData.bad_custom_logo_11_i++;   gpattData.bad_custom_logo_11=true;}}
    else if (serial1Data.iter_token==38) {if (val_speed_num_gpatt(serial1Data.token)==true)        {strcpy(gpattData.speed_num, serial1Data.token);        gpattData.count_valid_elements++; gpattData.bad_speed_num=false;}        else {gpattData.bad_speed_num_i++;        gpattData.bad_speed_num=true;}}
    else if (serial1Data.iter_token ==39) {serial1Data.token=strtok(serial1Data.token, "*"); gnggaData.count_valid_elements++;} // skip element: scalable
    else if (serial1Data.iter_token ==40) {gnggaData.count_valid_elements++;} // skip element: checksum (validated seperately)
    serial1Data.token=strtok(NULL, ",");
    serial1Data.iter_token++;
  }
  // ------------------
  // total bad elements
  // ------------------
  gpattData.total_invalid_elements=
  gpattData.bad_pitch_i+
  gpattData.bad_angle_channel_0_i+
  gpattData.bad_roll_i+
  gpattData.bad_angle_channel_1_i+
  gpattData.bad_yaw_i+
  gpattData.bad_angle_channel_2_i+
  gpattData.bad_software_version_i+
  gpattData.bad_version_channel_i+
  gpattData.bad_product_id_i+
  gpattData.bad_id_channel_i+
  gpattData.bad_ins_i+
  gpattData.bad_ins_channel_i+
  gpattData.bad_hardware_version_i+
  gpattData.bad_run_state_flag_i+
  gpattData.bad_mis_angle_num_i+
  gpattData.bad_custom_logo_0_i+
  gpattData.bad_custom_logo_1_i+
  gpattData.bad_custom_logo_2_i+
  gpattData.bad_static_flag_i+
  gpattData.bad_user_code_i+
  gpattData.bad_gst_data_i+
  gpattData.bad_line_flag_i+
  gpattData.bad_custom_logo_3_i+
  gpattData.bad_mis_att_flag_i+
  gpattData.bad_imu_kind_i+
  gpattData.bad_ubi_car_kind_i+
  gpattData.bad_mileage_i+
  gpattData.bad_custom_logo_4_i+
  gpattData.bad_custom_logo_5_i+
  gpattData.bad_run_inetial_flag_i+
  gpattData.bad_custom_logo_6_i+
  gpattData.bad_custom_logo_7_i+
  gpattData.bad_custom_logo_8_i+
  gpattData.bad_custom_logo_9_i+
  gpattData.bad_speed_enable_i+
  gpattData.bad_custom_logo_10_i+
  gpattData.bad_custom_logo_11_i+
  gpattData.bad_speed_num_i;
  // -------------------------------
  // debug
  // -------------------------------
  // systemData.debug=true;
  // if (systemData.debug==true) {
  //   Serial.println("[gpattData.tag] "                    + String(gpattData.tag));
  //   Serial.println("[gpattData.pitch] "                  + String(gpattData.pitch)               + " (bad: " + String(gpattData.bad_pitch_i) + ")");
  //   Serial.println("[gpattData.angle_channel_0] "        + String(gpattData.angle_channel_0)     + " (bad: " + String(gpattData.bad_angle_channel_0_i) + ")");
  //   Serial.println("[gpattData.roll] "                   + String(gpattData.roll)                + " (bad: " + String(gpattData.bad_roll_i) + ")");
  //   Serial.println("[gpattData.angle_channel_1] "        + String(gpattData.angle_channel_1)     + " (bad: " + String(gpattData.bad_angle_channel_1_i) + ")");
  //   Serial.println("[gpattData.yaw] "                    + String(gpattData.yaw)                 + " (bad: " + String(gpattData.bad_yaw_i) + ")");
  //   Serial.println("[gpattData.angle_channel_2] "        + String(gpattData.angle_channel_2)     + " (bad: " + String(gpattData.bad_angle_channel_2_i) + ")");
  //   Serial.println("[gpattData.software_version] "       + String(gpattData.software_version)    + " (bad: " + String(gpattData.bad_software_version_i) + ")");
  //   Serial.println("[gpattData.version_channel] "        + String(gpattData.version_channel)     + " (bad: " + String(gpattData.bad_version_channel_i) + ")");
  //   Serial.println("[gpattData.product_id] "             + String(gpattData.product_id)          + " (bad: " + String(gpattData.bad_product_id_i) + ")");
  //   Serial.println("[gpattData.id_channel] "             + String(gpattData.id_channel)          + " (bad: " + String(gpattData.bad_id_channel_i) + ")");
  //   Serial.println("[gpattData.ins] "                    + String(gpattData.ins)                 + " (bad: " + String(gpattData.bad_ins_i) + ")");
  //   Serial.println("[gpattData.ins_channel] "            + String(gpattData.ins_channel)         + " (bad: " + String(gpattData.bad_ins_channel_i) + ")");
  //   Serial.println("[gpattData.hardware_version] "       + String(gpattData.hardware_version)    + " (bad: " + String(gpattData.bad_hardware_version_i) + ")");
  //   Serial.println("[gpattData.run_state_flag] "         + String(gpattData.run_state_flag)      + " (bad: " + String(gpattData.bad_run_state_flag_i) + ")");
  //   Serial.println("[gpattData.mis_angle_num] "          + String(gpattData.mis_angle_num)       + " (bad: " + String(gpattData.bad_mis_angle_num_i) + ")");
  //   Serial.println("[gpattData.custom_logo_0] "          + String(gpattData.custom_logo_0)       + " (bad: " + String(gpattData.bad_custom_logo_0_i) + ")");
  //   Serial.println("[gpattData.custom_logo_1] "          + String(gpattData.custom_logo_1)       + " (bad: " + String(gpattData.bad_custom_logo_1_i) + ")");
  //   Serial.println("[gpattData.custom_logo_2] "          + String(gpattData.custom_logo_2)       + " (bad: " + String(gpattData.bad_custom_logo_2_i) + ")");
  //   Serial.println("[gpattData.static_flag] "            + String(gpattData.static_flag)         + " (bad: " + String(gpattData.bad_static_flag_i) + ")");
  //   Serial.println("[gpattData.user_code] "              + String(gpattData.user_code)           + " (bad: " + String(gpattData.bad_user_code_i) + ")");
  //   Serial.println("[gpattData.gst_data] "               + String(gpattData.gst_data)            + " (bad: " + String(gpattData.bad_gst_data_i) + ")");
  //   Serial.println("[gpattData.line_flag] "              + String(gpattData.line_flag)           + " (bad: " + String(gpattData.bad_line_flag_i) + ")");
  //   Serial.println("[gpattData.custom_logo_3] "          + String(gpattData.custom_logo_3)       + " (bad: " + String(gpattData.bad_custom_logo_3_i) + ")");
  //   Serial.println("[gpattData.mis_att_flag] "           + String(gpattData.mis_att_flag)        + " (bad: " + String(gpattData.bad_mis_att_flag_i) + ")");
  //   Serial.println("[gpattData.imu_kind] "               + String(gpattData.imu_kind)            + " (bad: " + String(gpattData.bad_imu_kind_i) + ")");
  //   Serial.println("[gpattData.ubi_car_kind] "           + String(gpattData.ubi_car_kind)        + " (bad: " + String(gpattData.bad_ubi_car_kind_i) + ")");
  //   Serial.println("[gpattData.mileage] "                + String(gpattData.mileage)             + " (bad: " + String(gpattData.bad_mileage_i) + ")");
  //   Serial.println("[gpattData.custom_logo_4] "          + String(gpattData.custom_logo_4)       + " (bad: " + String(gpattData.bad_custom_logo_4_i) + ")");
  //   Serial.println("[gpattData.custom_logo_5] "          + String(gpattData.custom_logo_5)       + " (bad: " + String(gpattData.bad_custom_logo_5_i) + ")");
  //   Serial.println("[gpattData.run_inetial_flag] "       + String(gpattData.run_inetial_flag)    + " (bad: " + String(gpattData.bad_run_inetial_flag_i) + ")");
  //   Serial.println("[gpattData.custom_logo_6] "          + String(gpattData.custom_logo_6)       + " (bad: " + String(gpattData.bad_custom_logo_6_i) + ")");
  //   Serial.println("[gpattData.custom_logo_7] "          + String(gpattData.custom_logo_7)       + " (bad: " + String(gpattData.bad_custom_logo_7_i) + ")");
  //   Serial.println("[gpattData.custom_logo_8] "          + String(gpattData.custom_logo_8)       + " (bad: " + String(gpattData.bad_custom_logo_8_i) + ")");
  //   Serial.println("[gpattData.custom_logo_9] "          + String(gpattData.custom_logo_9)       + " (bad: " + String(gpattData.bad_custom_logo_9_i) + ")");
  //   Serial.println("[gpattData.speed_enable] "           + String(gpattData.speed_enable)        + " (bad: " + String(gpattData.bad_speed_enable_i) + ")");
  //   Serial.println("[gpattData.custom_logo_10] "         + String(gpattData.custom_logo_10)      + " (bad: " + String(gpattData.bad_custom_logo_10_i) + ")");
  //   Serial.println("[gpattData.custom_logo_11] "         + String(gpattData.custom_logo_11)      + " (bad: " + String(gpattData.bad_custom_logo_11_i) + ")");
  //   Serial.println("[gpattData.speed_num] "              + String(gpattData.speed_num)           + " (bad: " + String(gpattData.bad_speed_num_i) + ")");
  //   Serial.println("[gpattData.count_valid_elements] "   + String(gpattData.count_valid_elements));
  //   Serial.println("[gpattData.total_invalid_elements] " + String(gpattData.total_invalid_elements));
  // }
  // systemData.debug=false;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    DATA: SATIO
// ------------------------------------------------------------------------------------------------------------------------------

struct SatDatatruct {
  int checksum_i;                                                // checksum int
  char satio_sentence[200];                                      // buffer
  char satDataTag[56]                ="$SATIO";                  // satio sentence tag
  bool convert_coordinates           =true;                      // enables/disables coordinate conversion to degrees
  char coordinate_conversion_mode[56]="GNGGA";                   // sentence coordinates degrees created from
  double latitude_meter              =0.0000100;                 // one meter (needs tuning)
  double longitude_meter             =0.0000100;                 // one meter (needs tuning)
  double latitude_mile               =latitude_meter  * 1609.34; // one mile (needs tuning)
  double longitude_mile              =longitude_meter * 1609.34; // one mile (needs tuning)
  double abs_latitude_gngga_0        =0.0;                       // absolute latitude from $ sentence
  double abs_longitude_gngga_0       =0.0;                       // absolute longditude from $ sentence
  double abs_latitude_gnrmc_0        =0.0;                       // absolute latitude from $ sentence
  double abs_longitude_gnrmc_0       =0.0;                       // absolute longditude from $ sentence
  double temp_latitude_gngga;                                    // degrees converted from absolute
  double temp_longitude_gngga;                                   // degrees converted from absolute
  double temp_latitude_gnrmc;                                    // degrees converted from absolute
  double temp_longitude_gnrmc;                                   // degrees converted from absolute
  double minutesLat;                                             // used for converting absolute latitude and longitude
  double minutesLong;                                            // used for converting absolute latitude and longitude
  double secondsLat;                                             // used for converting absolute latitude and longitude
  double secondsLong;                                            // used for converting absolute latitude and longitude
  double millisecondsLat;                                        // used for converting absolute latitude and longitude
  double millisecondsLong;                                       // used for converting absolute latitude and longitude
  double degrees_latitude;                                       // degrees converted from absolute
  double degrees_longitude;                                      // degrees converted from absolute
  double degreesLat;                                             // used for converting absolute latitude and longitude
  double degreesLong;                                            // used for converting absolute latitude and longitude
  String ground_heading = "";

  // ------------------------------------------------------------------------------------
  // temporary time
  // ------------------------------------------------------------------------------------
  uint16_t tmp_year_int=0;       // temp current year
  uint8_t tmp_month_int=0;       // temp current month
  uint8_t tmp_day_int=0;         // temp current day
  uint8_t tmp_hour_int=0;        // temp current hour
  uint8_t tmp_minute_int=0;      // temp current minute
  uint8_t tmp_second_int=0;      // temp current second
  uint8_t tmp_millisecond_int=0; // temp current millisecond
  char tmp_year[56];             // temp current year
  char tmp_month[56];            // temp current month
  char tmp_day[56];              // temp current day
  char tmp_hour[56];             // temp current hour
  char tmp_minute[56];           // temp current minute
  char tmp_second[56];           // temp current second
  char tmp_millisecond[56];      // temp current millisecond

  // ------------------------------------------------------------------------------------
  // local time converted from rtc utc time (currently only used for display purposes)
  // ------------------------------------------------------------------------------------
  uint8_t local_hour=0;
  uint8_t local_minute=0;
  uint8_t local_second=0;
  uint16_t local_year=0;
  uint8_t local_month=0;
  uint8_t local_day=0;
  char local_weekday[56];
  String formatted_local_time="00:00:00";
  String formatted_local_date="00/00/00";
  String padded_local_time="000000";
  String padded_local_date="00000000";

  // ------------------------------------------------------------------------------------
  // last time rtc synced with utc
  // ------------------------------------------------------------------------------------
  uint8_t rtcsync_hour=0;
  uint8_t rtcsync_minute=0;
  uint8_t rtcsync_second=0;
  uint16_t rtcsync_year=0;
  uint8_t rtcsync_month=0;
  uint8_t rtcsync_day=0;
  uint32_t rtc_unixtime;
  String formatted_rtc_sync_time="00:00:00";
  String formatted_rtc_sync_date="00/00/00";
  String padded_rtc_sync_time="000000";
  String padded_rtc_sync_date="00000000";

  // ------------------------------------------------------------------------------------
  // task safe rtc time now can be used instead of directly calling rtc.now()
  // ------------------------------------------------------------------------------------
  uint8_t rtc_hour=0;
  uint8_t rtc_minute=0;
  uint8_t rtc_second=0;
  uint16_t rtc_year=0;
  uint8_t rtc_month=0;
  uint8_t rtc_day=0;
  char rtc_weekday[56];
  String formatted_rtc_time="00:00:00";
  String formatted_rtc_date="00/00/00";
  String padded_rtc_time="000000";
  String padded_rtc_date="00000000";

  // ------------------------------------------------------------------------------------
  /*
  utc second offset:
  1: offset UTC (+/-) in seconds, for daylight saving and or timezones.
  2: offset up to LONG_MAX=2147483647 seconds=2,147,483,647 gregorian years.
  */
 // ------------------------------------------------------------------------------------
  long int utc_second_offset=0;
  bool utc_auto_offset_flag=false;
};
SatDatatruct satData;

void clearDynamicSATIO() {
  // ---------------------------------------------------------------------------------------
  // clear dynamic data while retaining data that may stay the same if running as a station
  // ---------------------------------------------------------------------------------------
  satData.checksum_i=0;
  memset(satData.satio_sentence, 0, sizeof(satData.satio_sentence));
  satData.convert_coordinates=false;
  satData.abs_latitude_gngga_0=NAN;
  satData.abs_longitude_gngga_0=NAN;
  satData.abs_latitude_gnrmc_0=NAN;
  satData.abs_longitude_gnrmc_0=NAN;
  satData.temp_latitude_gngga=NAN;
  satData.temp_longitude_gngga=NAN;
  satData.temp_latitude_gnrmc=NAN;
  satData.temp_longitude_gnrmc=NAN;
  satData.secondsLat=NAN;
  satData.secondsLong=NAN;
  satData.millisecondsLat=NAN;
  satData.millisecondsLong=NAN;
  satData.minutesLat=NAN;
  satData.minutesLong=NAN;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                  DATA: SENSORS
// ------------------------------------------------------------------------------------------------------------------------------

struct SensorDataStruct {

  // ----------------------------------------------------
  // sensor serial output
  // ----------------------------------------------------
  char sensor_sentence[1024];
  char TMP[1024];

  // ----------------------------------------------------
  // CD74HC4067 x16 Analog/Digital Multiplexer
  // ----------------------------------------------------
  // default names and data types can be customized
  // ----------------------------------------------------
  float dht11_h_0=0.0;
  float dht11_c_0=0.0;
  float dht11_f_0=0.0;
  float dht11_hif_0=0.0;
  float dht11_hic_0=0.0;
  bool dht11_0_display_hic=true;
  float sensor_0=0.0;
  float sensor_1=0.0;
  float sensor_2=0.0;
  float sensor_3=0.0;
  float sensor_4=0.0;
  float sensor_5=0.0;
  float sensor_6=0.0;
  float sensor_7=0.0;
  float sensor_8=0.0;
  float sensor_9=0.0;
  float sensor_10=0.0;
  float sensor_11=0.0;
  float sensor_12=0.0;
  float sensor_13=0.0;
  float sensor_14=0.0;
  float sensor_15=0.0;

  // ----------------------------------------------------
  // TCA9548A x8 i2C Multiplexer
  // ----------------------------------------------------
  // default names and data types can be customized
  // ----------------------------------------------------
  float i2c_sensor_0 = 0.0;
  float i2c_sensor_1 = 0.0;
  float i2c_sensor_2 = 0.0;
  float i2c_sensor_3 = 0.0;
  float i2c_sensor_4 = 0.0;
  float i2c_sensor_5 = 0.0;
  float i2c_sensor_6 = 0.0;
  float i2c_sensor_7 = 0.0;

  // ----------------------------------------------------
  // WT901
  // ----------------------------------------------------
  float wt901_ang_x=0.0;
  float wt901_ang_y=0.0;
  float wt901_ang_z=0.0;
  float wt901_mag_x=0.0;
  float wt901_mag_y=0.0;
  float wt901_mag_z=0.0;
  float wt901_acc_x=0.0;
  float wt901_acc_y=0.0;
  float wt901_acc_z=0.0;
  float wt901_gyr_x=0.0;
  float wt901_gyr_y=0.0;
  float wt901_gyr_z=0.0;

  // ----------------------------------------------------
  // Analog Sticks
  // ----------------------------------------------------
  int as_0_u=0;
  int as_0_d=0;
  int as_0_l=0;
  int as_0_r=0;
  int as_0_c=0;
  int as_1_u=0;
  int as_1_d=0;
  int as_1_l=0;
  int as_1_r=0;
  int as_1_c=0;
};
SensorDataStruct sensorData;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                         CONVERT COORDINTE DATA
// ------------------------------------------------------------------------------------------------------------------------------

void calculateLocation(){

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                  GNGGA COORDINATE CONVERSION
  // ----------------------------------------------------------------------------------------------------------------------------

  // ----------------------------------------------------------------------------------------------------------------------------
  // Convert GNGGA latitude & longitude strings to decimal degrees and format into hours, minutes, seconds, milliseconds.
  // ----------------------------------------------------------------------------------------------------------------------------

  if (String(satData.coordinate_conversion_mode)=="GNGGA") {

    // -----------------------------------------------------------------------------------------
    // Extract absolute latitude value from GNGGA data as decimal degrees.
    // -----------------------------------------------------------------------------------------
    satData.abs_latitude_gngga_0=atof(String(gnggaData.latitude).c_str());
    // -----------------------------------------------------------------------------------------
    // Store absolute latitude in temporary variable for further processing.
    // -----------------------------------------------------------------------------------------
    satData.temp_latitude_gngga=satData.abs_latitude_gngga_0;
    // -----------------------------------------------------------------------------------------
    // Separate the integer degrees value from the fractional part.
    // -----------------------------------------------------------------------------------------
    satData.degreesLat=trunc(satData.temp_latitude_gngga / 100);
    // -----------------------------------------------------------------------------------------
    // Calculate minutes and seconds values based on remaining fractional part.
    // -----------------------------------------------------------------------------------------
    satData.minutesLat=satData.temp_latitude_gngga - (satData.degreesLat * 100);
    // -----------------------------------------------------------------------------------------
    // Convert excess fractional part to seconds.
    // -----------------------------------------------------------------------------------------
    satData.secondsLat=(satData.minutesLat - trunc(satData.minutesLat)) * 60;
    // -----------------------------------------------------------------------------------------
    // Convert excess seconds to milliseconds.
    // -----------------------------------------------------------------------------------------
    satData.millisecondsLat=(satData.secondsLat - trunc(satData.secondsLat)) * 1000;
    // -----------------------------------------------------------------------------------------
    // Round off minutes and seconds values to nearest integer.
    // -----------------------------------------------------------------------------------------
    satData.minutesLat=trunc(satData.minutesLat);
    satData.secondsLat=trunc(satData.secondsLat);
    // -----------------------------------------------------------------------------------------
    // Combine degrees, minutes, seconds, and milliseconds into a single decimal latitude value.
    // -----------------------------------------------------------------------------------------
    satData.degrees_latitude =
    satData.degreesLat + satData.minutesLat / 60 + satData.secondsLat / 3600 + satData.millisecondsLat / 3600000;
    // -----------------------------------------------------------------------------------------
    // Negate latitude value if it's in the Southern hemisphere (make negative value).
    // -----------------------------------------------------------------------------------------
    if (strcmp(gnggaData.latitude_hemisphere, "S")==0) {
      satData.degrees_latitude=0 - satData.degrees_latitude;
    }
    // -----------------------------------------------------------------------------------------
    // Save formatted latitude value as a string for later use.
    // -----------------------------------------------------------------------------------------
    scanf("%f17", &satData.degrees_latitude);
    // -----------------------------------------------------------------------------------------
    // Extract absolute longitude value from GNGGA data as decimal degrees.
    // -----------------------------------------------------------------------------------------
    satData.abs_longitude_gngga_0=atof(String(gnggaData.longitude).c_str());
    // -----------------------------------------------------------------------------------------
    // Store absolute latitude in temporary variable for further processing.
    // -----------------------------------------------------------------------------------------
    satData.temp_longitude_gngga=satData.abs_longitude_gngga_0;
    // -----------------------------------------------------------------------------------------
    // Separate the integer degrees value from the fractional part.
    // -----------------------------------------------------------------------------------------
    satData.degreesLong=trunc(satData.temp_longitude_gngga / 100);
    // -----------------------------------------------------------------------------------------
    // Calculate minutes and seconds values based on remaining fractional part.
    // -----------------------------------------------------------------------------------------
    satData.minutesLong=satData.temp_longitude_gngga - (satData.degreesLong * 100);
    // -----------------------------------------------------------------------------------------
    // Convert excess fractional part to seconds.
    // -----------------------------------------------------------------------------------------
    satData.secondsLong=(satData.minutesLong - trunc(satData.minutesLong)) * 60;
    // -----------------------------------------------------------------------------------------
    // Convert excess seconds to milliseconds.
    // -----------------------------------------------------------------------------------------
    satData.millisecondsLong=(satData.secondsLong - trunc(satData.secondsLong)) * 1000;
    // -----------------------------------------------------------------------------------------
    // Round off minutes and seconds values to nearest integer.
    // -----------------------------------------------------------------------------------------
    satData.minutesLong=trunc(satData.minutesLong);
    satData.secondsLong=trunc(satData.secondsLong);
    // -----------------------------------------------------------------------------------------
    // Combine degrees, minutes, seconds, and milliseconds into a single decimal latitude value.
    // -----------------------------------------------------------------------------------------
    satData.degrees_longitude =
    satData.degreesLong + satData.minutesLong / 60 + satData.secondsLong / 3600 + satData.millisecondsLong / 3600000;
    // -----------------------------------------------------------------------------------------
    // Negate latitude value if it's in the Southern hemisphere (make negative value).
    // -----------------------------------------------------------------------------------------
    if (strcmp(gnggaData.longitude_hemisphere, "W")==0) {
      satData.degrees_longitude=0 - satData.degrees_longitude;
    }
    // -----------------------------------------------------------------------------------------
    // Save formatted latitude value as a string for later use.
    // -----------------------------------------------------------------------------------------
    scanf("%f17", &satData.degrees_longitude);
  }

  // ------------------------------------------------------------------------------------------------------------------------
  //                                                                                              GNRMC COORDINATE CONVERSION
  // ------------------------------------------------------------------------------------------------------------------------

  // ------------------------------------------------------------------------------------------------------------------------
  // Convert GNRMC latitude & longitude strings to decimal degrees and format into hours, minutes, seconds, milliseconds.
  // ------------------------------------------------------------------------------------------------------------------------

  else if (String(satData.coordinate_conversion_mode)=="GNRMC") {
    // -----------------------------------------------------------------------------------------
    // Extract absolute latitude value from GNGGA data as decimal degrees.
    // -----------------------------------------------------------------------------------------
    satData.abs_latitude_gnrmc_0=atof(String(gnrmcData.latitude).c_str());
    // -----------------------------------------------------------------------------------------
    // Store absolute latitude in temporary variable for further processing.
    // -----------------------------------------------------------------------------------------
    satData.temp_latitude_gnrmc=satData.abs_latitude_gnrmc_0;
    // -----------------------------------------------------------------------------------------
    // Separate the integer degrees value from the fractional part.
    // -----------------------------------------------------------------------------------------
    satData.degreesLat=trunc(satData.temp_latitude_gnrmc / 100);
    // -----------------------------------------------------------------------------------------
    // Calculate minutes and seconds values based on remaining fractional part.
    // -----------------------------------------------------------------------------------------
    satData.minutesLat=satData.temp_latitude_gnrmc - (satData.degreesLat * 100);
    // -----------------------------------------------------------------------------------------
    // Convert excess fractional part to seconds.
    // -----------------------------------------------------------------------------------------
    satData.secondsLat=(satData.minutesLat - (satData.minutesLat)) * 60;
    // -----------------------------------------------------------------------------------------
    // Convert excess seconds to milliseconds.
    // -----------------------------------------------------------------------------------------
    satData.millisecondsLat=(satData.secondsLat - trunc(satData.secondsLat)) * 1000;
    // -----------------------------------------------------------------------------------------
    // Round off minutes and seconds values to nearest integer.
    // -----------------------------------------------------------------------------------------
    satData.minutesLat=trunc(satData.minutesLat);
    satData.secondsLat=trunc(satData.secondsLat);
    // -----------------------------------------------------------------------------------------
    // Combine degrees, minutes, seconds, and milliseconds into a single decimal latitude value.
    // -----------------------------------------------------------------------------------------
    satData.degrees_latitude =
    satData.degreesLat + satData.minutesLat / 60 + satData.secondsLat / 3600 + satData.millisecondsLat / 3600000;
    // -----------------------------------------------------------------------------------------
    // Negate latitude value if it's in the Southern hemisphere (make negative value).
    // -----------------------------------------------------------------------------------------
    if (strcmp(gnrmcData.latitude_hemisphere, "S")==0) {
      satData.degrees_latitude=0 - satData.degrees_latitude;
    }
    // -----------------------------------------------------------------------------------------
    // Save formatted latitude value as a string for later use.
    // -----------------------------------------------------------------------------------------
    scanf("%f17", &satData.degrees_latitude);
    // -----------------------------------------------------------------------------------------
    // Extract absolute latitude value from GNGGA data as decimal degrees.
    // -----------------------------------------------------------------------------------------
    satData.abs_longitude_gnrmc_0=atof(String(gnrmcData.longitude).c_str());
    // -----------------------------------------------------------------------------------------
    // Store absolute latitude in temporary variable for further processing.
    // -----------------------------------------------------------------------------------------
    satData.temp_longitude_gnrmc=satData.abs_longitude_gnrmc_0;
    // -----------------------------------------------------------------------------------------
    // Separate the integer degrees value from the fractional part.
    // -----------------------------------------------------------------------------------------
    satData.degreesLong=trunc(satData.temp_longitude_gnrmc / 100);
    // -----------------------------------------------------------------------------------------
    // Calculate minutes and seconds values based on remaining fractional part.
    // -----------------------------------------------------------------------------------------
    satData.minutesLong=satData.temp_longitude_gnrmc - (satData.degreesLong * 100);
    // -----------------------------------------------------------------------------------------
    // Convert excess fractional part to seconds.
    // -----------------------------------------------------------------------------------------
    satData.secondsLong=(satData.minutesLong - trunc(satData.minutesLong)) * 60;
    // -----------------------------------------------------------------------------------------
    // Convert excess seconds to milliseconds.
    // -----------------------------------------------------------------------------------------
    satData.millisecondsLong=(satData.secondsLong - trunc(satData.secondsLong)) * 1000;
    // -----------------------------------------------------------------------------------------
    // Round off minutes and seconds values to nearest integer.
    // -----------------------------------------------------------------------------------------
    satData.minutesLong=trunc(satData.minutesLong);
    satData.secondsLong=trunc(satData.secondsLong);
    // -----------------------------------------------------------------------------------------
    // Combine degrees, minutes, seconds, and milliseconds into a single decimal latitude value.
    // -----------------------------------------------------------------------------------------
    satData.degrees_longitude =
    satData.degreesLong + satData.minutesLong / 60 + satData.secondsLong / 3600 + satData.millisecondsLong / 3600000;
    // -----------------------------------------------------------------------------------------
    // Negate latitude value if it's in the Southern hemisphere (make negative value).
    // -----------------------------------------------------------------------------------------
    if (strcmp(gnrmcData.longitude_hemisphere, "W")==0) {
      satData.degrees_longitude=0 - satData.degrees_longitude;
    }
    // -----------------------------------------------------------------------------------------
    // Save formatted latitude value as a string for later use.
    // -----------------------------------------------------------------------------------------
    scanf("%f17", &satData.degrees_longitude);
  }
}

void setGroundHeadingName(float num) {
  satData.ground_heading = groundHeadingDegreesToNESW(num);
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      PAD ZEROS
// ------------------------------------------------------------------------------------------------------------------------------

String padDigitsZero(int digits) {
  // ------------------------------------------------
  // preappends char 0 to pad string of digits evenly
  // ------------------------------------------------
  memset(pad_digits_new, 0, sizeof(pad_digits_new));
  memset(pad_current_digits, 0, sizeof(pad_current_digits));
  if(digits < 10) {strcat(pad_digits_new, "0");}
  itoa(digits, pad_current_digits, 10);
  strcat(pad_digits_new, pad_current_digits);
  return pad_digits_new;
}

String padDigitsDoubleZero(double digits) {
  // ------------------------------------------------
  // preappends char 0 to pad string of digits evenly
  // ------------------------------------------------
  memset(pad_digits_new, 0, sizeof(pad_digits_new));
  if(digits < 10 && digits >=0) {strcat(pad_digits_new, "0");}
  strcat(pad_digits_new, String(digits).c_str());
  return pad_digits_new;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    FORMAT DATE
// ------------------------------------------------------------------------------------------------------------------------------

String formatDate(int day, int month, int year) {
  // -------------------------------
  // returns period delimited string 
  // -------------------------------
  return String(padDigitsZero(day)) + "." + String(padDigitsZero(month)) + "." + String(padDigitsZero(year));
}

String formatDateStamp(int day, int month, int year) {
  // --------------------------------
  // return string without delimiters
  // --------------------------------
  return String(padDigitsZero(year)) + String(padDigitsZero(month)) + String(padDigitsZero(day));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    FORMAT TIME
// ------------------------------------------------------------------------------------------------------------------------------

String formatTime(int hour, int minute, int second) {
  // -------------------------------
  // returns period delimited string 
  // -------------------------------
  return String(padDigitsZero(hour)) + ":" + String(padDigitsZero(minute)) + ":" + String(padDigitsZero(second));
}

String formatTimeStamp(int hour, int minute, int second) {
  // --------------------------------
  // return string without delimiters
  // --------------------------------
  return  String(padDigitsZero(hour)) + String(padDigitsZero(minute)) + String(padDigitsZero(second));
}

int hoursMinutesSecondsToInt(int hours, int minutes, int seconds) {
  // ---------------------------------------------------------------------------------------
  // returns padded int: useful for mathematical operations and can be used for other things
  // ---------------------------------------------------------------------------------------
  return atoi(String(padDigitsZero(hours) + padDigitsZero(minutes) + padDigitsZero(seconds)).c_str());
}

int hoursMinutesToInt(int hours, int minutes) {
  // ---------------------------------------------------------------------------------------
  // returns padded int: useful for mathematical operations and can be used for other things
  // ---------------------------------------------------------------------------------------
  return atoi(String(padDigitsZero(hours) + padDigitsZero(minutes)).c_str());
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                FORMAT DATETIME
// ------------------------------------------------------------------------------------------------------------------------------

String formatDateTime(int hour, int minute, int second, int day, int month, int year) {
  // -------------------------------
  // returns period delimited string 
  // -------------------------------
  return 
  String(padDigitsZero(hour)) + ":" + String(padDigitsZero(minute)) + ":" + String(padDigitsZero(second)) + " " +
  String(padDigitsZero(day))  + "." + String(padDigitsZero(month))  + "." + String(padDigitsZero(year));
}
String formatDateTimeStamp(int hour, int minute, int second, int day, int month, int year) {
  // --------------------------------
  // return string without delimiters
  // --------------------------------
  return 
  String(padDigitsZero(year)) + String(padDigitsZero(month))  + String(padDigitsZero(day)) +
  String(padDigitsZero(hour)) + String(padDigitsZero(minute)) + String(padDigitsZero(second));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                 CHECK DATETIME
// ------------------------------------------------------------------------------------------------------------------------------

bool isDatetimeAllDigits(char * day, char * month, char * year, char * hour, char *  minute, char * second) {
  if (
    is_all_digits(day) &&
    is_all_digits(month) &&
    is_all_digits(year) &&
    is_all_digits(hour) &&
    is_all_digits(minute) &&
    is_all_digits(second)) {return true;}
  return false;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                              SYNC RTC FROM GPS
// ------------------------------------------------------------------------------------------------------------------------------

bool first_gps_pass=true;

void syncUTCTime() {
  // ----------------------------------------------------------------------------------------------
  /*                             EXTRACT UTC TIME & DATE FROM GPS                                */
  // ----------------------------------------------------------------------------------------------
  satData.tmp_day[0]=gnrmcData.utc_date[0];
  satData.tmp_day[1]=gnrmcData.utc_date[1];
  satData.tmp_month[0]=gnrmcData.utc_date[2];
  satData.tmp_month[1]=gnrmcData.utc_date[3];
  satData.tmp_year[0]=gnrmcData.utc_date[4];
  satData.tmp_year[1]=gnrmcData.utc_date[5];
  satData.tmp_hour[0]=gnrmcData.utc_time[0];
  satData.tmp_hour[1]=gnrmcData.utc_time[1];
  satData.tmp_minute[0]=gnrmcData.utc_time[2];
  satData.tmp_minute[1]=gnrmcData.utc_time[3];
  satData.tmp_second[0]=gnrmcData.utc_time[4];
  satData.tmp_second[1]=gnrmcData.utc_time[5];
  satData.tmp_millisecond[0]=gnrmcData.utc_time[7];
  satData.tmp_millisecond[1]=gnrmcData.utc_time[8];
  // if (isDatetimeAllDigits(satData.tmp_day, satData.tmp_month, satData.tmp_year, satData.tmp_hour, satData.tmp_minute, satData.tmp_second)) {
  satData.tmp_day_int=atoi(satData.tmp_day);
  satData.tmp_month_int=atoi(satData.tmp_month);
  satData.tmp_year_int=atoi(satData.tmp_year);
  satData.tmp_hour_int=atoi(satData.tmp_hour);
  satData.tmp_minute_int=atoi(satData.tmp_minute);
  satData.tmp_second_int=atoi(satData.tmp_second);
  satData.tmp_millisecond_int=atoi(satData.tmp_millisecond);
  // ----------------------------------------------------------------------------------------------
  /*                                 SYNC RTC TIME & DATE FROM GPS                               */
  // ----------------------------------------------------------------------------------------------
  if ((atoi(gnggaData.satellite_count_gngga)>3) && (atoi(gnggaData.hdop_precision_factor)<=1)) {
    if ((first_gps_pass==true) ) {
      // ----------------------------------------------------------------------------
      /* Sync at first opportunity within the first 100 milliseconds of any second */
      // ----------------------------------------------------------------------------
      if (satData.tmp_millisecond_int>=0 && satData.tmp_millisecond_int<=5) {
        first_gps_pass=false;
        // Serial.println("[rtc] synchronizing (first opportunity): " + String(rtc.now().timestamp()));
        // --------------------------------------------------------------------------
        /* Sync RTC to UTC                                                         */ 
        // --------------------------------------------------------------------------
        rtc.adjust(DateTime((uint16_t)satData.tmp_year_int, (uint8_t)satData.tmp_month_int, (uint8_t)satData.tmp_day_int, (uint8_t)satData.tmp_hour_int, (uint8_t)satData.tmp_minute_int, (uint8_t)satData.tmp_second_int));
        // --------------------------------------------------------------------------
        /* Record Sync time                                                        */
        // --------------------------------------------------------------------------
        satData.rtcsync_hour=rtc.now().hour();
        satData.rtcsync_minute=rtc.now().minute();
        satData.rtcsync_second=rtc.now().second();
        satData.rtcsync_year=rtc.now().year();
        satData.rtcsync_month=rtc.now().month();
        satData.rtcsync_day=rtc.now().day();
        satData.formatted_rtc_sync_time=String(padDigitsZero(satData.rtcsync_hour) + ":" + padDigitsZero(satData.rtcsync_minute) + ":" + padDigitsZero(satData.rtcsync_second));
        satData.formatted_rtc_sync_date=String(padDigitsZero(satData.rtcsync_day) + "/" + padDigitsZero(satData.rtcsync_month) + "/" + padDigitsZero(satData.rtcsync_year));
        satData.padded_rtc_sync_time=String(padDigitsZero(satData.rtcsync_hour) + "" + padDigitsZero(satData.rtcsync_minute) + "" + padDigitsZero(satData.rtcsync_second));
        satData.padded_rtc_sync_date=String(padDigitsZero(satData.rtcsync_day) + "" + padDigitsZero(satData.rtcsync_month) + "" + padDigitsZero(satData.rtcsync_year));
        rtc_sync_flag=true;
        // Serial.println("[rtc] synchronization (completed):       " + String(rtc.now().timestamp()));
      }
    }
    else {
      // ----------------------------------------------------------------------------
      /* Sync within the first 100 milliseconds of any minute                      */
      // ----------------------------------------------------------------------------
      // Serial.println(satData.tmp_millisecond_int);
      if ((satData.tmp_second_int==0) && (satData.tmp_millisecond_int>=0 && satData.tmp_millisecond_int<=5)) {
        // Serial.println("[rtc] synchronizing:               " + String(rtc.now().timestamp()));
        // --------------------------------------------------------------------------
        /* Sync RTC to UTC                                                         */ 
        // --------------------------------------------------------------------------
        rtc.adjust(DateTime((uint16_t)satData.tmp_year_int, (uint8_t)satData.tmp_month_int, (uint8_t)satData.tmp_day_int, (uint8_t)satData.tmp_hour_int, (uint8_t)satData.tmp_minute_int, (uint8_t)satData.tmp_second_int));
        // --------------------------------------------------------------------------
        /* Record Sync time                                                        */
        // --------------------------------------------------------------------------
        satData.rtcsync_hour=rtc.now().hour();
        satData.rtcsync_minute=rtc.now().minute();
        satData.rtcsync_second=rtc.now().second();
        satData.rtcsync_year=rtc.now().year();
        satData.rtcsync_month=rtc.now().month();
        satData.rtcsync_day=rtc.now().day();
        satData.formatted_rtc_sync_time=String(padDigitsZero(satData.rtcsync_hour) + ":" + padDigitsZero(satData.rtcsync_minute) + ":" + padDigitsZero(satData.rtcsync_second));
        satData.formatted_rtc_sync_date=String(padDigitsZero(satData.rtcsync_day) + "/" + padDigitsZero(satData.rtcsync_month) + "/" + padDigitsZero(satData.rtcsync_year));
        satData.padded_rtc_sync_time=String(padDigitsZero(satData.rtcsync_hour) + "" + padDigitsZero(satData.rtcsync_minute) + "" + padDigitsZero(satData.rtcsync_second));
        satData.padded_rtc_sync_date=String(padDigitsZero(satData.rtcsync_day) + "" + padDigitsZero(satData.rtcsync_month) + "" + padDigitsZero(satData.rtcsync_year));
        rtc_sync_flag=true;
        // Serial.println("[rtc] synchronization (completed): " + String(rtc.now().timestamp()));
      }
    }
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                   SYNC TASK SAFE RTC TIME AND TIMELIB FROM RTC
// ------------------------------------------------------------------------------------------------------------------------------

tmElements_t make_utc_time_elements;
time_t make_utc_time;

void syncTaskSafeRTCTime() {
  // ----------------------------------------------------------------------------------------
  /*                               SYNC TASK SAFE RTC TIME                                 */
  // ----------------------------------------------------------------------------------------
  // Set a snapshot of RTC time.
  // This so that multiple calls to rtc.now() are not made at the same time from different cores/tasks.
  // Downstream second resolution of time will not be lost providing syncTaskSafeRTCTime is called once or more a second.
  // ----------------------------------------------------------------------------------------
  satData.rtc_hour=rtc.now().hour();
  satData.rtc_minute=rtc.now().minute();
  satData.rtc_second=rtc.now().second();
  satData.rtc_year=rtc.now().year();
  satData.rtc_month=rtc.now().month();
  satData.rtc_day=rtc.now().day();
  satData.rtc_unixtime=rtc.now().unixtime();
  memset(satData.rtc_weekday, 0, sizeof(satData.rtc_weekday));
  strcpy(satData.rtc_weekday, String(myAstro.HumanDayOfTheWeek(satData.rtc_year, satData.rtc_month, satData.rtc_day)).c_str());
  satData.formatted_rtc_time=String(padDigitsZero(satData.rtc_hour) + ":" + padDigitsZero(satData.rtc_minute) + ":" + padDigitsZero(satData.rtc_second));
  satData.formatted_rtc_date=String(padDigitsZero(satData.rtc_day) + "/" + padDigitsZero(satData.rtc_month) + "/" + padDigitsZero(satData.rtc_year));
  satData.padded_rtc_time=String(padDigitsZero(satData.rtc_hour) + "" + padDigitsZero(satData.rtc_minute) + "" + padDigitsZero(satData.rtc_second));
  satData.padded_rtc_date=String(padDigitsZero(satData.rtc_day) + "" + padDigitsZero(satData.rtc_month) + "" + padDigitsZero(satData.rtc_year));
  // ----------------------------------------------------------------------------------------
  /*                               SYNC TIMELIB WITH RTC                                   */
  // ----------------------------------------------------------------------------------------
  // We do not want to adjust RTC time unless we synchronize RTC with UTC.
  // ----------------------------------------------------------------------------------------
  // tmElements_t year is currently uint8_t (0-255) while DateTime year is uint16_t (0-65535).
  // ----------------------------------------------------------------------------------------
  memset(satData.tmp_year, 0, sizeof(satData.tmp_year));
  satData.tmp_year[0]=String(satData.rtc_year).c_str()[2];
  satData.tmp_year[1]=String(satData.rtc_year).c_str()[3];
  satData.tmp_year_int=atoi(satData.tmp_year);
  // ---------------------------------------------------------------------
  // Set a time that can be adjusted independantly of RTC, from RTC time.
  // ---------------------------------------------------------------------
  setTime(
    satData.rtc_hour,
    satData.rtc_minute,
    satData.rtc_second,
    satData.rtc_day,
    satData.rtc_month,
    satData.tmp_year_int);
  make_utc_time_elements={(uint8_t)second(), (uint8_t)minute(), (uint8_t)hour(), (uint8_t)weekday(), (uint8_t)day(), (uint8_t)month(), (uint8_t)year()};
  make_utc_time=makeTime(make_utc_time_elements);
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                              CONVERT UTC TO TIME TO LOCAL TIME
// ------------------------------------------------------------------------------------------------------------------------------

void convertUTCTimeToLocalTime() {
  // ----------------------------------------------------------------------------------------------
  /*                             ADJUST LOCAL TIME & DATE FROM TIME                              */
  // ----------------------------------------------------------------------------------------------
  // Time should be set before calling this function.
  // GPS and RTC are UTC.
  // Make local time from RTC, regardless of synchronization.
  // ----------------------------------------------------------------------------------------------

  // --------------------------------------------------------
  // Auto UTC offset: automatically modify utc_second_offset
  // --------------------------------------------------------
  if (satData.utc_auto_offset_flag==true) {}
  // --------------------------------------------------------
  // Adjust time: adjust time according to utc_second_offset
  // --------------------------------------------------------
  adjustTime(satData.utc_second_offset);
  // --------------------------------------------------------
  // Set a snapshot of local time
  // --------------------------------------------------------
  satData.local_year=year();
  satData.local_month=month();
  satData.local_day=day();
  satData.local_hour=hour();
  satData.local_minute=minute();
  satData.local_second=second();
  memset(satData.local_weekday, 0, sizeof(satData.local_weekday));
  strcpy(satData.local_weekday, String(myAstro.HumanDayOfTheWeek(satData.local_year, satData.local_month, satData.local_day)).c_str());
  satData.formatted_local_time=String(padDigitsZero(satData.local_hour) + ":" + padDigitsZero(satData.local_minute) + ":" + padDigitsZero(satData.local_second));
  satData.formatted_local_date=String(padDigitsZero(satData.local_day) + "/" + padDigitsZero(satData.local_month) + "/" + padDigitsZero(satData.local_year));
  satData.padded_local_time=String(padDigitsZero(satData.local_hour) + "" + padDigitsZero(satData.local_minute) + "" + padDigitsZero(satData.local_second));
  satData.padded_local_date=String(padDigitsZero(satData.local_day) + "" + padDigitsZero(satData.local_month) + "" + padDigitsZero(satData.local_year));
  // --------------------------------------------------------
  // uncomment to debug
  // --------------------------------------------------------
  // printAllTimes();
}

void printAllTimes() {
  Serial.println("-----------------------------------------");
  Serial.println("[gnrmcData.utc_date]     " + String(gnrmcData.utc_date));
  Serial.println("[gnrmcData.utc_time]     " + String(gnrmcData.utc_time));
  Serial.println("-----------------------------------------");
  Serial.println("[satData.tmp_year_int]   " + String(satData.tmp_year_int));
  Serial.println("[satData.tmp_month_int]  " + String(satData.tmp_month_int));
  Serial.println("[satData.tmp_day_int]    " + String(satData.tmp_day_int));
  Serial.println("[satData.tmp_hour_int]   " + String(satData.tmp_hour_int));
  Serial.println("[satData.tmp_minute_int] " + String(satData.tmp_minute_int));
  Serial.println("[satData.tmp_second_int] " + String(satData.tmp_second_int));
  Serial.println("-----------------------------------------");
  Serial.println("[satData.rtc_year]       " + String(satData.rtc_year));
  Serial.println("[satData.rtc_month]      " + String(satData.rtc_month));
  Serial.println("[satData.rtc_day]        " + String(satData.rtc_day));
  Serial.println("[satData.rtc_hour]       " + String(satData.rtc_hour));
  Serial.println("[satData.rtc_minute]     " + String(satData.rtc_minute));
  Serial.println("[satData.rtc_second]     " + String(satData.rtc_second));
  Serial.println("-----------------------------------------");
  Serial.println("[time lib year]          " + String(year()));
  Serial.println("[time lib month]         " + String(month()));
  Serial.println("[time lib day]           " + String(day()));
  Serial.println("[time lib hour]          " + String(hour()));
  Serial.println("[time lib minute]        " + String(minute()));
  Serial.println("[time lib second]        " + String(second()));
  Serial.println("-----------------------------------------");
  Serial.println("[satData.local_year]     " + String(satData.local_year));
  Serial.println("[satData.local_month]    " + String(satData.local_month));
  Serial.println("[satData.local_day]      " + String(satData.local_day));
  Serial.println("[satData.local_hour]     " + String(satData.local_hour));
  Serial.println("[satData.local_minute]   " + String(satData.local_minute));
  Serial.println("[satData.local_second]   " + String(satData.local_second));
  Serial.println("-----------------------------------------");
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                           BUILD SATIO SENTENCE
// ------------------------------------------------------------------------------------------------------------------------------
void buildSatIOSentence() {

  // -------------------------------------------------------------------------------------------------------
  // create a comma delimited sentence of new data, to print over serial that can be parsed by other systems
  // -------------------------------------------------------------------------------------------------------

  // -----------------------------
  // start building satio sentence
  // -----------------------------
  memset(satData.satio_sentence, 0, sizeof(satData.satio_sentence));
  strcat(satData.satio_sentence, satData.satDataTag);
  strcat(satData.satio_sentence, ",");

  // -----------------------------
  // rtc time (utc)
  // -----------------------------
  strcat(satData.satio_sentence, String(satData.padded_rtc_time).c_str());
  strcat(satData.satio_sentence, ",");
  // -----------------------------
  // rtc date (utc)
  // -----------------------------
  strcat(satData.satio_sentence, String(satData.padded_rtc_date).c_str());
  strcat(satData.satio_sentence, ",");

  // -------------------
  // rtc sync time (utc)
  // -------------------
  strcat(satData.satio_sentence, String(satData.padded_rtc_sync_time).c_str());
  strcat(satData.satio_sentence, ",");
  // -------------------
  // rtc sync date (utc)
  // -------------------
  strcat(satData.satio_sentence, String(satData.padded_rtc_sync_date).c_str());
  strcat(satData.satio_sentence, ",");

  // -------------------
  // local time (utc)
  // -------------------
  strcat(satData.satio_sentence, String(satData.padded_local_time).c_str());
  strcat(satData.satio_sentence, ",");
  // -------------------
  // local date (utc)
  // -------------------
  strcat(satData.satio_sentence, String(satData.padded_local_date).c_str());
  strcat(satData.satio_sentence, ",");

  // -----------------------------
  // system uptime in seconds
  // -----------------------------
  strcat(satData.satio_sentence, String(timeData.uptime_seconds).c_str());
  strcat(satData.satio_sentence, ",");

  // -----------------------------
  // latitude degrees
  // -----------------------------
  strcat(satData.satio_sentence, String(satData.degrees_latitude, 7).c_str());
  strcat(satData.satio_sentence, ",");
  // -----------------------------
  // longitude degrees
  // -----------------------------
  strcat(satData.satio_sentence, String(satData.degrees_longitude, 7).c_str());
  strcat(satData.satio_sentence, ",");

  // -----------------------------
  // append checksum
  // -----------------------------
  createChecksum(satData.satio_sentence);
  strcat(satData.satio_sentence, "*");
  strcat(satData.satio_sentence, SerialLink.checksum);
  if (systemData.output_satio_enabled==true) {Serial.println(satData.satio_sentence);}
  // -----------------------------
  // uncomment to debug
  // -----------------------------
  // debug(satData.satio_sentence);
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                 SDCARD: UPDATE MATRIX FILEPATH
// ------------------------------------------------------------------------------------------------------------------------------

void UpdateMatrixFileNameFilePath(char * filepath) {
  memset(sdcardData.matrix_filepath, 0, sizeof(sdcardData.matrix_filepath));
  strcpy(sdcardData.matrix_filepath, filepath);
  if (strlen(sdcardData.matrix_filepath)>8) {
    memset(sdcardData.matrix_filename, 0, sizeof(sdcardData.matrix_filename));
    strncpy(sdcardData.matrix_filename, sdcardData.matrix_filepath + 8, strlen(sdcardData.matrix_filepath));
    Serial.println("[sdcardData.matrix_filepath] " + String(sdcardData.matrix_filepath));
    Serial.println("[sdcardData.matrix_filename] " + String(sdcardData.matrix_filename));
  }
  Serial.println("[UpdateMatrixFileNameFilePath] sdcardData.matrix_filepath: " + String(sdcardData.matrix_filepath));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                 SDCARD: UPDATE MATRIX FILENAME
// ------------------------------------------------------------------------------------------------------------------------------

void UpdateMatrixFileName(char * filepath) {
  if (strlen(sdcardData.matrix_filepath)>8) {
    memset(sdcardData.matrix_filename, 0, sizeof(sdcardData.matrix_filename));
    strncpy(sdcardData.matrix_filename, sdcardData.matrix_filepath + 8, strlen(sdcardData.matrix_filepath));
    Serial.println("[sdcardData.matrix_filepath] " + String(sdcardData.matrix_filepath));
    Serial.println("[sdcardData.matrix_filename] " + String(sdcardData.matrix_filename));
  }
  Serial.println("[UpdateMatrixFileNameFilePath] sdcardData.matrix_filepath: " + String(sdcardData.matrix_filepath));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                              SDCARD: SAVE SYSTEM CONFIGURATION
// ------------------------------------------------------------------------------------------------------------------------------

void sdcardSaveSystemConfig(char * file) {

  // -----------------------------------------------
  // saves tagged, system configuration data to file
  // -----------------------------------------------

  // -----------------------------------------------
  // open file
  // -----------------------------------------------

  Serial.println("[sdcard] attempting to save file: " + String(file));
  exfile.flush();
  exfile=sd.open(file, O_WRITE | O_CREAT);
  
  if (exfile) {

    // -----------------------------------------------
    // begin writing
    // -----------------------------------------------
    
    Serial.println("[sdcardSaveSystemConfig] sdcardData.matrix_filepath: " + String(sdcardData.matrix_filepath));

    // -----------------------------------------------
    // MATRIX_FILEPATH
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_FILEPATH,");
    if (!sdcardData.matrix_filepath) {strcat(sdcardData.file_data, sdcardData.default_matrix_filepath);}
    else {strcat(sdcardData.file_data, sdcardData.matrix_filepath);}
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // MATRIX_RUN_ON_STARTUP
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_RUN_ON_STARTUP,");
    itoa(systemData.matrix_run_on_startup, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // DISPLAY_AUTO_OFF
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "DISPLAY_AUTO_OFF,");
    itoa(systemData.display_auto_off, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_AUTO_OFF
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_AUTO_OFF,");
    itoa(systemData.index_display_autooff_times, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_BORDER_COLOR
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_BORDER_COLOR,");
    itoa(systemData.index_display_border_color, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_CONTENT_COLOR
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_CONTENT_COLOR,");
    itoa(systemData.index_display_content_color, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_MENU_BORDER_COLOR
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_MENU_BORDER_COLOR,");
    itoa(systemData.index_display_menu_border_color, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_MENU_CONTENT_COLOR
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_MENU_CONTENT_COLOR,");
    itoa(systemData.index_display_menu_content_color, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_TITLE_COLOR
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_TITLE_COLOR,");
    itoa(systemData.index_display_title_color, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_DISPLAY_COLOR_SUBTITLE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_DISPLAY_COLOR_SUBTITLE,");
    itoa(systemData.index_display_color_subtitle, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // MATRIX_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_ENABLED,");
    itoa(systemData.matrix_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // MATRIX_IO_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_IO_ENABLED,");
    itoa(systemData.matrix_io_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // SATIO_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "SATIO_ENABLED,");
    itoa(systemData.satio_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // GNGGA_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "GNGGA_ENABLED,");
    itoa(systemData.gngga_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // GNRMC_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "GNRMC_ENABLED,");
    itoa(systemData.gnrmc_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // GPATT_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "GPATT_ENABLED,");
    itoa(systemData.gpatt_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_SATIO_SENTENCE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_SATIO_SENTENCE,");
    itoa(systemData.output_satio_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_GNGGA_SENTENCE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_GNGGA_SENTENCE,");
    itoa(systemData.output_gngga_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_GNRMC_SENTENCE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_GNRMC_SENTENCE,");
    itoa(systemData.output_gnrmc_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_GPATT_SENTENCE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_GPATT_SENTENCE,");
    itoa(systemData.output_gpatt_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_MATRIX_SENTENCE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_MATRIX_SENTENCE,");
    itoa(systemData.output_matrix_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_SENSORS_SENTENCE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_SENSORS_SENTENCE,");
    itoa(systemData.output_sensors_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // UTC_SECOND_OFFSET
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "UTC_SECOND_OFFSET,");
    itoa(satData.utc_second_offset, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // UTC_AUTO_OFFSET_FLAG
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "UTC_AUTO_OFFSET_FLAG,");
    itoa(satData.utc_auto_offset_flag, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_SUN
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_SUN,");
    itoa(systemData.sidereal_track_sun, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_MOON
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_MOON,");
    itoa(systemData.sidereal_track_moon, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_MERCURY
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_MERCURY,");
    itoa(systemData.sidereal_track_mercury, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_VENUS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_VENUS,");
    itoa(systemData.sidereal_track_venus, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_MARS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_MARS,");
    itoa(systemData.sidereal_track_mars, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_JUPITER
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_JUPITER,");
    itoa(systemData.sidereal_track_jupiter, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_SATURN
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_SATURN,");
    itoa(systemData.sidereal_track_saturn, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_URANUS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_URANUS,");
    itoa(systemData.sidereal_track_uranus, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TRACK_NEPTUNE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TRACK_NEPTUNE,");
    itoa(systemData.sidereal_track_neptune, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_SUN
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_SUN,");
    itoa(systemData.output_sun_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_MOON
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_MOON,");
    itoa(systemData.output_moon_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_MERCURY
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_MERCURY,");
    itoa(systemData.output_mercury_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_VENUS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_VENUS,");
    itoa(systemData.output_venus_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_MARS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_MARS,");
    itoa(systemData.output_mars_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_JUPITER
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_JUPITER,");
    itoa(systemData.output_jupiter_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_SATURN
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_SATURN,");
    itoa(systemData.output_saturn_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_URANUS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_URANUS,");
    itoa(systemData.output_uranus_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_NEPTUNE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_NEPTUNE,");
    itoa(systemData.output_neptune_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // OUTPUT_METEORS
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "OUTPUT_METEORS,");
    itoa(systemData.output_meteors_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // INDEX_OVERLOAD_MAX
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_OVERLOAD_MAX,");
    itoa(systemData.index_overload_times, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // CD74HC4067_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_ENABLED,");
    itoa(systemData.CD74HC4067_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_0
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_0,");
    itoa(systemData.CD74HC4067_channel_enabled[0], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_1
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_1,");
    itoa(systemData.CD74HC4067_channel_enabled[1], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_2
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_2,");
    itoa(systemData.CD74HC4067_channel_enabled[2], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_3
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_3,");
    itoa(systemData.CD74HC4067_channel_enabled[3], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_4
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_4,");
    itoa(systemData.CD74HC4067_channel_enabled[4], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_5
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_5,");
    itoa(systemData.CD74HC4067_channel_enabled[5], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_6
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_6,");
    itoa(systemData.CD74HC4067_channel_enabled[6], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_7
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_7,");
    itoa(systemData.CD74HC4067_channel_enabled[7], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_8
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_8,");
    itoa(systemData.CD74HC4067_channel_enabled[8], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_9
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_9,");
    itoa(systemData.CD74HC4067_channel_enabled[9], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_10
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_10,");
    itoa(systemData.CD74HC4067_channel_enabled[10], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_11
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_11,");
    itoa(systemData.CD74HC4067_channel_enabled[11], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_12
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_12,");
    itoa(systemData.CD74HC4067_channel_enabled[12], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_13
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_13,");
    itoa(systemData.CD74HC4067_channel_enabled[13], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_14
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_14,");
    itoa(systemData.CD74HC4067_channel_enabled[14], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // CD74HC4067_CHANNEL_15
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "CD74HC4067_CHANNEL_15,");
    itoa(systemData.CD74HC4067_channel_enabled[15], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // TCA9548A_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_ENABLED,");
    itoa(systemData.TCA9548A_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_0
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_0,");
    itoa(systemData.TCA9548A_channel_enabled[0], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_1
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_1,");
    itoa(systemData.TCA9548A_channel_enabled[1], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_2
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_2,");
    itoa(systemData.TCA9548A_channel_enabled[2], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_3
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_3,");
    itoa(systemData.TCA9548A_channel_enabled[3], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_4
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_4,");
    itoa(systemData.TCA9548A_channel_enabled[4], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_5
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_5,");
    itoa(systemData.TCA9548A_channel_enabled[5], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_6
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_6,");
    itoa(systemData.TCA9548A_channel_enabled[6], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // TCA9548A_CHANNEL_7
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "TCA9548A_CHANNEL_7,");
    itoa(systemData.TCA9548A_channel_enabled[7], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // HOME PAGE FEATURE
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "INDEX_HOME_PAGE_FEATURE,");
    itoa(systemData.index_home_page_feature, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // WT901_ENABLED
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "WT901_ENABLED,");
    itoa(systemData.wt901_enabled, sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M0
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M0,");
    itoa(matrixData.matrix_indicator_colors[0][0], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M1
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M1,");
    itoa(matrixData.matrix_indicator_colors[0][1], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M2
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M2,");
    itoa(matrixData.matrix_indicator_colors[0][2], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M3
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M3,");
    itoa(matrixData.matrix_indicator_colors[0][3], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M4
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M4,");
    itoa(matrixData.matrix_indicator_colors[0][4], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M5
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M5,");
    itoa(matrixData.matrix_indicator_colors[0][5], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M6
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M6,");
    itoa(matrixData.matrix_indicator_colors[0][6], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M7
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M7,");
    itoa(matrixData.matrix_indicator_colors[0][7], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M8
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M8,");
    itoa(matrixData.matrix_indicator_colors[0][8], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M9
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M9,");
    itoa(matrixData.matrix_indicator_colors[0][9], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M10
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M10,");
    itoa(matrixData.matrix_indicator_colors[0][10], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M11
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M11,");
    itoa(matrixData.matrix_indicator_colors[0][11], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M12
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M12,");
    itoa(matrixData.matrix_indicator_colors[0][12], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M13
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M13,");
    itoa(matrixData.matrix_indicator_colors[0][13], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M14
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M14,");
    itoa(matrixData.matrix_indicator_colors[0][14], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M15
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M15,");
    itoa(matrixData.matrix_indicator_colors[0][15], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M16
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M16,");
    itoa(matrixData.matrix_indicator_colors[0][16], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M17
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M17,");
    itoa(matrixData.matrix_indicator_colors[0][17], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M18
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M18,");
    itoa(matrixData.matrix_indicator_colors[0][18], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");
    // -----------------------------------------------
    // MATRIX_INDICATOR_COLOR_M19
    // -----------------------------------------------
    memset(sdcardData.file_data, 0, sizeof(sdcardData.file_data));
    strcat(sdcardData.file_data, "MATRIX_INDICATOR_COLOR_M19,");
    itoa(matrixData.matrix_indicator_colors[0][19], sdcardData.tmp, 10);
    strcat(sdcardData.file_data, sdcardData.tmp);
    strcat(sdcardData.file_data, ",");
    Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
    exfile.println("");
    exfile.println(sdcardData.file_data);
    exfile.println("");

    // -----------------------------------------------
    // close
    // -----------------------------------------------
    exfile.close();
    Serial.println("[sdcard] saved file: " + String(file));
  }
  // ------------------------------------------------
  // failed
  // ------------------------------------------------
  else {exfile.close(); Serial.println("[sdcard] failed to save file: " + String(file));}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                               PRINT FILE TOKEN
// ------------------------------------------------------------------------------------------------------------------------------ 

void PrintFileToken() {Serial.println("[sdcard] [reading] " +  String(sdcardData.token));}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                              SDCARD: LOAD SYSTEM CONFIGURATION
// ------------------------------------------------------------------------------------------------------------------------------ 

bool sdcardLoadSystemConfig(char * file) {

  // -----------------------------------------------
  // open file
  // -----------------------------------------------

  Serial.println("[sdcard] attempting to load file: " + String(file));
  exfile.flush();

  if (exfile.open(file, O_RDONLY)==1) {

    // -----------------------------------------------
    // begin reading
    // -----------------------------------------------
    while (exfile.available()) {

      // ------------------------------------------------
      // read line
      // ------------------------------------------------
      sdcardData.SBUFFER="";
      memset(sdcardData.BUFFER, 0, sizeof(sdcardData.BUFFER));
      sdcardData.SBUFFER=exfile.readStringUntil('\n');
      sdcardData.SBUFFER.toCharArray(sdcardData.BUFFER, sdcardData.SBUFFER.length()+1);
      Serial.println("[sdcard] [reading] " + String(sdcardData.BUFFER));

      // ------------------------------------------------
      // MATRIX_FILEPATH
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "MATRIX_FILEPATH", 15)==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        PrintFileToken();
        // update filename and file path
        UpdateMatrixFileNameFilePath(sdcardData.token);
      }

      // ------------------------------------------------
      // MATRIX_RUN_ON_STARTUP
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "MATRIX_RUN_ON_STARTUP", 11)==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.matrix_run_on_startup=false;} else {systemData.matrix_run_on_startup=true;}
        }
      }

      // ------------------------------------------------
      // DISPLAY_AUTO_OFF
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "DISPLAY_AUTO_OFF", strlen("DISPLAY_AUTO_OFF"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.display_auto_off=false;} else {systemData.display_auto_off=true;}
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_AUTO_OFF
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_AUTO_OFF", strlen("INDEX_DISPLAY_AUTO_OFF"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_autooff_times=atoi(sdcardData.token);
          systemData.display_timeout=systemData.display_autooff_times[systemData.index_display_autooff_times];
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_BORDER_COLOR
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_BORDER_COLOR", strlen("INDEX_DISPLAY_BORDER_COLOR"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_border_color=atoi(sdcardData.token);
          systemData.color_border    =systemData.display_color[systemData.index_display_border_color];
          systemData.low_color_border=systemData.display_low_color[systemData.index_display_border_color];
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_CONTENT_COLOR
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_CONTENT_COLOR", strlen("INDEX_DISPLAY_CONTENT_COLOR"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_content_color=atoi(sdcardData.token);
          systemData.color_content    =systemData.display_color[systemData.index_display_content_color];
          systemData.low_color_content=systemData.display_low_color[systemData.index_display_content_color];
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_MENU_BORDER_COLOR
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_MENU_BORDER_COLOR", strlen("INDEX_DISPLAY_MENU_BORDER_COLOR"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_menu_border_color= atoi(sdcardData.token);
          systemData.color_menu_border    =systemData.display_color[systemData.index_display_menu_border_color];
          systemData.low_color_menu_border=systemData.display_low_color[systemData.index_display_menu_border_color];
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_MENU_CONTENT_COLOR
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_MENU_CONTENT_COLOR", strlen("INDEX_DISPLAY_MENU_CONTENT_COLOR"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_menu_content_color=atoi(sdcardData.token);
          systemData.color_menu_content    =systemData.display_color[systemData.index_display_menu_content_color];
          systemData.low_color_menu_content=systemData.display_low_color[systemData.index_display_menu_content_color];
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_TITLE_COLOR
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_TITLE_COLOR", strlen("INDEX_DISPLAY_TITLE_COLOR"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_title_color=atoi(sdcardData.token);
          systemData.color_title    =systemData.display_color[systemData.index_display_title_color];
          systemData.low_color_title=systemData.display_low_color[systemData.index_display_title_color];
        }
      }

      // ------------------------------------------------
      // INDEX_DISPLAY_COLOR_SUBTITLE
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "INDEX_DISPLAY_COLOR_SUBTITLE", strlen("INDEX_DISPLAY_COLOR_SUBTITLE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_display_color_subtitle=atoi(sdcardData.token);
          systemData.color_subtitle    =systemData.display_color[systemData.index_display_color_subtitle];
          systemData.low_color_subtitle=systemData.display_low_color[systemData.index_display_color_subtitle];
        }
      }

      // ------------------------------------------------
      // MATRIX_IO_ENABLED
      // ------------------------------------------------
      if (strncmp(sdcardData.BUFFER, "MATRIX_IO_ENABLED", strlen("MATRIX_IO_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.matrix_io_enabled=false;} else {systemData.matrix_io_enabled=true;}
        }
      }

      // ------------------------------------------------
      // SATIO_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "SATIO_ENABLED", strlen("SATIO_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.satio_enabled=false;} else {systemData.satio_enabled=true;}
        }
      }

      // ------------------------------------------------
      // GNGGA_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "GNGGA_ENABLED", strlen("GNGGA_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.gngga_enabled=false;} else {systemData.gngga_enabled=true;}
        }
      }

      // ------------------------------------------------
      // GNRMC_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "GNRMC_ENABLED", strlen("GNRMC_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.gnrmc_enabled=false;} else {systemData.gnrmc_enabled=true;}
        }
      }

      // ------------------------------------------------
      // GPATT_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "GPATT_ENABLED", strlen("GPATT_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.gpatt_enabled=false;} else {systemData.gpatt_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_SATIO_SENTENCE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_SATIO_SENTENCE", strlen("OUTPUT_SATIO_SENTENCE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_satio_enabled=false;} else {systemData.output_satio_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_GNGGA_SENTENCE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_GNGGA_SENTENCE", strlen("OUTPUT_GNGGA_SENTENCE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_gngga_enabled=false;} else {systemData.output_gngga_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_GNRMC_SENTENCE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_GNRMC_SENTENCE", strlen("OUTPUT_GNRMC_SENTENCE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_gnrmc_enabled=false;} else {systemData.output_gnrmc_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_GPATT_SENTENCE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_GPATT_SENTENCE", strlen("OUTPUT_GPATT_SENTENCE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_gpatt_enabled=false;} else {systemData.output_gpatt_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_MATRIX_SENTENCE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_MATRIX_SENTENCE", strlen("OUTPUT_MATRIX_SENTENCE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_matrix_enabled=false;} else {systemData.output_matrix_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_SENSORS_SENTENCE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_SENSORS_SENTENCE", strlen("OUTPUT_SENSORS_SENTENCE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_sensors_enabled=false;} else {systemData.output_sensors_enabled=true;}
        }
      }

      // ------------------------------------------------
      // UTC_SECOND_OFFSET
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "UTC_SECOND_OFFSET,", strlen("UTC_SECOND_OFFSET,"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          satData.utc_second_offset=atoi(sdcardData.token);
        }
      }

      // ------------------------------------------------
      // UTC_AUTO_OFFSET_FLAG
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "UTC_AUTO_OFFSET_FLAG", strlen("UTC_AUTO_OFFSET_FLAG"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {satData.utc_auto_offset_flag=false;} else {satData.utc_auto_offset_flag=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_SUN
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_SUN", strlen("TRACK_SUN"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_sun=false;} else {systemData.sidereal_track_sun=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_MOON
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_MOON", strlen("TRACK_MOON"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_moon=false;} else {systemData.sidereal_track_moon=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_MERCURY
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_MERCURY", strlen("TRACK_MERCURY"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_mercury=false;} else {systemData.sidereal_track_mercury=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_VENUS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_VENUS", strlen("TRACK_VENUS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_venus=false;} else {systemData.sidereal_track_venus=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_MARS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_MARS", strlen("TRACK_MARS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_mars=false;} else {systemData.sidereal_track_mars=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_JUPITER
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_JUPITER", strlen("TRACK_JUPITER"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_jupiter=false;} else {systemData.sidereal_track_jupiter=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_SATURN
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_SATURN", strlen("TRACK_SATURN"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_saturn=false;} else {systemData.sidereal_track_saturn=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_URANUS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_URANUS", strlen("TRACK_URANUS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_uranus=false;} else {systemData.sidereal_track_uranus=true;}
        }
      }

      // ------------------------------------------------
      // TRACK_NEPTUNE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TRACK_NEPTUNE", strlen("TRACK_NEPTUNE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.sidereal_track_neptune=false;} else {systemData.sidereal_track_neptune=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_SUN
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_SUN", strlen("OUTPUT_SUN"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_sun_enabled=false;} else {systemData.output_sun_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_MOON
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_MOON", strlen("OUTPUT_MOON"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_moon_enabled=false;} else {systemData.output_moon_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_MERCURY
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_MERCURY", strlen("OUTPUT_MERCURY"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_mercury_enabled=false;} else {systemData.output_mercury_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_VENUS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_VENUS", strlen("OUTPUT_VENUS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_venus_enabled=false;} else {systemData.output_venus_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_MARS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_MARS", strlen("OUTPUT_MARS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_mars_enabled=false;} else {systemData.output_mars_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_JUPITER
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_JUPITER", strlen("OUTPUT_JUPITER"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_jupiter_enabled=false;} else {systemData.output_jupiter_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_SATURN
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_SATURN", strlen("OUTPUT_SATURN"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_saturn_enabled=false;} else {systemData.output_saturn_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_URANUS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_URANUS", strlen("OUTPUT_URANUS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_uranus_enabled=false;} else {systemData.output_uranus_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_NEPTUNE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_NEPTUNE", strlen("OUTPUT_NEPTUNE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_neptune_enabled=false;} else {systemData.output_neptune_enabled=true;}
        }
      }

      // ------------------------------------------------
      // OUTPUT_METEORS
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "OUTPUT_METEORS", strlen("OUTPUT_METEORS"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          if (atoi(sdcardData.token)==0) {systemData.output_meteors_enabled=false;} else {systemData.output_meteors_enabled=true;}
        }
      }

      // ------------------------------------------------
      // INDEX_OVERLOAD_MAX
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "INDEX_OVERLOAD_MAX", strlen("INDEX_OVERLOAD_MAX"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_overload_times=atoi(sdcardData.token);
          systemData.overload_max=systemData.overload_times[systemData.index_overload_times];
        }
      }

      // ------------------------------------------------
      // INDEX_HOME_PAGE_FEATURE
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "INDEX_HOME_PAGE_FEATURE", strlen("INDEX_HOME_PAGE_FEATURE"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.index_home_page_feature=atoi(sdcardData.token);
        }
      }

      // ------------------------------------------------
      // CD74HC4067_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_ENABLED", strlen("CD74HC4067_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_enabled=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_0
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_0", strlen("CD74HC4067_CHANNEL_0"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[0]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_1
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_1", strlen("CD74HC4067_CHANNEL_1"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[1]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_2
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_2", strlen("CD74HC4067_CHANNEL_2"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[2]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_3
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_3", strlen("CD74HC4067_CHANNEL_3"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[3]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_4
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_4", strlen("CD74HC4067_CHANNEL_4"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[4]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_5
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_5", strlen("CD74HC4067_CHANNEL_5"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[5]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_6
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_6", strlen("CD74HC4067_CHANNEL_6"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[6]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_7
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_7", strlen("CD74HC4067_CHANNEL_7"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[7]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_8
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_8", strlen("CD74HC4067_CHANNEL_8"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[8]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_9
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_9", strlen("CD74HC4067_CHANNEL_9"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[9]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_10
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_10", strlen("CD74HC4067_CHANNEL_10"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[10]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_11
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_11", strlen("CD74HC4067_CHANNEL_11"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[11]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_12
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_12", strlen("CD74HC4067_CHANNEL_12"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[12]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_13
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_13", strlen("CD74HC4067_CHANNEL_13"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[13]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_14
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_14", strlen("CD74HC4067_CHANNEL_14"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[14]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // CD74HC4067_CHANNEL_15
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "CD74HC4067_CHANNEL_15", strlen("CD74HC4067_CHANNEL_15"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.CD74HC4067_channel_enabled[15]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_ENABLED", strlen("TCA9548A_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_enabled=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_0
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_0", strlen("TCA9548A_CHANNEL_0"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[0]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_1
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_1", strlen("TCA9548A_CHANNEL_1"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[1]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_2
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_2", strlen("TCA9548A_CHANNEL_2"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[2]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_3
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_3", strlen("TCA9548A_CHANNEL_3"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[3]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_4
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_4", strlen("TCA9548A_CHANNEL_4"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[4]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_5
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_5", strlen("TCA9548A_CHANNEL_5"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[5]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_6
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_6", strlen("TCA9548A_CHANNEL_6"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[6]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // TCA9548A_CHANNEL_7
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "TCA9548A_CHANNEL_7", strlen("TCA9548A_CHANNEL_7"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.TCA9548A_channel_enabled[7]=atoi(sdcardData.token);
        }
      }
      // ------------------------------------------------
      // WT901_ENABLED
      // ------------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "WT901_ENABLED", strlen("WT901_ENABLED"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          systemData.wt901_enabled=atoi(sdcardData.token);
        }
      }
      
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M10
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M10", strlen("MATRIX_INDICATOR_COLOR_M10"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][10]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M11
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M11", strlen("MATRIX_INDICATOR_COLOR_M11"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][11]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M12
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M12", strlen("MATRIX_INDICATOR_COLOR_M12"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][12]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M13
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M13", strlen("MATRIX_INDICATOR_COLOR_M13"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][13]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M14
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M14", strlen("MATRIX_INDICATOR_COLOR_M14"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][14]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M15
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M15", strlen("MATRIX_INDICATOR_COLOR_M15"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][15]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M16
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M16", strlen("MATRIX_INDICATOR_COLOR_M16"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][16]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M17
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M17", strlen("MATRIX_INDICATOR_COLOR_M17"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][17]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M18
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M18", strlen("MATRIX_INDICATOR_COLOR_M18"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][18]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M19
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M19", strlen("MATRIX_INDICATOR_COLOR_M19"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][19]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M0
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M0", strlen("MATRIX_INDICATOR_COLOR_M0"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][0]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M1
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M1", strlen("MATRIX_INDICATOR_COLOR_M1"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][1]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M2
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M2", strlen("MATRIX_INDICATOR_COLOR_M2"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][2]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M3
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M3", strlen("MATRIX_INDICATOR_COLOR_M3"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][3]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M4
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M4", strlen("MATRIX_INDICATOR_COLOR_M4"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][4]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M5
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M5", strlen("MATRIX_INDICATOR_COLOR_M5"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][5]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M6
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M6", strlen("MATRIX_INDICATOR_COLOR_M6"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][6]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M7
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M7", strlen("MATRIX_INDICATOR_COLOR_M7"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][7]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M8
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M8", strlen("MATRIX_INDICATOR_COLOR_M8"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][8]=atoi(sdcardData.token);
        }
      }
      // -----------------------------------------------
      // MATRIX_INDICATOR_COLOR_M9
      // -----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, "MATRIX_INDICATOR_COLOR_M9", strlen("MATRIX_INDICATOR_COLOR_M9"))==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        PrintFileToken();
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits(sdcardData.token)==true) {
          PrintFileToken();
          matrixData.matrix_indicator_colors[0][9]=atoi(sdcardData.token);
        }
      }

      // ---------------------------------------------------------
      // continue to enable/disable only if matrix runs on startup
      // ---------------------------------------------------------
      if (systemData.matrix_run_on_startup==true) {

        // ------------------------------------------------
        // enable the matrix
        // ------------------------------------------------
        if (strncmp(sdcardData.BUFFER, "MATRIX_ENABLED", strlen("MATRIX_ENABLED"))==0) {
          sdcardData.token=strtok(sdcardData.BUFFER, ",");
          PrintFileToken();
          sdcardData.token=strtok(NULL, ",");
          if (is_all_digits(sdcardData.token)==true) {
            PrintFileToken();
            if (atoi(sdcardData.token)==0) {systemData.matrix_enabled=false;} else {systemData.matrix_enabled=true;}
          }
        }
      }
    }
    // ------------------------------------------------
    // close
    // ------------------------------------------------
    exfile.close();
    Serial.println("[sdcard] loaded file successfully: " + String(file));
    return true;
  }
  // ------------------------------------------------
  // failed
  // ------------------------------------------------
  else {exfile.close(); Serial.println("[sdcard] failed to load file: " + String(file));
  return false;}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                         SDCARD: MAKE DIRECTORY
// ------------------------------------------------------------------------------------------------------------------------------ 

/* creates a single directory */

void sdcardMakeDir(char * dir){
  if (!sd.exists(dir)) {
    Serial.println("[sdcard] attempting to create directory: " + String(dir));
    if (!sd.mkdir(dir)) {Serial.println("[sdcard] failed to create directory: " + String(dir));}
    else {Serial.println("[sdcard] found directory: " + String(dir));}}
  else {Serial.println("[sdcard] directory already exists: " + String(dir));}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                SDCARD: MAKE SYSTEM DIRECTORIES
// ------------------------------------------------------------------------------------------------------------------------------ 

void sdcardMakeSystemDirs() {for (int i=0; i < 2; i++) {sdcardMakeDir(sdcardData.system_dirs[i]);}}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                           SDCARD: CREATE MATRIX FILE SLOT LIST
// ------------------------------------------------------------------------------------------------------------------------------ 

/*
 Creates array of filenames according to search parameters.
 Files that do not exist will be populated with EMPTY.
*/

String filepath_template_0 = "/MATRIX/M_REPLACE.SAVE";
String search_filepath_0;

void sdcardCreateMatrixFileSlotList() {
  // ------------------------------------------------
  // iterate
  // ------------------------------------------------
  for (int i=0; i < sdcardData.max_matrix_filenames; i++) {
    // ------------------------------------------------
    // clear existing slots
    // ------------------------------------------------
    memset(sdcardData.matrix_filenames[i], 0, 56);
    // ------------------------------------------------
    // formulate search string
    // ------------------------------------------------
    search_filepath_0=filepath_template_0;
    search_filepath_0.replace("REPLACE", String(i));
    // ------------------------------------------------
    // add to slot i
    // ------------------------------------------------
    if (sd.exists(search_filepath_0.c_str())) {
      memset(sdcardData.matrix_filenames[i], 0, 56);
      strcpy(sdcardData.matrix_filenames[i], search_filepath_0.c_str());
      Serial.println("[sdcard] found: " + String(sdcardData.matrix_filenames[i]));
      }
    // ------------------------------------------------
    // add to slot i
    // ------------------------------------------------
    else {strcpy(sdcardData.matrix_filenames[i], "EMPTY");}
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                      SDCARD: LIST MATRIX FILES
// ------------------------------------------------------------------------------------------------------------------------------ 

void sdcardListMatrixFiles() {
  // ------------------------------------------------
  // iterate
  // ------------------------------------------------
  for (int i=0; i < sdcardData.max_matrix_filenames; i++) {
    // ------------------------------------------------
    // formulate search string
    // ------------------------------------------------
    search_filepath_0=filepath_template_0;
    search_filepath_0.replace("REPLACE", String(i));
    // ------------------------------------------------
    // print
    // ------------------------------------------------
    if (sd.exists(search_filepath_0.c_str())) {
      Serial.println("[sdcard] found: " + String(sdcardData.matrix_filenames[i]));
      }
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                            SDCARD: LOAD MATRIX
// ------------------------------------------------------------------------------------------------------------------------------ 

/* loads tagged, comma delimited data from a matrix file */

bool sdcardLoadMatrix(char * file) {
  Serial.println("[sdcard] attempting to load file: " + String(file));
  exfile.flush();
  // ------------------------------------------------
  // open file
  // ------------------------------------------------
  exfile=sd.open(file); 
  if (exfile) {
    // ------------------------------------------------
    // begin reading
    // ------------------------------------------------
    while (exfile.available()) {
      // ----------------------------------------------
      // read line
      // ----------------------------------------------
      sdcardData.SBUFFER="";
      memset(sdcardData.BUFFER, 0, sizeof(sdcardData.BUFFER));
      sdcardData.SBUFFER=exfile.readStringUntil('\n');
      sdcardData.SBUFFER.toCharArray(sdcardData.BUFFER, sdcardData.SBUFFER.length()+1);
      Serial.println("[sdcard] [reading] " + String(sdcardData.BUFFER));
      // ----------------------------------------------
      // tag: r
      // ----------------------------------------------
      if (strncmp(sdcardData.BUFFER, sdcardData.tag_0, 1)==0) {
        // --------------------------------------------
        // ensure cleared
        // --------------------------------------------
        memset(sdcardData.data_0, 0, sizeof(sdcardData.data_0)); memset(sdcardData.data_1, 0, sizeof(sdcardData.data_1)); memset(sdcardData.data_2, 0, sizeof(sdcardData.data_2));
        memset(sdcardData.data_3, 0, sizeof(sdcardData.data_3)); memset(sdcardData.data_4, 0, sizeof(sdcardData.data_4)); memset(sdcardData.data_5, 0, sizeof(sdcardData.data_5));
        memset(sdcardData.data_6, 0, sizeof(sdcardData.data_6)); memset(sdcardData.data_7, 0, sizeof(sdcardData.data_7)); memset(sdcardData.data_8, 0, sizeof(sdcardData.data_8));
        memset(sdcardData.data_9, 0, sizeof(sdcardData.data_9));
        validData.bool_data_0=false;
        validData.bool_data_1=false;
        // --------------------------------------------
        // split line on delimiter
        // --------------------------------------------
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        // --------------------------------------------
        // matrix switch index
        // --------------------------------------------
        sdcardData.token=strtok(NULL, ",");
        strcpy(sdcardData.data_0, sdcardData.token);
        if (is_all_digits(sdcardData.data_0)==true) {
          validData.bool_data_0=true;
          // Serial.println("[Mi] [PASS] " +String(sdcardData.data_0));
        }
        // else {Serial.println("[Mi] [INVALID] " +String(sdcardData.data_0));}
        // --------------------------------------------
        // matrix switch function index
        // --------------------------------------------
        sdcardData.token=strtok(NULL, ",");
        strcpy(sdcardData.data_1, sdcardData.token);
        if (is_all_digits(sdcardData.data_1)==true) {
          validData.bool_data_1=true;
          // Serial.println("[Fi] [PASS] " +String(sdcardData.data_1));
        }
        // else {Serial.println("[Fi] [INVALID] " +String(sdcardData.data_1));}
        // --------------------------------------------
        // continue if we have valid index numbers
        // --------------------------------------------
        if ((validData.bool_data_0==true) && (validData.bool_data_1==true)) {
          // ------------------------------------------
          // matrix switch function name
          // ------------------------------------------
          sdcardData.token=strtok(NULL, ",");
          strcpy(sdcardData.data_2, sdcardData.token);
          memset(matrixData.matrix_function[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)], 0, sizeof(matrixData.matrix_function[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)]));
          strcpy(matrixData.matrix_function[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)], sdcardData.data_2);
          // Serial.println("[Fn] [MATRIX] " +String(matrixData.matrix_function[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)]));
          // ------------------------------------------
          // matrix switch function value x
          // ------------------------------------------
          sdcardData.token=strtok(NULL, ",");
          strcpy(sdcardData.data_3, sdcardData.token);
          if (is_positive_negative_num(sdcardData.data_3)==true) {
            matrixData.matrix_function_xyz[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)][0]=strtod(sdcardData.data_3, NULL);
            // Serial.println("[X]  [MATRIX] " +String(matrixData.matrix_function_xyz[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)][0]));
          }
          // else {Serial.println("[X] [INVALID] " + String(sdcardData.data_3));}
          // ------------------------------------------
          // matrix switch function value y
          // ------------------------------------------
          sdcardData.token=strtok(NULL, ",");
          strcpy(sdcardData.data_4, sdcardData.token);
          if (is_positive_negative_num(sdcardData.data_4)==true) {
            matrixData.matrix_function_xyz[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)][1]=strtod(sdcardData.data_4, NULL);
            // Serial.println("[Y]  [MATRIX] " +String(matrixData.matrix_function_xyz[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)][1]));
          }
          // else {Serial.println("[Y] [INVALID] " + String(sdcardData.data_4));}
          // ------------------------------------------
          // matrix switch function value z
          // ------------------------------------------
          sdcardData.token=strtok(NULL, ",");
          strcpy(sdcardData.data_5, sdcardData.token);
          if (is_positive_negative_num(sdcardData.data_5)==true) {
            matrixData.matrix_function_xyz[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)][2]=strtod(sdcardData.data_5, NULL);
            // Serial.println("[Z]  [MATRIX] " +String(matrixData.matrix_function_xyz[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)][2]));
          }
          // else {Serial.println("[Z] [INVALID] " + String(sdcardData.data_5));}
          // ------------------------------------------
          // matrix switch inverted function logic
          // ------------------------------------------
          sdcardData.token=strtok(NULL, ",");
          strcpy(sdcardData.data_8, sdcardData.token);
          if (is_all_digits(sdcardData.data_8)==true) {matrixData.matrix_switch_inverted_logic[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)]=atoi(sdcardData.data_8);}
          // ------------------------------------------
          // matrix switch expression index
          // ------------------------------------------
          sdcardData.token=strtok(NULL, ",");
          strcpy(sdcardData.data_9, sdcardData.token);
          if (is_all_digits(sdcardData.data_9)==true) {matrixData.matrix_switch_expression_index[atoi(sdcardData.data_0)][atoi(sdcardData.data_1)]=atoi(sdcardData.data_9);}
        }
      }
      // ----------------------------------------------
      // tag: e
      // ----------------------------------------------
      else if (strncmp(sdcardData.BUFFER, sdcardData.tag_1, 1)==0) {
        sdcardData.token=strtok(sdcardData.BUFFER, ",");
        sdcardData.token=strtok(NULL, ",");
        sdcardData.token=strtok(NULL, ",");
        // --------------------------------------------
        // enabled/disabled
        // --------------------------------------------
        strcpy(sdcardData.data_6, sdcardData.token);
        if (is_all_digits(sdcardData.data_6)==true) {
          matrixData.matrix_switch_enabled[0][atoi(sdcardData.data_0)]=atoi(sdcardData.data_6);
          // Serial.println("[E]  [MATRIX] " +String(matrixData.matrix_switch_enabled[0][atoi(sdcardData.data_0)]));
        }
        // else {Serial.println("[E]  [INVALID] " +String(sdcardData.data_6));}
        // --------------------------------------------
        // port
        // --------------------------------------------
        sdcardData.token=strtok(NULL, ",");
        if (is_all_digits_plus_char(sdcardData.data_7, '-')==true) {
          strcpy(sdcardData.data_7, sdcardData.token);
          matrixData.matrix_port_map[0][atoi(sdcardData.data_0)]=atoi(sdcardData.data_7);
          // Serial.println("[E]  [MATRIX] " +String(matrixData.matrix_port_map[0][atoi(sdcardData.data_0)]));
        }
        // else {Serial.println("[E]  [INVALID] " +String(sdcardData.data_7));}
      }
    }
    // ------------------------------------------------
    // close
    // ------------------------------------------------
    strcpy(sdcardData.tempmatrixfilepath, file);
    memset(sdcardData.matrix_filepath, 0, sizeof(sdcardData.matrix_filepath));
    strcpy(sdcardData.matrix_filepath, sdcardData.tempmatrixfilepath);
    Serial.println("[sdcard] loaded file successfully:   " + String(file));
    Serial.println("[sdcard] sdcardData.matrix_filepath: " + String(sdcardData.matrix_filepath));
    UpdateMatrixFileName(sdcardData.matrix_filepath);
    exfile.close();
    return true;
  }
  else {
    // ------------------------------------------------
    // failed
    // ------------------------------------------------
    exfile.close();
    Serial.println("[sdcard] failed to load file: " + String(file));
    return false;
    }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                            SDCARD: SAVE MATRIX
// ------------------------------------------------------------------------------------------------------------------------------ 

/* saves tagged, comma delimited data to a matrix file */

bool sdcardSaveMatrix(char * file) {
  Serial.println("[sdcard] attempting to save file: " + String(file));
  // ------------------------------------------------
  // open file
  // ------------------------------------------------
  exfile=sd.open(file, O_WRITE | O_CREAT);
  Serial.println("[sdcard exfile] " + String(exfile));
  if (exfile) {
    // ------------------------------------------------
    // begin writing
    // ------------------------------------------------
    for (int Mi=0; Mi < matrixData.max_matrices; Mi++) {
      for (int Fi=0; Fi < matrixData.max_matrix_functions; Fi++) {
        // --------------------------------------------
        // tag: matrix (r)
        // --------------------------------------------
        memset(sdcardData.file_data, 0 , sizeof(sdcardData.file_data));
        strcat(sdcardData.file_data, sdcardData.tag_0); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch index
        // --------------------------------------------
        memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
        sprintf(sdcardData.tmp, "%d", Mi);
        strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch function index
        // --------------------------------------------
        memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
        sprintf(sdcardData.tmp, "%d", Fi);
        strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // function name
        // --------------------------------------------
        strcat(sdcardData.file_data, matrixData.matrix_function[Mi][Fi]); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch function value x
        // --------------------------------------------
        strcat(sdcardData.file_data, String(matrixData.matrix_function_xyz[Mi][Fi][0], 10).c_str()); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch function value y
        // --------------------------------------------
        strcat(sdcardData.file_data, String(matrixData.matrix_function_xyz[Mi][Fi][1], 10).c_str()); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch function value z
        // --------------------------------------------
        strcat(sdcardData.file_data, String(matrixData.matrix_function_xyz[Mi][Fi][2], 10).c_str()); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch inverted function logic
        // --------------------------------------------
        memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
        itoa(matrixData.matrix_switch_inverted_logic[Mi][Fi], sdcardData.tmp, 10);
        strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);
        // --------------------------------------------
        // matrix switch expression index
        // --------------------------------------------
        memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
        itoa(matrixData.matrix_switch_expression_index[Mi][Fi], sdcardData.tmp, 10);
        strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);

        // --------------------------------------------
        // write line
        // --------------------------------------------
        Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
        exfile.println(sdcardData.file_data);
      }
      // ----------------------------------------------
      // tag: enable (e)
      // ----------------------------------------------
      memset(sdcardData.file_data, 0 , sizeof(sdcardData.file_data));
      strcat(sdcardData.file_data, sdcardData.tag_1); strcat(sdcardData.file_data, sdcardData.delim);
      // ----------------------------------------------
      // matrix switch index
      // ----------------------------------------------
      memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
      sprintf(sdcardData.tmp, "%d", Mi);
      strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);
      // ----------------------------------------------
      // matrix switch enabled/disabled
      // ----------------------------------------------
      memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
      itoa(matrixData.matrix_switch_enabled[0][Mi], sdcardData.tmp, 10);
      strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);
      // ----------------------------------------------
      // matrix switch port
      // ----------------------------------------------
      memset(sdcardData.tmp, 0 , sizeof(sdcardData.tmp));
      itoa(matrixData.matrix_port_map[0][Mi], sdcardData.tmp, 10);
      Serial.println("[check] " + String(matrixData.matrix_port_map[0][Mi]));
      strcat(sdcardData.file_data, sdcardData.tmp); strcat(sdcardData.file_data, sdcardData.delim);
      // ----------------------------------------------
      // write line
      // ----------------------------------------------
      Serial.println("[sdcard] [writing] " + String(sdcardData.file_data));
      exfile.println("");
      exfile.println(sdcardData.file_data);
      exfile.println("");
    }
    // ------------------------------------------------
    // close
    // ------------------------------------------------
    exfile.close();
    Serial.println("[sdcard] saved file successfully: " + String(file));
    UpdateMatrixFileNameFilePath(file);
    // ---------------------------------
    // recreate matrix filenames
    // ---------------------------------
    sdcardCreateMatrixFileSlotList();
    return true;
  }
  // ------------------------------------------------
  // failed
  // ------------------------------------------------
  else {exfile.close(); Serial.println("[sdcard] failed to save file: " + String(file));
  return false;}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                     SDCARD: DELETE MATRIX FILE
// ------------------------------------------------------------------------------------------------------------------------------ 

void sdcardDeleteMatrix(char * file) {
  if (sd.exists(file)) {
    Serial.println("[sdcard] attempting to delete file: " + String(file));
    // -----------------------------------
    // try remove
    // -----------------------------------
    sd.remove(file);
    if (!sd.exists(file)) {
      Serial.println("[sdcard] successfully deleted file: " + String(file));
      Serial.println("attempting to remove filename from filenames.");
      // ---------------------------------
      // recreate matrix filenames
      // ---------------------------------
      sdcardCreateMatrixFileSlotList();
      // ---------------------------------
      // zero the matrix
      // ---------------------------------
      zero_matrix();
      // ---------------------------------
      // update filename and file path
      // ---------------------------------
      memset(sdcardData.matrix_filepath, 0, sizeof(sdcardData.matrix_filepath));
      memset(sdcardData.matrix_filename, 0, sizeof(sdcardData.matrix_filename));
    }
    else {Serial.println("[sdcard] failed to deleted file: " + String(file));}
  }
  else {Serial.println("[sdcard] file does not exist: " + String(file));}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                        SDCARD: FULL INITIALIZE
// ------------------------------------------------------------------------------------------------------------------------------

void setupSDCard() {
  /*
  initializes sdcard, attempts to load saved system configuration file and saved matrix file. creates new directory tree, system file
  and matrix file if not exists.
  */
  if (!sd.begin(SD_CONFIG)) {
    Serial.println("[sdcard] failed to initialize");
  }
  else {
    Serial.println("[sdcard] initialized");
    // ----------------------------------------------------
    // create/load system files
    // ----------------------------------------------------
    sdcardMakeSystemDirs();
    // ----------------------------------------------------
    // load system configuration file
    // ----------------------------------------------------
    if (!sdcardLoadSystemConfig(sdcardData.sysconf)) {sdcardSaveSystemConfig(sdcardData.sysconf);}
    // ----------------------------------------------------
    // load matrix file specified by configuration file
    // ----------------------------------------------------
    if (!sdcardLoadMatrix(sdcardData.matrix_filepath)) {
      Serial.println("[sdcard] specified matrix file not found!");
      // --------------------------------------------------
      // is it the the default matrix file that is missing?
      // --------------------------------------------------
      if (strcmp(sdcardData.matrix_filepath, sdcardData.default_matrix_filepath)==0) {
        Serial.println("[sdcard] default matrix file not found!");
        // ------------------------------------------------
        // create default matrix file
        // ------------------------------------------------
        if (!sdcardSaveMatrix(sdcardData.matrix_filepath)) {Serial.println("[sdcard] failed to write default marix file.");}
        else if (!sdcardLoadMatrix(sdcardData.default_matrix_filepath)) {Serial.println("[sdcard] failed to load matrix file");}
      }
    }
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                            SDCARD: QUICK CHECK
// ------------------------------------------------------------------------------------------------------------------------------

void sdcardQuickCheck() {
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // --------------------------------------------
    // end spi device
    // --------------------------------------------
    endSPIDevice(SSD1351_CS);
  }
  // ----------------------------------------------
  // SDCARD
  // ----------------------------------------------
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  if (sd.cardBegin(SD_CONFIG)) {Serial.println("[sdcard] initialized");}
  else {Serial.println("[sdcard] could not begin card");}
  sd.end();
  endSPIDevice(SD_CS);
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // --------------------------------------------
    // begin spi device
    // --------------------------------------------
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS); 
    display.begin();
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                       VOLCANOS
// ------------------------------------------------------------------------------------------------------------------------------

#define max_volcanos 435
int volcano_index_key=0;

// -----------------------------------------------------------------
/*
   getVolcanoName provides a much lower memory footprint than a char
   array of volcano names.

   getVolcanoName should be accessed via: volcano_index_key
*/
// -----------------------------------------------------------------
String v_name_string;

String getVolcanoName(int index) {
  if (index==0) {v_name_string="Abu";}
  else if (index==1) {v_name_string="Acamarachi";}
  else if (index==2) {v_name_string="Acatenango";}
  else if (index==3) {v_name_string="Acigol-Nevsehir";}
  else if (index==4) {v_name_string="Adams";}
  else if (index==5) {v_name_string="Adams Seamount";}
  else if (index==6) {v_name_string="Adatara";}
  else if (index==7) {v_name_string="Adwa";}
  else if (index==8) {v_name_string="Afdera";}
  else if (index==9) {v_name_string="Agrigan";}
  else if (index==10) {v_name_string="Agua";}
  else if (index==11) {v_name_string="Agua de Pau";}
  else if (index==12) {v_name_string="Aguilera";}
  else if (index==13) {v_name_string="Agung";}
  else if (index==14) {v_name_string="Ahyi";}
  else if (index==15) {v_name_string="Akademia Nauk";}
  else if (index==16) {v_name_string="Akagi";}
  else if (index==17) {v_name_string="Akan";}
  else if (index==18) {v_name_string="Akhtang";}
  else if (index==19) {v_name_string="Akita Komagatake";}
  else if (index==20) {v_name_string="Akita Yakeyama";}
  else if (index==21) {v_name_string="Akuseki-jima";}
  else if (index==22) {v_name_string="Akutan";}
  else if (index==23) {v_name_string="Alaid";}
  else if (index==24) {v_name_string="Alamagan";}
  else if (index==25) {v_name_string="Alayta";}
  else if (index==26) {v_name_string="Alban Hills";}
  else if (index==27) {v_name_string="Alcedo";}
  else if (index==28) {v_name_string="Ale Bagu";}
  else if (index==29) {v_name_string="Alid";}
  else if (index==30) {v_name_string="Ambrym";}
  else if (index==31) {v_name_string="Ambrym";}
  else if (index==32) {v_name_string="Anatahan";}
  else if (index==33) {v_name_string="Aneityum";}
  else if (index==34) {v_name_string="Aniakchak";}
  else if (index==35) {v_name_string="Antisana";}
  else if (index==36) {v_name_string="Aoba";}
  else if (index==37) {v_name_string="Ararat";}
  else if (index==38) {v_name_string="Arenal";}
  else if (index==39) {v_name_string="Arintica";}
  else if (index==40) {v_name_string="Asacha";}
  else if (index==41) {v_name_string="Asama";}
  else if (index==42) {v_name_string="Ascensión";}
  else if (index==43) {v_name_string="Askja";}
  else if (index==44) {v_name_string="Aso";}
  else if (index==45) {v_name_string="Atitlan";}
  else if (index==46) {v_name_string="Atka";}
  else if (index==47) {v_name_string="Atsonupuri";}
  else if (index==48) {v_name_string="Augustine";}
  else if (index==49) {v_name_string="Avachinsky";}
  else if (index==50) {v_name_string="Awu";}
  else if (index==51) {v_name_string="Axial Seamount";}
  else if (index==52) {v_name_string="Ayelu";}
  else if (index==53) {v_name_string="Azufre";}
  else if (index==54) {v_name_string="Azuma";}
  else if (index==55) {v_name_string="Babuyon Claro";}
  else if (index==56) {v_name_string="Bachelor";}
  else if (index==57) {v_name_string="Bagana";}
  else if (index==58) {v_name_string="Baker";}
  else if (index==59) {v_name_string="Bam";}
  else if (index==60) {v_name_string="Bamus";}
  else if (index==61) {v_name_string="Bandai";}
  else if (index==62) {v_name_string="Barren Island";}
  else if (index==63) {v_name_string="Barrier";}
  else if (index==64) {v_name_string="Bazman";}
  else if (index==65) {v_name_string="Beerenberg";}
  else if (index==66) {v_name_string="Belknap";}
  else if (index==67) {v_name_string="Bezymianny";}
  else if (index==68) {v_name_string="Biliran";}
  else if (index==69) {v_name_string="Bolshoi Semiachik";}
  else if (index==70) {v_name_string="Bulusan";}
  else if (index==71) {v_name_string="Butajira";}
  else if (index==72) {v_name_string="Butajira";}
  else if (index==73) {v_name_string="Cameroon (Mount)";}
  else if (index==74) {v_name_string="Camiguin Babuyanes";}
  else if (index==75) {v_name_string="Canlaon";}
  else if (index==76) {v_name_string="Capulin";}
  else if (index==77) {v_name_string="Carrizozo";}
  else if (index==78) {v_name_string="Cayambe";}
  else if (index==79) {v_name_string="Cereme";}
  else if (index==80) {v_name_string="Chaine des Puys";}
  else if (index==81) {v_name_string="Chiginagak";}
  else if (index==82) {v_name_string="Chikurachki";}
  else if (index==83) {v_name_string="Chimborazo";}
  else if (index==84) {v_name_string="Cleveland";}
  else if (index==85) {v_name_string="Coatepeque";}
  else if (index==86) {v_name_string="Colima";}
  else if (index==87) {v_name_string="Columbia Basalts";}
  else if (index==88) {v_name_string="Concepción";}
  else if (index==89) {v_name_string="Copahue";}
  else if (index==90) {v_name_string="Cosiguina";}
  else if (index==91) {v_name_string="Cotopaxi";}
  else if (index==92) {v_name_string="Crater Lake";}
  else if (index==93) {v_name_string="Craters of the Moon";}
  else if (index==94) {v_name_string="Daisetsu";}
  else if (index==95) {v_name_string="Dakataua";}
  else if (index==96) {v_name_string="Damavand";}
  else if (index==97) {v_name_string="Deccan Traps";}
  else if (index==98) {v_name_string="Dempo";}
  else if (index==99) {v_name_string="Devils Garden";}
  else if (index==100) {v_name_string="Devils Tower";}
  else if (index==101) {v_name_string="Diamond Craters";}
  else if (index==102) {v_name_string="Dieng Complex";}
  else if (index==103) {v_name_string="Diky Greben";}
  else if (index==104) {v_name_string="Dubbi";}
  else if (index==105) {v_name_string="Dukono";}
  else if (index==106) {v_name_string="East Epi";}
  else if (index==107) {v_name_string="Ebeko";}
  else if (index==108) {v_name_string="Egmont (Taranaki)";}
  else if (index==109) {v_name_string="Egon";}
  else if (index==110) {v_name_string="El Chichon";}
  else if (index==111) {v_name_string="Elbrus";}
  else if (index==112) {v_name_string="Erebus";}
  else if (index==113) {v_name_string="Erta Ale";}
  else if (index==114) {v_name_string="Etna";}
  else if (index==115) {v_name_string="Fantale";}
  else if (index==116) {v_name_string="Fernandina";}
  else if (index==117) {v_name_string="Fisher";}
  else if (index==118) {v_name_string="Fogo";}
  else if (index==119) {v_name_string="Fort Rock";}
  else if (index==120) {v_name_string="Frosty Peak";}
  else if (index==121) {v_name_string="Fuego";}
  else if (index==122) {v_name_string="Fuerteventura";}
  else if (index==123) {v_name_string="Fuji";}
  else if (index==124) {v_name_string="Furnas";}
  else if (index==125) {v_name_string="Fuss Peak";}
  else if (index==126) {v_name_string="Galeras";}
  else if (index==127) {v_name_string="Galunggung";}
  else if (index==128) {v_name_string="Gamalama";}
  else if (index==129) {v_name_string="Gamchen";}
  else if (index==130) {v_name_string="Gamkonora";}
  else if (index==131) {v_name_string="Gareloi";}
  else if (index==132) {v_name_string="Gaua";}
  else if (index==133) {v_name_string="Gede";}
  else if (index==134) {v_name_string="Glacier Peak";}
  else if (index==135) {v_name_string="Gorely";}
  else if (index==136) {v_name_string="Graciosa";}
  else if (index==137) {v_name_string="Gran Canaria";}
  else if (index==138) {v_name_string="Great Sitkin";}
  else if (index==139) {v_name_string="Griggs";}
  else if (index==140) {v_name_string="Grímsvotn";}
  else if (index==141) {v_name_string="Guagua Pichincha";}
  else if (index==142) {v_name_string="Guallatiri";}
  else if (index==143) {v_name_string="Guguan";}
  else if (index==144) {v_name_string="Hakone";}
  else if (index==145) {v_name_string="Heard";}
  else if (index==146) {v_name_string="Hibok-hibok";}
  else if (index==147) {v_name_string="Hierro";}
  else if (index==148) {v_name_string="Hood";}
  else if (index==149) {v_name_string="Hualalai";}
  else if (index==150) {v_name_string="Ibu";}
  else if (index==151) {v_name_string="Ijen";}
  else if (index==152) {v_name_string="Iliamna";}
  else if (index==153) {v_name_string="Iliboleng";}
  else if (index==154) {v_name_string="Iliniza";}
  else if (index==155) {v_name_string="Ilopango";}
  else if (index==156) {v_name_string="Ilyinsky";}
  else if (index==157) {v_name_string="Ioto (Iwo-jima)";}
  else if (index==158) {v_name_string="Iraya";}
  else if (index==159) {v_name_string="Irazu";}
  else if (index==160) {v_name_string="Isanotski";}
  else if (index==161) {v_name_string="Izalco";}
  else if (index==162) {v_name_string="Iztaccihuatl";}
  else if (index==163) {v_name_string="Izu-Tobu";}
  else if (index==164) {v_name_string="Jailolo";}
  else if (index==165) {v_name_string="Jefferson";}
  else if (index==166) {v_name_string="Jordan Craters";}
  else if (index==167) {v_name_string="Kadovar";}
  else if (index==168) {v_name_string="Kaguyak";}
  else if (index==169) {v_name_string="Kahoolawe";}
  else if (index==170) {v_name_string="Kambalny";}
  else if (index==171) {v_name_string="Kanaga";}
  else if (index==172) {v_name_string="Karangetang";}
  else if (index==173) {v_name_string="Karisimbi";}
  else if (index==174) {v_name_string="Karisimbi";}
  else if (index==175) {v_name_string="Karthala";}
  else if (index==176) {v_name_string="Karymsky";}
  else if (index==177) {v_name_string="Katla";}
  else if (index==178) {v_name_string="Katmai";}
  else if (index==179) {v_name_string="Katwe-Kikorongo";}
  else if (index==180) {v_name_string="Kavachi";}
  else if (index==181) {v_name_string="Kell";}
  else if (index==182) {v_name_string="Kelut";}
  else if (index==183) {v_name_string="Kerinci";}
  else if (index==184) {v_name_string="Khodutka";}
  else if (index==185) {v_name_string="Kialagvik";}
  else if (index==186) {v_name_string="Kick 'em Jenny";}
  else if (index==187) {v_name_string="Kikai";}
  else if (index==188) {v_name_string="Kikhpinych";}
  else if (index==189) {v_name_string="Kilauea";}
  else if (index==190) {v_name_string="Kilimanjaro";}
  else if (index==191) {v_name_string="Kirishima";}
  else if (index==192) {v_name_string="Kliuchevskoi";}
  else if (index==193) {v_name_string="Komagatake";}
  else if (index==194) {v_name_string="Kone";}
  else if (index==195) {v_name_string="Koryaksky";}
  else if (index==196) {v_name_string="Koshelev";}
  else if (index==197) {v_name_string="Krafla";}
  else if (index==198) {v_name_string="Krakatau";}
  else if (index==199) {v_name_string="Krasheninnikov";}
  else if (index==200) {v_name_string="Kronotsky";}
  else if (index==201) {v_name_string="Ksudach";}
  else if (index==202) {v_name_string="Kukak";}
  else if (index==203) {v_name_string="Kusatsu-Shirane";}
  else if (index==204) {v_name_string="Kutcharo";}
  else if (index==205) {v_name_string="Kuttara";}
  else if (index==206) {v_name_string="Kuwae";}
  else if (index==207) {v_name_string="La Palma";}
  else if (index==208) {v_name_string="Lamington";}
  else if (index==209) {v_name_string="Langila";}
  else if (index==210) {v_name_string="Lanzarote";}
  else if (index==211) {v_name_string="Láscar";}
  else if (index==212) {v_name_string="Lereboleng";}
  else if (index==213) {v_name_string="Lewotobi";}
  else if (index==214) {v_name_string="Lewotolo";}
  else if (index==215) {v_name_string="Liamuiga";}
  else if (index==216) {v_name_string="Lipari";}
  else if (index==217) {v_name_string="Little Sitkin";}
  else if (index==218) {v_name_string="Loihi";}
  else if (index==219) {v_name_string="Lokon-Empung";}
  else if (index==220) {v_name_string="Lolo";}
  else if (index==221) {v_name_string="Lolobau";}
  else if (index==222) {v_name_string="Loloru";}
  else if (index==223) {v_name_string="Long Island";}
  else if (index==224) {v_name_string="Longonot";}
  else if (index==225) {v_name_string="Lopevi";}
  else if (index==226) {v_name_string="Maderas";}
  else if (index==227) {v_name_string="Mageik";}
  else if (index==228) {v_name_string="Mahawu";}
  else if (index==229) {v_name_string="Makian";}
  else if (index==230) {v_name_string="Maly Semiachik";}
  else if (index==231) {v_name_string="Manam";}
  else if (index==232) {v_name_string="Mariveles";}
  else if (index==233) {v_name_string="Marsabit";}
  else if (index==234) {v_name_string="Masaya";}
  else if (index==235) {v_name_string="Mashkovtsev";}
  else if (index==236) {v_name_string="Mashu";}
  else if (index==237) {v_name_string="Mauna Kea";}
  else if (index==238) {v_name_string="Mauna Loa";}
  else if (index==239) {v_name_string="Mayon";}
  else if (index==240) {v_name_string="McDonald Islands";}
  else if (index==241) {v_name_string="McLoughlin";}
  else if (index==242) {v_name_string="McLoughlin";}
  else if (index==243) {v_name_string="Mega Basalt Field";}
  else if (index==244) {v_name_string="Mega Basalt Field";}
  else if (index==245) {v_name_string="Menan Buttes";}
  else if (index==246) {v_name_string="Menengai";}
  else if (index==247) {v_name_string="Merapi";}
  else if (index==248) {v_name_string="Merbabu";}
  else if (index==249) {v_name_string="Meru";}
  else if (index==250) {v_name_string="Methana";}
  else if (index==251) {v_name_string="Metis Shoal";}
  else if (index==252) {v_name_string="Michael";}
  else if (index==253) {v_name_string="MichoacanGuanajuato";}
  else if (index==254) {v_name_string="Mílos";}
  else if (index==255) {v_name_string="Miyake-jima";}
  else if (index==256) {v_name_string="Moffett";}
  else if (index==257) {v_name_string="Mojanda";}
  else if (index==258) {v_name_string="Momotombo";}
  else if (index==259) {v_name_string="Monaco Bank";}
  else if (index==260) {v_name_string="Mono Lake v. Field";}
  else if (index==261) {v_name_string="Monowai Seamount";}
  else if (index==262) {v_name_string="Moti";}
  else if (index==263) {v_name_string="Muria";}
  else if (index==264) {v_name_string="Nantai";}
  else if (index==265) {v_name_string="Nasu";}
  else if (index==266) {v_name_string="Navajo v. Field";}
  else if (index==267) {v_name_string="Negro, Cerro";}
  else if (index==268) {v_name_string="Nemo Peak";}
  else if (index==269) {v_name_string="Nevis Peak";}
  else if (index==270) {v_name_string="Newberry";}
  else if (index==271) {v_name_string="Newer v. Province";}
  else if (index==272) {v_name_string="Ngauruhoe";}
  else if (index==273) {v_name_string="Nikko-Shirane";}
  else if (index==274) {v_name_string="Nipesotsu-Maruyama";}
  else if (index==275) {v_name_string="Nisyros";}
  else if (index==276) {v_name_string="Nyambeni Hills";}
  else if (index==277) {v_name_string="Nyamuragira";}
  else if (index==278) {v_name_string="Nyiragongo";}
  else if (index==279) {v_name_string="Oahu";}
  else if (index==280) {v_name_string="Ojos del Salado";}
  else if (index==281) {v_name_string="Ojos del Salado";}
  else if (index==282) {v_name_string="Okataina";}
  else if (index==283) {v_name_string="Okmok";}
  else if (index==284) {v_name_string="Oku v. Field";}
  else if (index==285) {v_name_string="Ol Doinyo Lengai";}
  else if (index==286) {v_name_string="Opala";}
  else if (index==287) {v_name_string="Oraefajokull";}
  else if (index==288) {v_name_string="Oshima";}
  else if (index==289) {v_name_string="Pacaya";}
  else if (index==290) {v_name_string="Pagan";}
  else if (index==291) {v_name_string="Pago";}
  else if (index==292) {v_name_string="Papandayan";}
  else if (index==293) {v_name_string="Paricutin";}
  else if (index==294) {v_name_string="Parinacota";}
  else if (index==295) {v_name_string="Parinacota";}
  else if (index==296) {v_name_string="Pauzhetka";}
  else if (index==297) {v_name_string="Pavlof";}
  else if (index==298) {v_name_string="Pavlof Sister";}
  else if (index==299) {v_name_string="Pelee";}
  else if (index==300) {v_name_string="Peuet Sague";}
  else if (index==301) {v_name_string="Pico";}
  else if (index==302) {v_name_string="Pilas, Las";}
  else if (index==303) {v_name_string="Pinacate";}
  else if (index==304) {v_name_string="Pinatubo";}
  else if (index==305) {v_name_string="Pisgah Lava Field";}
  else if (index==306) {v_name_string="Piton dela Fournaise";}
  else if (index==307) {v_name_string="Poas";}
  else if (index==308) {v_name_string="Popocatepetl";}
  else if (index==309) {v_name_string="Prevo Peak";}
  else if (index==310) {v_name_string="Purace";}
  else if (index==311) {v_name_string="Quill, The";}
  else if (index==312) {v_name_string="Rabaul";}
  else if (index==313) {v_name_string="Ragang";}
  else if (index==314) {v_name_string="Raikoke";}
  else if (index==315) {v_name_string="Rainier";}
  else if (index==316) {v_name_string="Rajabasa";}
  else if (index==317) {v_name_string="Raoul";}
  else if (index==318) {v_name_string="Rasshua";}
  else if (index==319) {v_name_string="Raung";}
  else if (index==320) {v_name_string="Rausu";}
  else if (index==321) {v_name_string="Redoubt";}
  else if (index==322) {v_name_string="Reventador";}
  else if (index==323) {v_name_string="Rincon de la Vieja";}
  else if (index==324) {v_name_string="Roundtop";}
  else if (index==325) {v_name_string="Ruapehu";}
  else if (index==326) {v_name_string="Rudakov";}
  else if (index==327) {v_name_string="Ruiz, Nevado del";}
  else if (index==328) {v_name_string="Rumble IV";}
  else if (index==329) {v_name_string="Saba";}
  else if (index==330) {v_name_string="Sabancaya";}
  else if (index==331) {v_name_string="Sakar";}
  else if (index==332) {v_name_string="Sakura-jima";}
  else if (index==333) {v_name_string="Salak";}
  else if (index==334) {v_name_string="San Cristobal";}
  else if (index==335) {v_name_string="San Salvador";}
  else if (index==336) {v_name_string="San Vicente";}
  else if (index==337) {v_name_string="Sanford";}
  else if (index==338) {v_name_string="Sangay";}
  else if (index==339) {v_name_string="Santa Ana";}
  else if (index==340) {v_name_string="Santa Maria";}
  else if (index==341) {v_name_string="Santorini";}
  else if (index==342) {v_name_string="Sarychev Peak";}
  else if (index==343) {v_name_string="Savo";}
  else if (index==344) {v_name_string="Segula";}
  else if (index==345) {v_name_string="Semeru";}
  else if (index==346) {v_name_string="Semisopochnoi";}
  else if (index==347) {v_name_string="Sete Cidades";}
  else if (index==348) {v_name_string="Shasta";}
  else if (index==349) {v_name_string="Sheveluch";}
  else if (index==350) {v_name_string="Shikotsu";}
  else if (index==351) {v_name_string="Shiretoko-Iwo-zan";}
  else if (index==352) {v_name_string="Shishaldin";}
  else if (index==353) {v_name_string="Sinarka";}
  else if (index==354) {v_name_string="Smirnov";}
  else if (index==355) {v_name_string="Sollipulli";}
  else if (index==356) {v_name_string="Soputan";}
  else if (index==357) {v_name_string="Soufriere Guadeloupe";}
  else if (index==358) {v_name_string="Soufrière Hills";}
  else if (index==359) {v_name_string="SoufriereSt.Vincent";}
  else if (index==360) {v_name_string="South Island";}
  else if (index==361) {v_name_string="SP Mountain";}
  else if (index==362) {v_name_string="Spurr";}
  else if (index==363) {v_name_string="Srednii";}
  else if (index==364) {v_name_string="Steller";}
  else if (index==365) {v_name_string="Stromboli";}
  else if (index==366) {v_name_string="Sumaco";}
  else if (index==367) {v_name_string="Sumbing";}
  else if (index==368) {v_name_string="Sundoro";}
  else if (index==369) {v_name_string="Sunset Craters";}
  else if (index==370) {v_name_string="Suswa";}
  else if (index==371) {v_name_string="Suwanose-jima";}
  else if (index==372) {v_name_string="Taal";}
  else if (index==373) {v_name_string="Talang";}
  else if (index==374) {v_name_string="Tambora";}
  else if (index==375) {v_name_string="Tanaga & Takawangha";}
  else if (index==376) {v_name_string="Tangkubanparahu";}
  else if (index==377) {v_name_string="Tao-Rusyr Caldera";}
  else if (index==378) {v_name_string="Tarso Voon";}
  else if (index==379) {v_name_string="Telica Volcano";}
  else if (index==380) {v_name_string="Tenerife";}
  else if (index==381) {v_name_string="TenggerCaldera&Bromo";}
  else if (index==382) {v_name_string="Three Fingered Jack";}
  else if (index==383) {v_name_string="Three Sisters";}
  else if (index==384) {v_name_string="Thule Islands";}
  else if (index==385) {v_name_string="Tiatia";}
  else if (index==386) {v_name_string="Toba";}
  else if (index==387) {v_name_string="Todoko-Ranu";}
  else if (index==388) {v_name_string="Tokachi";}
  else if (index==389) {v_name_string="Tolbachik";}
  else if (index==390) {v_name_string="Tolimán";}
  else if (index==391) {v_name_string="Towada";}
  else if (index==392) {v_name_string="Traitor's Head";}
  else if (index==393) {v_name_string="Tri Sestry";}
  else if (index==394) {v_name_string="Tristan da Cunha";}
  else if (index==395) {v_name_string="Tsurumi";}
  else if (index==396) {v_name_string="Tungurahua";}
  else if (index==397) {v_name_string="Ubehebe Craters";}
  else if (index==398) {v_name_string="Ubinas";}
  else if (index==399) {v_name_string="Udina";}
  else if (index==400) {v_name_string="Ugashik & Peulik";}
  else if (index==401) {v_name_string="Uinkaret v. Field";}
  else if (index==402) {v_name_string="Ulawun";}
  else if (index==403) {v_name_string="Umboi";}
  else if (index==404) {v_name_string="Undara";}
  else if (index==405) {v_name_string="Ungaran & Telomoyo";}
  else if (index==406) {v_name_string="Unzen";}
  else if (index==407) {v_name_string="Urataman";}
  else if (index==408) {v_name_string="Ushishur";}
  else if (index==409) {v_name_string="Usu";}
  else if (index==410) {v_name_string="Uzon";}
  else if (index==411) {v_name_string="Veniaminof";}
  else if (index==412) {v_name_string="Vernadskii Ridge";}
  else if (index==413) {v_name_string="Vesuvius";}
  else if (index==414) {v_name_string="Villarrica";}
  else if (index==415) {v_name_string="Vilyuchik";}
  else if (index==416) {v_name_string="Visoke";}
  else if (index==417) {v_name_string="Visoke";}
  else if (index==418) {v_name_string="Vsevidof&Recheschnoi";}
  else if (index==419) {v_name_string="Vulcano";}
  else if (index==420) {v_name_string="Washington";}
  else if (index==421) {v_name_string="Wau-en-Namus";}
  else if (index==422) {v_name_string="Westdahl";}
  else if (index==423) {v_name_string="White Island";}
  else if (index==424) {v_name_string="Wrangell";}
  else if (index==425) {v_name_string="Wudalianchi";}
  else if (index==426) {v_name_string="Yake-dake";}
  else if (index==427) {v_name_string="Yali";}
  else if (index==428) {v_name_string="Yantarni";}
  else if (index==429) {v_name_string="Yasur";}
  else if (index==430) {v_name_string="Yellowstone";}
  else if (index==431) {v_name_string="Zavaritzki Caldera";}
  else if (index==432) {v_name_string="Zheltovsky";}
  else if (index==433) {v_name_string="Zhupanovsky";}
  else if (index==434) {v_name_string="Zimina";}
  return v_name_string;
}

// -----------------------------------------------------------------
/*
   volcano_loaction should be accessed via: volcano_index[0]
*/
// -----------------------------------------------------------------
char volcano_loaction[57][29] = {"Antarctica", "Argentina", "Argentina, Chile", "Australia", "Bolivia, Chile", "Cameroon",
                   "Cape Verde Islands", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo, Rwanda", "Costa Rica",
                   "Democratic Republic of Congo", "Ecuador", "El Salvador", "Eritrea", "Ethiopia", "Ethiopia, Kenya",
                   "France", "Galápagos Islands", "Greece", "Grenada", "Guatemala", "Iceland", "India", "Indonesia",
                   "Iran", "Italy", "Japan", "Kenya", "Libya", "Mariana Islands", "Mexico", "Netherlands",
                   "New Zealand", "Nicaragua", "Norway", "Pacific Ocean", "Papua New Guinea", "Peru", "Philippines",
                   "Portugal", "Russia", "Solomon Islands", "South Atlantic Ocean", "Spain", "St. Kitts and Nevis",
                   "St. Vincent", "Tanzania", "Tonga", "Turkey", "Uganda", "United Kingdom", "United States",
                   "Vanuatu"};

// -----------------------------------------------------------------
/*
   volcano_type should be accessed via: volcano_index[1]
*/
// -----------------------------------------------------------------
char volcano_type[19][25] = {"", "Caldera", "Caldera, Shield", "Cinder Cone", "Complex", "Fissure vent", "Fissure vent, Maar",
                   "Flood Basalt", "Lava cone, Stratovolcano", "Lava dome", "Maar", "Plug", "Pyroclastic cone",
                   "Shield", "Somma", "Stratovolcano", "Submarine", "Tuff ring", "Volcanic field"};

// -----------------------------------------------------------------
/*
   volcano_elevation should be accessed via: volcano_index_key
*/
// -----------------------------------------------------------------
int volcano_elevation[max_volcanos]={
  641, // 0
  6046, // 1
  3976, // 2
  1689, // 3
  3742, // 4
  -39, // 5
  1718, // 6
  1733, // 7
  1295, // 8
  965, // 9
  3760, // 10
  947, // 11
  2546, // 12
  3142, // 13
  -137, // 14
  1180, // 15
  1828, // 16
  1499, // 17
  1956, // 18
  1637, // 19
  1366, // 20
  584, // 21
  1303, // 22
  2339, // 23
  744, // 24
  1501, // 25
  949, // 26
  1130, // 27
  1031, // 28
  904, // 29
  1334, // 30
  1334, // 31
  790, // 32
  852, // 33
  1341, // 34
  5753, // 35
  1496, // 36
  5165, // 37
  1670, // 38
  5597, // 39
  1910, // 40
  2568, // 41
  858, // 42
  1516, // 43
  1592, // 44
  3535, // 45
  1533, // 46
  1206, // 47
  1252, // 48
  2741, // 49
  1320, // 50
  -1410, // 51
  2145, // 52
  5846, // 53
  2035, // 54
  1180, // 55
  2763, // 56
  1750, // 57
  3285, // 58
  685, // 59
  2248, // 60
  1819, // 61
  305, // 62
  1032, // 63
  3490, // 64
  2277, // 65
  2096, // 66
  2882, // 67
  1187, // 68
  1720, // 69
  1565, // 70
  2281, // 71
  2281, // 72
  4095, // 73
  712, // 74
  2435, // 75
  2494, // 76
  1730, // 77
  5790, // 78
  3078, // 79
  1464, // 80
  2067, // 81
  5958, // 82
  6310, // 83
  1730, // 84
  746, // 85
  4100, // 86
  0, // 87
  1610, // 88
  2965, // 89
  847, // 90
  5911, // 91
  2471, // 92
  2005, // 93
  2290, // 94
  400, // 95
  5670, // 96
  0, // 97
  3173, // 98
  1525, // 99
  1558, // 100
  1450, // 101
  2565, // 102
  1331, // 103
  1625, // 104
  1185, // 105
  -34, // 106
  1156, // 107
  2518, // 108
  788, // 109
  1060, // 110
  5633, // 111
  3794, // 112
  613, // 113
  3350, // 114
  2007, // 115
  1476, // 116
  1095, // 117
  2829, // 118
  1716, // 119
  1920, // 120
  3763, // 121
  529, // 122
  3776, // 123
  805, // 124
  1772, // 125
  4276, // 126
  2168, // 127
  1715, // 128
  2576, // 129
  1635, // 130
  1573, // 131
  797, // 132
  2958, // 133
  3213, // 134
  1829, // 135
  402, // 136
  1950, // 137
  1740, // 138
  2317, // 139
  1725, // 140
  4784, // 141
  6071, // 142
  287, // 143
  1439, // 144
  2745, // 145
  1332, // 146
  1500, // 147
  3426, // 148
  2523, // 149
  1325, // 150
  2386, // 151
  3053, // 152
  1659, // 153
  5248, // 154
  450, // 155
  1578, // 156
  161, // 157
  1009, // 158
  3431, // 159
  2446, // 160
  1950, // 161
  5286, // 162
  581, // 163
  1130, // 164
  3199, // 165
  1400, // 166
  365, // 167
  901, // 168
  450, // 169
  2156, // 170
  1307, // 171
  1784, // 172
  4507, // 173
  4507, // 174
  2361, // 175
  1536, // 176
  1512, // 177
  2047, // 178
  1067, // 179
  -20, // 180
  900, // 181
  1731, // 182
  3800, // 183
  2090, // 184
  1677, // 185
  -185, // 186
  704, // 187
  1552, // 188
  1222, // 189
  5895, // 190
  1700, // 191
  4835, // 192
  1131, // 193
  1619, // 194
  3456, // 195
  1812, // 196
  818, // 197
  813, // 198
  1856, // 199
  3528, // 200
  1079, // 201
  2043, // 202
  2171, // 203
  999, // 204
  581, // 205
  -2, // 206
  2426, // 207
  1680, // 208
  1330, // 209
  670, // 210
  5592, // 211
  1117, // 212
  1703, // 213
  1423, // 214
  1156, // 215
  602, // 216
  1174, // 217
  -975, // 218
  1580, // 219
  805, // 220
  858, // 221
  1887, // 222
  1280, // 223
  2776, // 224
  1413, // 225
  1394, // 226
  2165, // 227
  1324, // 228
  1357, // 229
  1560, // 230
  1807, // 231
  1388, // 232
  1707, // 233
  635, // 234
  503, // 235
  855, // 236
  4205, // 237
  4170, // 238
  2462, // 239
  230, // 240
  2894, // 241
  2894, // 242
  1067, // 243
  1067, // 244
  1713, // 245
  2278, // 246
  2911, // 247
  3145, // 248
  4565, // 249
  760, // 250
  43, // 251
  990, // 252
  3860, // 253
  751, // 254
  815, // 255
  1196, // 256
  4263, // 257
  1297, // 258
  -197, // 259
  2121, // 260
  -132, // 261
  950, // 262
  1625, // 263
  2486, // 264
  1915, // 265
  2740, // 266
  728, // 267
  1018, // 268
  985, // 269
  2434, // 270
  1011, // 271
  1978, // 272
  2578, // 273
  2013, // 274
  698, // 275
  750, // 276
  3058, // 277
  3470, // 278
  1220, // 279
  6887, // 280
  6887, // 281
  1111, // 282
  1073, // 283
  3011, // 284
  2962, // 285
  1776, // 286
  2119, // 287
  764, // 288
  2552, // 289
  570, // 290
  742, // 291
  2665, // 292
  3170, // 293
  6348, // 294
  6348, // 295
  1070, // 296
  2519, // 297
  2142, // 298
  1397, // 299
  2801, // 300
  2351, // 301
  1700, // 302
  1200, // 303
  1486, // 304
  1495, // 305
  2631, // 306
  2708, // 307
  5246, // 308
  1360, // 309
  4650, // 310
  601, // 311
  688, // 312
  2815, // 313
  551, // 314
  4392, // 315
  1281, // 316
  516, // 317
  956, // 318
  3332, // 319
  1660, // 320
  3108, // 321
  3562, // 322
  1916, // 323
  1871, // 324
  2797, // 325
  542, // 326
  5321, // 327
  500, // 328
  887, // 329
  5967, // 330
  992, // 331
  1117, // 332
  2211, // 333
  1745, // 334
  1893, // 335
  697, // 336
  4949, // 337
  5230, // 338
  2381, // 339
  3772, // 340
  367, // 341
  1496, // 342
  485, // 343
  1160, // 344
  3676, // 345
  1221, // 346
  856, // 347
  4317, // 348
  3283, // 349
  1320, // 350
  1563, // 351
  2857, // 352
  934, // 353
  1189, // 354
  2282, // 355
  1784, // 356
  1467, // 357
  915, // 358
  1220, // 359
  800, // 360
  2141, // 361
  3374, // 362
  36, // 363
  2272, // 364
  924, // 365
  3990, // 366
  3371, // 367
  3136, // 368
  2447, // 369
  2356, // 370
  799, // 371
  311, // 372
  2597, // 373
  2850, // 374
  1806, // 375
  2084, // 376
  1325, // 377
  3100, // 378
  1010, // 379
  3715, // 380
  2329, // 381
  2390, // 382
  3100, // 383
  1075, // 384
  1819, // 385
  2157, // 386
  979, // 387
  2077, // 388
  3682, // 389
  3158, // 390
  1159, // 391
  1881, // 392
  998, // 393
  2060, // 394
  1584, // 395
  2011, // 396
  752, // 397
  5672, // 398
  2923, // 399
  1474, // 400
  1555, // 401
  2334, // 402
  1548, // 403
  1020, // 404
  2050, // 405
  1500, // 406
  678, // 407
  401, // 408
  737, // 409
  1617, // 410
  2507, // 411
  1183, // 412
  1281, // 413
  2847, // 414
  2173, // 415
  3711, // 416
  3711, // 417
  2149, // 418
  500, // 419
  2376, // 420
  547, // 421
  1654, // 422
  321, // 423
  4317, // 424
  597, // 425
  2455, // 426
  180, // 427
  1345, // 428
  361, // 429
  2805, // 430
  624, // 431
  1953, // 432
  2958, // 433
  3081, // 434
};
// -----------------------------------------------------------------
/*
   volcano_lat_long should be accessed via: volcano_index_key
   0: latitude
   1: longitude

   todo: check coordinates and add a meters 'danger range' list.
   todo: active/doemant/extinct
*/
// -----------------------------------------------------------------
float volcano_lat_long[max_volcanos][2]={
  {34.5,131.6}, // 0
  {-23.3,-67.62}, // 1
  {14.5,-90.88}, // 2
  {38.57,34.52}, // 3
  {46.21,-121.49}, // 4
  {-25.37,-129.27}, // 5
  {37.64,140.29}, // 6
  {10.07,40.84}, // 7
  {13.08,40.85}, // 8
  {18.77,145.67}, // 9
  {14.47,-90.74}, // 10
  {37.77,-25.47}, // 11
  {-50.33,-73.75}, // 12
  {-8.34,115.51}, // 13
  {20.42,145.03}, // 14
  {53.98,159.45}, // 15
  {36.56,139.2}, // 16
  {43.38,144.01}, // 17
  {55.43,158.65}, // 18
  {39.76,140.8}, // 19
  {39.96,140.76}, // 20
  {29.46,129.6}, // 21
  {54.13,-165.99}, // 22
  {50.86,155.55}, // 23
  {17.6,145.83}, // 24
  {12.88,40.57}, // 25
  {41.73,12.7}, // 26
  {-0.43,-91.12}, // 27
  {13.52,40.63}, // 28
  {14.88,39.92}, // 29
  {-16.25,168.12}, // 30
  {-16.25,168.12}, // 31
  {16.35,145.67}, // 32
  {-20.2,169.78}, // 33
  {56.88,-158.17}, // 34
  {-0.48,-78.14}, // 35
  {-15.4,167.83}, // 36
  {39.7,44.3}, // 37
  {10.46,-84.7}, // 38
  {-18.73,-69.05}, // 39
  {52.36,157.83}, // 40
  {36.4,138.53}, // 41
  {-7.95,-14.37}, // 42
  {65.03,-16.75}, // 43
  {32.88,131.11}, // 44
  {14.58,-91.19}, // 45
  {52.38,-174.15}, // 46
  {44.81,147.14}, // 47
  {59.36,-153.43}, // 48
  {53.26,158.83}, // 49
  {3.67,125.5}, // 50
  {45.95,-130.0}, // 51
  {10.08,40.7}, // 52
  {-21.79,-68.24}, // 53
  {37.73,140.25}, // 54
  {19.5,121.9}, // 55
  {43.8,121.6}, // 56
  {-6.1,155.2}, // 57
  {48.79,-121.82}, // 58
  {-3.6,144.85}, // 59
  {-5.2,151.2}, // 60
  {37.6,140.1}, // 61
  {12.29,93.88}, // 62
  {2.32,36.57}, // 63
  {28.0,60.0}, // 64
  {71.1,-8.2}, // 65
  {44.28,-121.83}, // 66
  {55.98,160.58}, // 67
  {11.5,124.5}, // 68
  {54.32,160.02}, // 69
  {12.8,124.1}, // 70
  {8.05,38.35}, // 71
  {8.05,38.35}, // 72
  {4.2,9.17}, // 73
  {18.83,121.85}, // 74
  {10.41,123.13}, // 75
  {36.45,-104.09}, // 76
  {33.7,-106.0}, // 77
  {0.03,-77.99}, // 78
  {-6.9,108.41}, // 79
  {45.78,2.97}, // 80
  {57.13,-156.99}, // 81
  {50.33,155.46}, // 82
  {-1.46,-78.82}, // 83
  {52.83,-169.95}, // 84
  {13.86,-89.54}, // 85
  {19.51,103.62}, // 86
  {NAN,NAN}, // 87
  {11.5,85.6}, // 88
  {-37.85,-71.17}, // 89
  {12.98,-87.56}, // 90
  {-0.68,-78.44}, // 91
  {42.94,-122.11}, // 92
  {43.42,-113.5}, // 93
  {43.7,142.9}, // 94
  {-5.0,150.1}, // 95
  {35.95,52.11}, // 96
  {NAN,NAN}, // 97
  {-4.0,103.1}, // 98
  {43.5,-120.9}, // 99
  {44.6,-104.7}, // 100
  {43.1,-118.7}, // 101
  {-7.2,109.9}, // 102
  {51.46,156.98}, // 103
  {13.6,41.8}, // 104
  {1.7,127.87}, // 105
  {-16.7,168.4}, // 106
  {50.68,156.02}, // 107
  {-39.3,174.1}, // 108
  {-8.7,122.45}, // 109
  {17.36,-93.23}, // 110
  {43.33,42.45}, // 111
  {-77.5,167.2}, // 112
  {13.6,40.7}, // 113
  {37.73,15.0}, // 114
  {8.98,39.93}, // 115
  {-0.37,-91.55}, // 116
  {-54.63,-164.42}, // 117
  {14.95,-24.35}, // 118
  {43.37,-121.07}, // 119
  {55.08,-162.81}, // 120
  {14.47,-90.88}, // 121
  {28.36,-14.02}, // 122
  {35.36,138.73}, // 123
  {37.76,-25.33}, // 124
  {50.27,155.25}, // 125
  {1.22,-77.37}, // 126
  {-7.26,108.08}, // 127
  {0.81,127.33}, // 128
  {54.97,160.68}, // 129
  {1.38,127.53}, // 130
  {51.8,178.8}, // 131
  {-14.27,167.5}, // 132
  {-6.77,106.94}, // 133
  {48.11,-121.11}, // 134
  {52.56,158.03}, // 135
  {39.02,-27.97}, // 136
  {28.0,15.58}, // 137
  {52.07,-176.13}, // 138
  {58.35,-155.09}, // 139
  {64.42,-17.33}, // 140
  {-0.17,-78.6}, // 141
  {-18.42,-69.09}, // 142
  {17.31,145.84}, // 143
  {35.23,139.02}, // 144
  {-53.1,73.5}, // 145
  {9.2,124.7}, // 146
  {27.73,-18.03}, // 147
  {45.4,-121.7}, // 148
  {19.69,-155.87}, // 149
  {1.49,127.63}, // 150
  {-8.06,114.24}, // 151
  {60.03,-153.09}, // 152
  {-8.34,123.26}, // 153
  {-0.66,-78.71}, // 154
  {13.67,-89.05}, // 155
  {51.49,157.2}, // 156
  {24.75,141.29}, // 157
  {20.47,122.01}, // 158
  {9.98,83.85}, // 159
  {54.77,-163.72}, // 160
  {13.81,-89.63}, // 161
  {19.18,-98.64}, // 162
  {34.9,139.1}, // 163
  {1.08,127.42}, // 164
  {44.67,-121.8}, // 165
  {43.1,-117.4}, // 166
  {-3.63,144.63}, // 167
  {58.62,-154.06}, // 168
  {20.55,-156.57}, // 169
  {51.3,156.87}, // 170
  {51.92,-177.17}, // 171
  {2.78,125.4}, // 172
  {-1.51,29.45}, // 173
  {-1.51,29.45}, // 174
  {-11.75,43.38}, // 175
  {54.05,159.45}, // 176
  {63.63,-19.05}, // 177
  {58.28,-154.96}, // 178
  {-0.08,29.92}, // 179
  {-9.02,157.95}, // 180
  {51.65,157.35}, // 181
  {-7.93,112.31}, // 182
  {1.7,101.26}, // 183
  {52.06,157.7}, // 184
  {57.2,-156.75}, // 185
  {12.3,-61.64}, // 186
  {30.79,130.31}, // 187
  {54.49,160.25}, // 188
  {19.42,-155.29}, // 189
  {3.07,37.35}, // 190
  {31.93,130.86}, // 191
  {56.06,160.64}, // 192
  {42.06,140.68}, // 193
  {8.8,39.69}, // 194
  {53.32,158.69}, // 195
  {51.36,156.75}, // 196
  {65.73,-16.78}, // 197
  {-6.1,105.42}, // 198
  {54.59,160.27}, // 199
  {54.75,160.53}, // 200
  {51.8,157.53}, // 201
  {58.45,-154.36}, // 202
  {36.64,138.54}, // 203
  {43.61,144.44}, // 204
  {42.49,141.16}, // 205
  {-16.83,168.54}, // 206
  {28.57,-17.83}, // 207
  {-8.95,148.15}, // 208
  {-5.53,148.42}, // 209
  {29.03,-13.63}, // 210
  {-23.37,-67.73}, // 211
  {-8.36,122.84}, // 212
  {-8.54,122.78}, // 213
  {-8.27,123.51}, // 214
  {17.37,-62.8}, // 215
  {38.48,14.95}, // 216
  {51.95,178.54}, // 217
  {18.92,-155.27}, // 218
  {1.36,124.79}, // 219
  {-5.47,150.51}, // 220
  {-4.92,151.16}, // 221
  {-6.52,155.62}, // 222
  {-5.36,147.12}, // 223
  {-0.91,36.45}, // 224
  {-16.51,168.35}, // 225
  {11.45,-85.52}, // 226
  {58.2,155.25}, // 227
  {1.36,124.86}, // 228
  {0.32,127.4}, // 229
  {54.13,159.67}, // 230
  {-4.08,145.04}, // 231
  {14.52,120.47}, // 232
  {2.32,37.97}, // 233
  {11.98,-86.16}, // 234
  {51.1,156.72}, // 235
  {43.57,144.57}, // 236
  {19.82,-155.47}, // 237
  {19.48,-155.61}, // 238
  {13.26,123.69}, // 239
  {-53.03,72.6}, // 240
  {42.45,-122.32}, // 241
  {42.45,-122.32}, // 242
  {37.42,4.08}, // 243
  {37.42,4.08}, // 244
  {43.7,-111.96}, // 245
  {-0.2,36.07}, // 246
  {-7.54,110.44}, // 247
  {-7.45,110.43}, // 248
  {-3.25,36.75}, // 249
  {37.62,23.34}, // 250
  {-19.18,-174.87}, // 251
  {-57.78,-26.45}, // 252
  {19.85,-101.75}, // 253
  {36.7,24.44}, // 254
  {34.08,139.53}, // 255
  {51.94,-176.75}, // 256
  {0.13,-78.27}, // 257
  {12.42,-86.54}, // 258
  {37.6,-25.88}, // 259
  {38.0,-119.03}, // 260
  {-25.89,-177.19}, // 261
  {0.45,127.4}, // 262
  {-6.62,110.88}, // 263
  {36.76,139.48}, // 264
  {37.12,139.97}, // 265
  {NAN,NAN}, // 266
  {12.51,-86.7}, // 267
  {49.57,154.81}, // 268
  {17.15,-62.58}, // 269
  {43.72,-121.23}, // 270
  {-37.77,142.5}, // 271
  {-39.13,175.64}, // 272
  {36.8,139.38}, // 273
  {43.45,143.04}, // 274
  {36.59,27.16}, // 275
  {0.23,37.87}, // 276
  {-1.41,29.2}, // 277
  {-1.52,29.25}, // 278
  {NAN,NAN}, // 279
  {-27.12,-68.55}, // 280
  {-27.12,-68.55}, // 281
  {-38.12,176.5}, // 282
  {53.43,-168.13}, // 283
  {6.25,10.5}, // 284
  {-2.76,39.91}, // 285
  {52.54,157.34}, // 286
  {64.0,-16.65}, // 287
  {34.72,139.4}, // 288
  {14.38,-90.6}, // 289
  {18.13,145.8}, // 290
  {-5.58,150.52}, // 291
  {-7.32,107.73}, // 292
  {19.5,-102.2}, // 293
  {-18.17,-69.15}, // 294
  {-18.17,-69.15}, // 295
  {51.45,156.97}, // 296
  {55.42,-161.89}, // 297
  {55.45,-161.84}, // 298
  {14.82,-61.17}, // 299
  {4.91,96.33}, // 300
  {38.47,-28.4}, // 301
  {11.54,-85.62}, // 302
  {31.77,-113.5}, // 303
  {15.13,120.35}, // 304
  {34.75,-116.63}, // 305
  {-21.23,55.71}, // 306
  {10.2,-84.23}, // 307
  {19.02,-98.62}, // 308
  {47.02,152.12}, // 309
  {2.32,-76.4}, // 310
  {17.48,-62.96}, // 311
  {-4.27,152.2}, // 312
  {7.7,124.5}, // 313
  {48.29,153.25}, // 314
  {46.85,-121.76}, // 315
  {-5.78,105.63}, // 316
  {-29.27,-177.92}, // 317
  {47.77,153.02}, // 318
  {-8.13,114.04}, // 319
  {44.07,145.13}, // 320
  {60.49,-152.74}, // 321
  {-0.08,-77.66}, // 322
  {10.83,-85.32}, // 323
  {54.8,-163.59}, // 324
  {-39.28,175.57}, // 325
  {45.88,149.83}, // 326
  {4.89,-75.32}, // 327
  {-36.13,178.05}, // 328
  {17.63,-63.23}, // 329
  {-15.78,-71.85}, // 330
  {-5.41,148.09}, // 331
  {31.59,130.66}, // 332
  {-6.72,106.73}, // 333
  {12.7,-87.0}, // 334
  {13.73,-89.29}, // 335
  {16.9,-25.0}, // 336
  {62.22,-144.13}, // 337
  {-2.0,-78.34}, // 338
  {13.85,-89.63}, // 339
  {14.76,-91.55}, // 340
  {36.4,25.4}, // 341
  {48.09,153.2}, // 342
  {-9.13,159.82}, // 343
  {52.02,178.14}, // 344
  {-8.11,112.92}, // 345
  {51.93,179.58}, // 346
  {37.87,-25.78}, // 347
  {41.41,-122.19}, // 348
  {56.65,161.36}, // 349
  {42.69,141.38}, // 350
  {44.13,145.17}, // 351
  {54.76,-163.97}, // 352
  {48.88,154.18}, // 353
  {44.42,146.14}, // 354
  {-38.97,-71.52}, // 355
  {1.11,124.73}, // 356
  {16.05,-61.67}, // 357
  {16.72,-62.18}, // 358
  {13.33,-61.18}, // 359
  {2.63,36.6}, // 360
  {35.6,-111.6}, // 361
  {61.3,-152.25}, // 362
  {47.6,152.92}, // 363
  {58.4,-154.4}, // 364
  {38.79,15.21}, // 365
  {-0.54,-77.63}, // 366
  {-7.38,110.07}, // 367
  {-7.3,109.99}, // 368
  {35.37,-111.5}, // 369
  {-1.18,36.35}, // 370
  {29.64,129.72}, // 371
  {14.0,120.99}, // 372
  {-0.98,100.68}, // 373
  {-8.25,118.0}, // 374
  {51.89,-178.15}, // 375
  {-6.77,107.6}, // 376
  {49.35,154.7}, // 377
  {20.92,17.28}, // 378
  {12.6,-86.85}, // 379
  {28.27,-16.64}, // 380
  {-7.94,112.95}, // 381
  {44.5,-121.8}, // 382
  {44.1,121.77}, // 383
  {-59.45,-27.37}, // 384
  {44.35,146.26}, // 385
  {2.58,98.83}, // 386
  {1.25,127.47}, // 387
  {43.42,142.69}, // 388
  {55.83,160.33}, // 389
  {14.61,-91.19}, // 390
  {40.47,140.92}, // 391
  {-18.75,169.23}, // 392
  {45.93,149.92}, // 393
  {-37.09,-12.28}, // 394
  {33.28,131.43}, // 395
  {-1.47,-78.44}, // 396
  {37.02,-117.45}, // 397
  {-16.36,-70.9}, // 398
  {55.76,160.53}, // 399
  {57.75,-156.37}, // 400
  {36.38,-113.13}, // 401
  {-5.05,151.33}, // 402
  {-5.59,147.88}, // 403
  {-18.25,144.75}, // 404
  {-7.18,110.33}, // 405
  {32.76,130.29}, // 406
  {47.12,152.25}, // 407
  {47.52,152.8}, // 408
  {42.54,140.84}, // 409
  {54.5,159.97}, // 410
  {56.17,-159.38}, // 411
  {50.55,155.97}, // 412
  {40.82,14.43}, // 413
  {-39.42,-71.93}, // 414
  {52.7,158.28}, // 415
  {-1.47,29.49}, // 416
  {-1.47,29.49}, // 417
  {53.13,-168.69}, // 418
  {38.4,14.96}, // 419
  {44.3,-121.8}, // 420
  {25.05,17.55}, // 421
  {54.52,-164.65}, // 422
  {-37.52,177.18}, // 423
  {62.0,-144.02}, // 424
  {48.72,126.12}, // 425
  {36.22,137.59}, // 426
  {36.67,27.14}, // 427
  {57.02,-157.19}, // 428
  {-19.53,169.44}, // 429
  {44.43,-110.67}, // 430
  {46.93,151.95}, // 431
  {51.57,157.32}, // 432
  {53.59,159.15}, // 433
  {55.86,160.6}, // 434
};
// -----------------------------------------------------------------
/*
   volcano_index should be accessed via: volcano_index_key
   0: location index
   1: type index
*/
// -----------------------------------------------------------------
int volcano_index[max_volcanos][2]={
  {30,13}, // 0
  {8,15}, // 1
  {24,15}, // 2
  {52,1}, // 3
  {55,15}, // 4
  {39,16}, // 5
  {30,15}, // 6
  {18,15}, // 7
  {18,15}, // 8
  {33,15}, // 9
  {24,15}, // 10
  {43,15}, // 11
  {8,15}, // 12
  {27,15}, // 13
  {33,16}, // 14
  {44,1}, // 15
  {30,15}, // 16
  {30,1}, // 17
  {44,13}, // 18
  {30,15}, // 19
  {30,15}, // 20
  {30,15}, // 21
  {55,15}, // 22
  {44,15}, // 23
  {33,15}, // 24
  {18,13}, // 25
  {29,1}, // 26
  {21,13}, // 27
  {18,15}, // 28
  {17,15}, // 29
  {56,2}, // 30
  {56,2}, // 31
  {33,15}, // 32
  {56,15}, // 33
  {55,1}, // 34
  {15,15}, // 35
  {56,13}, // 36
  {52,15}, // 37
  {13,15}, // 38
  {8,4}, // 39
  {44,15}, // 40
  {30,4}, // 41
  {46,15}, // 42
  {25,15}, // 43
  {30,1}, // 44
  {24,4}, // 45
  {55,1}, // 46
  {44,15}, // 47
  {55,9}, // 48
  {44,15}, // 49
  {27,15}, // 50
  {39,16}, // 51
  {18,15}, // 52
  {8,4}, // 53
  {30,15}, // 54
  {42,15}, // 55
  {55,15}, // 56
  {40,3}, // 57
  {55,15}, // 58
  {40,15}, // 59
  {40,15}, // 60
  {30,15}, // 61
  {26,12}, // 62
  {31,4}, // 63
  {28,15}, // 64
  {38,15}, // 65
  {55,13}, // 66
  {44,15}, // 67
  {42,4}, // 68
  {44,15}, // 69
  {42,15}, // 70
  {18,6}, // 71
  {18,6}, // 72
  {5,15}, // 73
  {42,15}, // 74
  {42,15}, // 75
  {55,3}, // 76
  {55,18}, // 77
  {15,15}, // 78
  {27,15}, // 79
  {20,9}, // 80
  {55,15}, // 81
  {44,15}, // 82
  {15,15}, // 83
  {55,15}, // 84
  {16,1}, // 85
  {34,15}, // 86
  {55,7}, // 87
  {37,15}, // 88
  {1,15}, // 89
  {37,13}, // 90
  {15,15}, // 91
  {55,1}, // 92
  {55,18}, // 93
  {30,15}, // 94
  {40,1}, // 95
  {28,15}, // 96
  {26,7}, // 97
  {27,15}, // 98
  {55,18}, // 99
  {55,11}, // 100
  {55,18}, // 101
  {27,4}, // 102
  {44,9}, // 103
  {17,15}, // 104
  {27,4}, // 105
  {56,1}, // 106
  {44,14}, // 107
  {36,15}, // 108
  {27,15}, // 109
  {34,1}, // 110
  {44,15}, // 111
  {0,15}, // 112
  {18,13}, // 113
  {29,15}, // 114
  {18,15}, // 115
  {15,1}, // 116
  {55,15}, // 117
  {6,15}, // 118
  {55,10}, // 119
  {55,15}, // 120
  {24,15}, // 121
  {47,5}, // 122
  {30,15}, // 123
  {43,15}, // 124
  {44,15}, // 125
  {10,15}, // 126
  {27,15}, // 127
  {27,15}, // 128
  {44,15}, // 129
  {27,15}, // 130
  {55,15}, // 131
  {56,15}, // 132
  {27,0}, // 133
  {55,15}, // 134
  {44,1}, // 135
  {43,15}, // 136
  {47,5}, // 137
  {55,15}, // 138
  {55,15}, // 139
  {25,1}, // 140
  {15,0}, // 141
  {8,15}, // 142
  {55,15}, // 143
  {30,0}, // 144
  {3,15}, // 145
  {42,15}, // 146
  {47,13}, // 147
  {55,15}, // 148
  {55,13}, // 149
  {27,15}, // 150
  {27,15}, // 151
  {55,15}, // 152
  {27,15}, // 153
  {15,15}, // 154
  {16,1}, // 155
  {44,15}, // 156
  {30,1}, // 157
  {42,15}, // 158
  {13,15}, // 159
  {55,15}, // 160
  {16,15}, // 161
  {34,15}, // 162
  {30,12}, // 163
  {27,15}, // 164
  {55,15}, // 165
  {55,18}, // 166
  {40,15}, // 167
  {55,15}, // 168
  {55,13}, // 169
  {44,15}, // 170
  {55,15}, // 171
  {27,15}, // 172
  {12,15}, // 173
  {12,15}, // 174
  {11,13}, // 175
  {44,15}, // 176
  {25,5}, // 177
  {55,15}, // 178
  {53,18}, // 179
  {45,16}, // 180
  {44,15}, // 181
  {27,15}, // 182
  {27,15}, // 183
  {44,15}, // 184
  {55,15}, // 185
  {23,16}, // 186
  {30,1}, // 187
  {44,15}, // 188
  {55,13}, // 189
  {50,15}, // 190
  {30,15}, // 191
  {44,15}, // 192
  {30,15}, // 193
  {18,1}, // 194
  {44,15}, // 195
  {44,15}, // 196
  {25,1}, // 197
  {27,15}, // 198
  {44,15}, // 199
  {44,15}, // 200
  {44,15}, // 201
  {55,15}, // 202
  {30,15}, // 203
  {30,1}, // 204
  {30,15}, // 205
  {56,1}, // 206
  {47,15}, // 207
  {40,15}, // 208
  {40,15}, // 209
  {47,5}, // 210
  {8,15}, // 211
  {27,4}, // 212
  {27,15}, // 213
  {27,15}, // 214
  {48,15}, // 215
  {29,15}, // 216
  {55,15}, // 217
  {55,16}, // 218
  {27,15}, // 219
  {40,15}, // 220
  {40,1}, // 221
  {40,15}, // 222
  {40,4}, // 223
  {31,15}, // 224
  {56,15}, // 225
  {37,15}, // 226
  {55,15}, // 227
  {27,15}, // 228
  {27,15}, // 229
  {44,1}, // 230
  {40,15}, // 231
  {42,15}, // 232
  {31,13}, // 233
  {37,1}, // 234
  {44,15}, // 235
  {30,1}, // 236
  {55,13}, // 237
  {55,13}, // 238
  {42,15}, // 239
  {3,4}, // 240
  {55,8}, // 241
  {55,8}, // 242
  {19,12}, // 243
  {19,12}, // 244
  {55,17}, // 245
  {31,13}, // 246
  {27,15}, // 247
  {27,15}, // 248
  {50,15}, // 249
  {22,9}, // 250
  {51,16}, // 251
  {54,15}, // 252
  {34,3}, // 253
  {22,15}, // 254
  {30,15}, // 255
  {55,15}, // 256
  {15,15}, // 257
  {37,15}, // 258
  {43,16}, // 259
  {55,18}, // 260
  {36,16}, // 261
  {27,15}, // 262
  {27,15}, // 263
  {30,15}, // 264
  {30,15}, // 265
  {55,18}, // 266
  {37,3}, // 267
  {44,1}, // 268
  {48,15}, // 269
  {55,13}, // 270
  {3,13}, // 271
  {36,15}, // 272
  {30,13}, // 273
  {30,15}, // 274
  {22,15}, // 275
  {31,13}, // 276
  {14,13}, // 277
  {14,15}, // 278
  {55,13}, // 279
  {2,15}, // 280
  {2,15}, // 281
  {36,9}, // 282
  {55,13}, // 283
  {5,15}, // 284
  {50,15}, // 285
  {44,1}, // 286
  {25,15}, // 287
  {30,15}, // 288
  {24,4}, // 289
  {55,15}, // 290
  {40,1}, // 291
  {27,15}, // 292
  {34,3}, // 293
  {4,15}, // 294
  {4,15}, // 295
  {44,9}, // 296
  {55,15}, // 297
  {55,15}, // 298
  {20,15}, // 299
  {27,4}, // 300
  {43,15}, // 301
  {37,15}, // 302
  {34,3}, // 303
  {42,15}, // 304
  {55,18}, // 305
  {20,13}, // 306
  {13,15}, // 307
  {34,15}, // 308
  {44,15}, // 309
  {10,15}, // 310
  {35,15}, // 311
  {40,13}, // 312
  {42,15}, // 313
  {44,15}, // 314
  {55,15}, // 315
  {27,15}, // 316
  {36,15}, // 317
  {44,15}, // 318
  {27,15}, // 319
  {30,15}, // 320
  {55,15}, // 321
  {15,15}, // 322
  {13,4}, // 323
  {55,15}, // 324
  {36,15}, // 325
  {44,15}, // 326
  {10,15}, // 327
  {36,16}, // 328
  {35,15}, // 329
  {41,15}, // 330
  {40,15}, // 331
  {30,15}, // 332
  {27,15}, // 333
  {37,15}, // 334
  {16,15}, // 335
  {6,15}, // 336
  {55,13}, // 337
  {15,15}, // 338
  {16,15}, // 339
  {24,15}, // 340
  {22,13}, // 341
  {44,15}, // 342
  {45,15}, // 343
  {55,15}, // 344
  {27,15}, // 345
  {55,15}, // 346
  {43,15}, // 347
  {55,15}, // 348
  {44,15}, // 349
  {30,1}, // 350
  {30,15}, // 351
  {55,15}, // 352
  {44,15}, // 353
  {44,15}, // 354
  {8,1}, // 355
  {27,15}, // 356
  {20,15}, // 357
  {54,15}, // 358
  {49,15}, // 359
  {31,0}, // 360
  {55,3}, // 361
  {55,15}, // 362
  {44,16}, // 363
  {55,15}, // 364
  {29,15}, // 365
  {15,15}, // 366
  {27,15}, // 367
  {27,15}, // 368
  {55,3}, // 369
  {31,13}, // 370
  {30,15}, // 371
  {42,1}, // 372
  {27,15}, // 373
  {27,15}, // 374
  {55,15}, // 375
  {27,15}, // 376
  {44,15}, // 377
  {7,15}, // 378
  {37,15}, // 379
  {47,15}, // 380
  {27,15}, // 381
  {55,15}, // 382
  {55,15}, // 383
  {54,15}, // 384
  {44,15}, // 385
  {27,1}, // 386
  {27,1}, // 387
  {30,0}, // 388
  {44,15}, // 389
  {24,15}, // 390
  {30,1}, // 391
  {56,15}, // 392
  {44,15}, // 393
  {54,13}, // 394
  {30,9}, // 395
  {15,15}, // 396
  {55,10}, // 397
  {41,15}, // 398
  {44,15}, // 399
  {55,15}, // 400
  {55,18}, // 401
  {40,15}, // 402
  {40,4}, // 403
  {3,13}, // 404
  {27,15}, // 405
  {30,4}, // 406
  {44,14}, // 407
  {44,1}, // 408
  {30,15}, // 409
  {44,1}, // 410
  {55,15}, // 411
  {44,3}, // 412
  {29,14}, // 413
  {8,15}, // 414
  {44,15}, // 415
  {12,15}, // 416
  {12,15}, // 417
  {55,15}, // 418
  {29,0}, // 419
  {55,13}, // 420
  {32,1}, // 421
  {55,15}, // 422
  {36,15}, // 423
  {55,13}, // 424
  {9,18}, // 425
  {30,15}, // 426
  {22,9}, // 427
  {55,15}, // 428
  {56,15}, // 429
  {55,1}, // 430
  {44,1}, // 431
  {44,0}, // 432
  {44,0}, // 433
  {44,15}, // 434
};

// ----------------------------------------------------------------------------------------------------------------
//                                                                                     METEOR SHOWER WARNING SYSTEM
// ----------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------
// the following values are not exhaustive, are approximate, and may be subject to change
// ----------------------------------------------------------------------------------------

#define max_meteor_showers 8

char meteor_shower_names[max_meteor_showers][16]={
  "Quadrantids",   // 0
  "Lyrids",        // 1
  "Eta Aquariids", // 2
  "Perseids",      // 3
  "Orionids",      // 4
  "Leonids",       // 5
  "Geminids",      // 6
  "Ursids"         // 7
};
// ----------------------------------------------------------------------------------------
/*
  specify meteor datetime range (up to 2 concurrent calender months).
  {0: month_start, 1: day_start}, {0: month_end, 1: day_end}
*/
// ----------------------------------------------------------------------------------------
int meteor_shower_datetime[max_meteor_showers][2][2]={
  // ----------------------------
  // Quadrantids                0
  // ----------------------------
  { {12, 26}, {1, 15}},
  // ----------------------------
  // Lyrids                     1
  // ----------------------------
  { {4, 15},  {4, 25}},
  // ----------------------------
  // Eta Aquariids              2
  // ----------------------------
  { {4, 19},  {5, 28}},
  // ----------------------------
  // Perseids                   3
  // ----------------------------
  { {7, 17},  {8, 23}},
  // ----------------------------
  // Orionids                   4
  // ----------------------------
  { {10, 2},  {11, 7}},
  // ----------------------------
  // Leonids                    5
  // ----------------------------
  { {11, 6},  {11, 17}},
  // ----------------------------
  // Geminids                   6
  // ----------------------------
  { {11, 19},  {12, 24}},
  // ----------------------------
  // Ursids                     7
  // ----------------------------
  { {12, 17},  {12, 26}},
};
// ----------------------------------------------------------------------------------------
/*
  specify peak meteor datetime range (up to 2 concurrent calender months).
  {0: month_start, 1: day_start}, {0: month_end, 1: day_end}
*/
// ----------------------------------------------------------------------------------------
int meteor_shower_peaks[max_meteor_showers][2][2]={
  // ----------------------------
  // Quadrantids                0
  // ----------------------------
  { {1, 3}, {1, 4} },
  // ----------------------------
  // Lyrids                     1
  // ----------------------------
  { {4, 22}, {4, 23} },
  // ----------------------------
  // Eta Aquariids              2
  // ----------------------------
  { {5, 5}, {5, 6} },
  // ----------------------------
  // Perseids                   3
  // ----------------------------
  { {7, 12}, {7, 13} },
  // ----------------------------
  // Orionids                   4
  // ----------------------------
  { {10, 21}, {10, 22} },
  // ----------------------------
  // Leonids                    5
  // ----------------------------
  { {11, 16}, {11, 17} },
  // ----------------------------
  // Geminids                   6
  // ----------------------------
  { {12, 13}, {12, 14} },
  // ----------------------------
  // Ursids                     7
  // ----------------------------
  { {12, 21}, {12, 22} },
};
// ----------------------------------------------------------------------------------------
/*
  0: in datetime range
  1: in peak datetime range
*/
// ----------------------------------------------------------------------------------------
bool meteor_shower_warning_system[max_meteor_showers][2]={
  {false,false}, {false,false}, {false,false}, {false,false}, // 0-3
  {false,false}, {false,false}, {false,false}, {false,false}  // 4-7
};
// ----------------------------------------------------------------------------------------
// temporary values
// ----------------------------------------------------------------------------------------
bool meteor_warning=false;
bool meteor_peak_warning=false;

// ----------------------------------------------------------------------------------------
//                                                          METEOR SHOWER IN DATETIME RANGE
// ----------------------------------------------------------------------------------------
// check and return, does not set.
// allows spanning up to 2 consecutive calender months.
// ----------------------------------------------------------------------------------------
bool checkMeteorShowerWarning(int key) {
  meteor_warning=false;
  // --------------------------------
  // meteor shower start
  // --------------------------------
  if (satData.local_month==meteor_shower_datetime[key][0][0]) {
    if (satData.local_day>=meteor_shower_datetime[key][0][1]) {
      meteor_warning=true;
    }
  }
  // --------------------------------
  // meteor shower end
  // --------------------------------
  if (satData.local_month==meteor_shower_datetime[key][1][0]) {
    if (satData.local_day<=meteor_shower_datetime[key][1][1]) {
      meteor_warning=true;
    }
  }
  return meteor_warning;
}

// ----------------------------------------------------------------------------------------
//                                                     METEOR SHOWER IN PEAK DATETIME RANGE
// ----------------------------------------------------------------------------------------
// check and return, does not set.
// allows spanning up to 2 consecutive calender months.
// ----------------------------------------------------------------------------------------
bool checkMeteorShowerPeakWarning(int key) {
  meteor_peak_warning=false;
  // --------------------------------
  // peak meteor shower start
  // --------------------------------
  if (satData.local_month==meteor_shower_peaks[key][0][0]) {
    if (satData.local_day>=meteor_shower_peaks[key][0][1]) {
      meteor_peak_warning=true;
    }
  }
  // --------------------------------
  // peak meteor shower end
  // --------------------------------
  if (satData.local_month==meteor_shower_peaks[key][1][0]) {
    if (satData.local_day<=meteor_shower_peaks[key][1][1]) {
      meteor_peak_warning=true;
    }
  }
  return meteor_peak_warning;
}

// ----------------------------------------------------------------------------------------
//                                                                SET METEOR SHOWER WARNING
// ----------------------------------------------------------------------------------------
// set individual meteor warning system elements according to check results
// ----------------------------------------------------------------------------------------
void setMeteorShowerWarning() {
  for (int i; i<max_meteor_showers; i++) {
    // ----------------------------
    // set datetime range bool
    // ----------------------------
    meteor_shower_warning_system[i][0]=checkMeteorShowerWarning(i);
    // ----------------------------
    // set peak datetime range bool
    // ----------------------------
    if (meteor_shower_warning_system[i][0]==true) {
      meteor_shower_warning_system[i][1]=checkMeteorShowerPeakWarning(i);
    }
  }
  // ------------------------------
  // create and ouptput information
  // ------------------------------
  if (systemData.output_meteors_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$METEORS,");
    for (int i; i<max_meteor_showers; i++) {
      // --------------------------
      // in datetime range
      // --------------------------
      strcat(siderealPlanetData.sentence, String(meteor_shower_warning_system[i][0] + String(",")).c_str());
      // --------------------------
      // in peak datetiem range
      // --------------------------
      strcat(siderealPlanetData.sentence, String(meteor_shower_warning_system[i][1] + String(",")).c_str());
    }
    // -------------------------------
    // append checksum
    // -------------------------------
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(siderealPlanetData.sentence);
  }
}
// ----------------------------------------------------------------------------------------
//                                                                SUM METEOR SHOWER WARNING
// ----------------------------------------------------------------------------------------
// return true if any meteors in range
// ----------------------------------------------------------------------------------------
bool meteor_shower_sum=false;
bool sumMeteorShowerWarning() {
  meteor_shower_sum=false;
  for (int i; i<max_meteor_showers; i++) {if (meteor_shower_warning_system[i][0]==true) {meteor_shower_sum=true;}}
  return meteor_shower_sum;
}
// ----------------------------------------------------------------------------------------
//                                                                SUM METEOR SHOWER WARNING
// ----------------------------------------------------------------------------------------
// return true if any meteors in peak range
// ----------------------------------------------------------------------------------------
bool meteor_shower_peak_sum=false;
bool sumMeteorShowerPeakWarning() {
  meteor_shower_peak_sum=false;
  for (int i; i<max_meteor_showers; i++) {if (meteor_shower_warning_system[i][1]==true) {meteor_shower_peak_sum=true;}}
  return meteor_shower_peak_sum;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   TRACK OBJECT
// ------------------------------------------------------------------------------------------------------------------------------ 

void trackObject(double latitude, double longitude, int year, int month, int day, int hour, int minute, int second, int object_table_i, int object_i) {
  /*
  requires time, location, object table number and object number.
  sets time and location specific values pertaining to an object.
  object will first need to be identified.
  */
  // -----------------------------------------------------
  // setup
  // -----------------------------------------------------
  myAstro.setLatLong(latitude, longitude);
  myAstro.rejectDST();
  myAstro.setGMTdate(year, month, day);
  myAstro.setLocalTime(hour, minute, second);
  myAstro.setGMTtime(hour, minute, second);
  // -----------------------------------------------------
  // select object table
  // -----------------------------------------------------
  if (object_table_i==0) {myAstroObj.selectStarTable(object_i);}
  if (object_table_i==1) {myAstroObj.selectNGCTable(object_i);}
  if (object_table_i==2) {myAstroObj.selectICTable(object_i);}
  if (object_table_i==3) {myAstroObj.selectMessierTable(object_i);}
  if (object_table_i==4) {myAstroObj.selectCaldwellTable(object_i);}
  if (object_table_i==5) {myAstroObj.selectHershel400Table(object_i);}
  if (object_table_i==6) {myAstroObj.selectOtherObjectsTable(object_i);}
  // -----------------------------------------------------
  // setup
  // -----------------------------------------------------
  myAstro.setRAdec(myAstroObj.getRAdec(), myAstroObj.getDeclinationDec());
  myAstro.doRAdec2AltAz();
  // -----------------------------------------------------
  // retreive data
  // -----------------------------------------------------
  siderealObjectData.object_ra=myAstro.getRAdec();
  siderealObjectData.object_dec=myAstro.getDeclinationDec();
  siderealObjectData.object_az=myAstro.getAzimuth();
  siderealObjectData.object_alt=myAstro.getAltitude();
  myAstro.doXRiseSetTimes();
  siderealObjectData.object_r=myAstro.getRiseTime();
  siderealObjectData.object_s=myAstro.getSetTime();
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                IDENTIFY OBJECT
// ------------------------------------------------------------------------------------------------------------------------------ 

void IdentifyObject(double object_ra, double object_dec) {
  /*
  requires RA and DEC.
  sets object values according to identified object table and identified object number.
  once we have the object number we can track the object if required.
  */
  // -------------------------------------------------------
  // setup
  // -------------------------------------------------------
  myAstroObj.setRAdec(object_ra, object_dec);
  myAstro.doRAdec2AltAz();
  myAstroObj.identifyObject();
  // -------------------------------------------------------
  // scan tables for the object
  // -------------------------------------------------------
  switch(myAstroObj.getIdentifiedObjectTable()) {
    case(1):
    siderealObjectData.object_table_i=0; break; // Star
    case(2):
    siderealObjectData.object_table_i=1; break; // NGC
    case(3):
    siderealObjectData.object_table_i=2;  break; //IC
    case(7):
    siderealObjectData.object_table_i=3;  break; // Other
  }
  // -------------------------------------------------------
  // object tables
  // -------------------------------------------------------
  if (myAstroObj.getIdentifiedObjectTable()==1) {
    // -----------------------------------------------------
    // set table name
    // -----------------------------------------------------
    memset(siderealObjectData.object_table_name, 0, 56);
    strcpy(siderealObjectData.object_table_name, siderealObjectData.object_table[siderealObjectData.object_table_i]);
    // -----------------------------------------------------
    // set object id name
    // -----------------------------------------------------
    memset(siderealObjectData.object_name, 0, 56);
    strcpy(siderealObjectData.object_name, myAstroObj.printStarName(myAstroObj.getIdentifiedObjectNumber()));
    // -----------------------------------------------------
    // set object id number
    // -----------------------------------------------------
    siderealObjectData.object_number=myAstroObj.getIdentifiedObjectNumber();
  }
  // -------------------------------------------------------
  // alternate object tables
  // -------------------------------------------------------
  if (myAstroObj.getAltIdentifiedObjectTable()) {
    switch(myAstroObj.getAltIdentifiedObjectTable()) {
      casematrix_indi_h:
      siderealObjectData.object_table_i=4;  break; // Messier
      case(5):
      siderealObjectData.object_table_i=5;  break; // Caldwell
      case(6):
      siderealObjectData.object_table_i=6;  break; // Herschel 400 number
    }
    // -----------------------------------------------------
    // set table name
    // -----------------------------------------------------
    memset(siderealObjectData.object_table_name, 0, 56);
    strcpy(siderealObjectData.object_table_name, siderealObjectData.object_table[siderealObjectData.object_table_i]);
    // -----------------------------------------------------
    // set object id name
    // -----------------------------------------------------
    memset(siderealObjectData.object_name, 0, 56);
    strcpy(siderealObjectData.object_name, myAstroObj.printStarName(myAstroObj.getAltIdentifiedObjectNumber()));
    // -----------------------------------------------------
    // set object id number
    // -----------------------------------------------------
    siderealObjectData.object_number=myAstroObj.getAltIdentifiedObjectNumber();
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                PLANET TRACKING
// ------------------------------------------------------------------------------------------------------------------------------

void trackSun() {
  siderealPlanetData.sun_ra =myAstro.getRAdec();
  siderealPlanetData.sun_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.sun_az =myAstro.getAzimuth();
  siderealPlanetData.sun_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.sun_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.sun_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.sun_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.sun_distance=myAstro.getDistance();
  siderealPlanetData.sun_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.sun_ecliptic_long=myAstro.getEclipticLongitude();
  siderealPlanetData.earth_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.earth_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doSunRiseSetTimes();
  siderealPlanetData.sun_r =myAstro.getSunriseTime();
  siderealPlanetData.sun_s =myAstro.getSunsetTime();
  // create and ouptput solar tracking information
  if (systemData.output_sun_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$SUN,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.sun_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.sun_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.sun_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.sun_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.sun_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.sun_s + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackMoon() {
  myAstro.doMoon();
  siderealPlanetData.moon_ra =myAstro.getRAdec();
  siderealPlanetData.moon_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.moon_az =myAstro.getAzimuth();
  siderealPlanetData.moon_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  myAstro.doMoonRiseSetTimes();
  siderealPlanetData.moon_r =myAstro.getMoonriseTime();
  siderealPlanetData.moon_s =myAstro.getMoonsetTime();
  siderealPlanetData.moon_p =myAstro.getMoonPhase();
  siderealPlanetData.moon_lum=myAstro.getLunarLuminance();
  // siderealPlanetData.moon_ecliptic_long=myAstro.getEclipticLongitude();
  // create and ouptput lunar tracking information
  if (systemData.output_moon_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$MOON,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_p + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.moon_lum + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackMercury() {
  myAstro.doMercury();
  siderealPlanetData.mercury_ra =myAstro.getRAdec();
  siderealPlanetData.mercury_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.mercury_az =myAstro.getAzimuth();
  siderealPlanetData.mercury_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.mercury_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.mercury_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.mercury_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.mercury_distance=myAstro.getDistance();
  siderealPlanetData.mercury_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.mercury_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.mercury_r=myAstro.getRiseTime();
  siderealPlanetData.mercury_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_mercury_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$MERCURY,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mercury_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackVenus() {
  myAstro.doVenus();
  siderealPlanetData.venus_ra =myAstro.getRAdec();
  siderealPlanetData.venus_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.venus_az =myAstro.getAzimuth();
  siderealPlanetData.venus_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.venus_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.venus_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.venus_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.venus_distance=myAstro.getDistance();
  siderealPlanetData.venus_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.venus_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.venus_r=myAstro.getRiseTime();
  siderealPlanetData.venus_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_venus_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$VENUS,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.venus_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackMars() {
  myAstro.doMars();
  siderealPlanetData.mars_ra =myAstro.getRAdec();
  siderealPlanetData.mars_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.mars_az =myAstro.getAzimuth();
  siderealPlanetData.mars_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.mars_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.mars_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.mars_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.mars_distance=myAstro.getDistance();
  siderealPlanetData.mars_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.mars_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.mars_r=myAstro.getRiseTime();
  siderealPlanetData.mars_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_mars_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$MARS,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.mars_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackJupiter() {
  myAstro.doJupiter();
  siderealPlanetData.jupiter_ra =myAstro.getRAdec();
  siderealPlanetData.jupiter_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.jupiter_az =myAstro.getAzimuth();
  siderealPlanetData.jupiter_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.jupiter_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.jupiter_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.jupiter_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.jupiter_distance=myAstro.getDistance();
  siderealPlanetData.jupiter_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.jupiter_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.jupiter_r=myAstro.getRiseTime();
  siderealPlanetData.jupiter_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_jupiter_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$JUPITER,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.jupiter_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackSaturn() {
  myAstro.doSaturn();
  siderealPlanetData.saturn_ra =myAstro.getRAdec();
  siderealPlanetData.saturn_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.saturn_az =myAstro.getAzimuth();
  siderealPlanetData.saturn_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.saturn_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.saturn_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.saturn_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.saturn_distance=myAstro.getDistance();
  siderealPlanetData.saturn_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.saturn_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.saturn_r=myAstro.getRiseTime();
  siderealPlanetData.saturn_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_saturn_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$SATURN,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.saturn_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackUranus() {
  myAstro.doUranus();
  siderealPlanetData.uranus_ra =myAstro.getRAdec();
  siderealPlanetData.uranus_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.uranus_az =myAstro.getAzimuth();
  siderealPlanetData.uranus_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.uranus_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.uranus_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.uranus_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.uranus_distance=myAstro.getDistance();
  siderealPlanetData.uranus_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.uranus_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.uranus_r=myAstro.getRiseTime();
  siderealPlanetData.uranus_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_uranus_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$URANUS,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.uranus_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

void trackNeptune() {
  myAstro.doNeptune();
  siderealPlanetData.neptune_ra =myAstro.getRAdec();
  siderealPlanetData.neptune_dec=myAstro.getDeclinationDec();
  myAstro.doRAdec2AltAz();
  siderealPlanetData.neptune_az =myAstro.getAzimuth();
  siderealPlanetData.neptune_alt=myAstro.getAltitude()+myAstro.spData.DegreesAltitudeOffsetByElevationM;
  siderealPlanetData.neptune_helio_ecliptic_lat=myAstro.getHelioLat();
  siderealPlanetData.neptune_helio_ecliptic_long=myAstro.getHelioLong();
  siderealPlanetData.neptune_radius_vector=myAstro.getRadiusVec();
  siderealPlanetData.neptune_distance=myAstro.getDistance();
  siderealPlanetData.neptune_ecliptic_lat=myAstro.getEclipticLatitude();
  siderealPlanetData.neptune_ecliptic_long=myAstro.getEclipticLongitude();
  myAstro.doXRiseSetTimes();
  siderealPlanetData.neptune_r=myAstro.getRiseTime();
  siderealPlanetData.neptune_s=myAstro.getSetTime();
  // create and ouptput tracking information
  if (systemData.output_neptune_enabled==true) {
    memset(siderealPlanetData.sentence, 0, sizeof(siderealPlanetData.sentence));
    strcat(siderealPlanetData.sentence, "$NEPTUNE,");
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_ra + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_dec + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_az + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_alt + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_r + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_s + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_helio_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_helio_ecliptic_long + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_radius_vector + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_distance + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_ecliptic_lat + String(",")).c_str());
    strcat(siderealPlanetData.sentence, String(siderealPlanetData.neptune_ecliptic_long + String(",")).c_str());
    // append checksum
    createChecksum(siderealPlanetData.sentence);
    strcat(siderealPlanetData.sentence, "*");
    strcat(siderealPlanetData.sentence, SerialLink.checksum);
    Serial.println(siderealPlanetData.sentence);
    // debug(satData.satio_sentence);
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                     CLEAR PLANET TRACKING DATA
// ------------------------------------------------------------------------------------------------------------------------------ 

void clearSun() {
  siderealPlanetData.sun_ra=NAN;
  siderealPlanetData.sun_dec=NAN;
  siderealPlanetData.sun_az=NAN;
  siderealPlanetData.sun_alt=NAN;
  siderealPlanetData.sun_r=NAN;
  siderealPlanetData.sun_s=NAN;
}

void clearMoon() {
  siderealPlanetData.moon_ra=NAN;
  siderealPlanetData.moon_dec=NAN;
  siderealPlanetData.moon_az=NAN;
  siderealPlanetData.moon_alt=NAN;
  siderealPlanetData.moon_r=NAN;
  siderealPlanetData.moon_s=NAN;
  siderealPlanetData.moon_p=NAN;
  siderealPlanetData.moon_lum=NAN;
}

void clearMercury() {
  siderealPlanetData.mercury_ra=NAN;
  siderealPlanetData.mercury_dec=NAN;
  siderealPlanetData.mercury_az=NAN;
  siderealPlanetData.mercury_alt=NAN;
  siderealPlanetData.mercury_r=NAN;
  siderealPlanetData.mercury_s=NAN;
  siderealPlanetData.mercury_helio_ecliptic_lat=NAN;
  siderealPlanetData.mercury_helio_ecliptic_long=NAN;
  siderealPlanetData.mercury_radius_vector=NAN;
  siderealPlanetData.mercury_distance=NAN;
  siderealPlanetData.mercury_ecliptic_lat=NAN;
  siderealPlanetData.mercury_ecliptic_long=NAN;
}

void clearVenus() {
  siderealPlanetData.venus_ra=NAN;
  siderealPlanetData.venus_dec=NAN;
  siderealPlanetData.venus_az=NAN;
  siderealPlanetData.venus_alt=NAN;
  siderealPlanetData.venus_r=NAN;
  siderealPlanetData.venus_s=NAN;
  siderealPlanetData.venus_helio_ecliptic_lat=NAN;
  siderealPlanetData.venus_helio_ecliptic_long=NAN;
  siderealPlanetData.venus_radius_vector=NAN;
  siderealPlanetData.venus_distance=NAN;
  siderealPlanetData.venus_ecliptic_lat=NAN;
  siderealPlanetData.venus_ecliptic_long=NAN;
}

void clearMars() {
  siderealPlanetData.mars_ra=NAN;
  siderealPlanetData.mars_dec=NAN;
  siderealPlanetData.mars_az=NAN;
  siderealPlanetData.mars_alt=NAN;
  siderealPlanetData.mars_r=NAN;
  siderealPlanetData.mars_s=NAN;
  siderealPlanetData.mars_helio_ecliptic_lat=NAN;
  siderealPlanetData.mars_helio_ecliptic_long=NAN;
  siderealPlanetData.mars_radius_vector=NAN;
  siderealPlanetData.mars_distance=NAN;
  siderealPlanetData.mars_ecliptic_lat=NAN;
  siderealPlanetData.mars_ecliptic_long=NAN;
}

void clearJupiter() {
  siderealPlanetData.jupiter_ra=NAN;
  siderealPlanetData.jupiter_dec=NAN;
  siderealPlanetData.jupiter_az=NAN;
  siderealPlanetData.jupiter_alt=NAN;
  siderealPlanetData.jupiter_r=NAN;
  siderealPlanetData.jupiter_s=NAN;
  siderealPlanetData.jupiter_helio_ecliptic_lat=NAN;
  siderealPlanetData.jupiter_helio_ecliptic_long=NAN;
  siderealPlanetData.jupiter_radius_vector=NAN;
  siderealPlanetData.jupiter_distance=NAN;
  siderealPlanetData.jupiter_ecliptic_lat=NAN;
  siderealPlanetData.jupiter_ecliptic_long=NAN;
}

void clearSaturn() {
  siderealPlanetData.saturn_ra=NAN;
  siderealPlanetData.saturn_dec=NAN;
  siderealPlanetData.saturn_az=NAN;
  siderealPlanetData.saturn_alt=NAN;
  siderealPlanetData.saturn_r=NAN;
  siderealPlanetData.saturn_s=NAN;
  siderealPlanetData.saturn_helio_ecliptic_lat=NAN;
  siderealPlanetData.saturn_helio_ecliptic_long=NAN;
  siderealPlanetData.saturn_radius_vector=NAN;
  siderealPlanetData.saturn_distance=NAN;
  siderealPlanetData.saturn_ecliptic_lat=NAN;
  siderealPlanetData.saturn_ecliptic_long=NAN;
}

void clearUranus() {
  siderealPlanetData.uranus_ra=NAN;
  siderealPlanetData.uranus_dec=NAN;
  siderealPlanetData.uranus_az=NAN;
  siderealPlanetData.uranus_alt=NAN;
  siderealPlanetData.uranus_r=NAN;
  siderealPlanetData.uranus_s=NAN;
  siderealPlanetData.uranus_helio_ecliptic_lat=NAN;
  siderealPlanetData.uranus_helio_ecliptic_long=NAN;
  siderealPlanetData.uranus_radius_vector=NAN;
  siderealPlanetData.uranus_distance=NAN;
  siderealPlanetData.uranus_ecliptic_lat=NAN;
  siderealPlanetData.uranus_ecliptic_long=NAN;
}

void clearNeptune() {
  siderealPlanetData.neptune_ra=NAN;
  siderealPlanetData.neptune_dec=NAN;
  siderealPlanetData.neptune_az=NAN;
  siderealPlanetData.neptune_alt=NAN;
  siderealPlanetData.neptune_r=NAN;
  siderealPlanetData.neptune_s=NAN;
  siderealPlanetData.neptune_helio_ecliptic_lat=NAN;
  siderealPlanetData.neptune_helio_ecliptic_long=NAN;
  siderealPlanetData.neptune_radius_vector=NAN;
  siderealPlanetData.neptune_distance=NAN;
  siderealPlanetData.neptune_ecliptic_lat=NAN;
  siderealPlanetData.neptune_ecliptic_long=NAN;
}

void clearTrackPlanets() {
  clearSun();
  clearMoon();
  clearMercury();
  clearVenus();
  clearMars();
  clearJupiter();
  clearSaturn();
  clearUranus();
  clearNeptune();
}

void trackEarth() {

}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                  TRACK PLANETS
// ------------------------------------------------------------------------------------------------------------------------------ 

void trackPlanets() {
  // -------------------------------------------------------
  // do planet elements sun, once before doing other planets
  // -------------------------------------------------------
  myAstro.doPlanetElements();
  myAstro.doSun();
  // -------------------------------------------------------
  // now do other plans
  // -------------------------------------------------------
  if (systemData.sidereal_track_sun==true) {trackSun();}
  else {clearSun();}
  if (systemData.sidereal_track_moon==true) {trackMoon();}
  else {clearMoon();}
  if (systemData.sidereal_track_mercury==true) {trackMercury();}
  else {clearMercury();}
  if (systemData.sidereal_track_venus==true) {trackVenus();}
  else {clearVenus();}
  if (systemData.sidereal_track_mars==true) {trackMars();}
  else {clearMars();}
  if (systemData.sidereal_track_jupiter==true) {trackJupiter();}
  else {clearJupiter();}
  if (systemData.sidereal_track_saturn==true) {trackSaturn();}
  else {clearSaturn();}
  if (systemData.sidereal_track_uranus==true) {trackUranus();}
  else {clearUranus();}
  if (systemData.sidereal_track_neptune==true) {trackNeptune();}
  else {clearNeptune();}
  // ------------------------------------------------------------
  // meteor showers (move to new function or rename trackPlanets)
  // ------------------------------------------------------------
  setMeteorShowerWarning();
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                          SETUP PLANET TRACKING
// ------------------------------------------------------------------------------------------------------------------------------
// once data is set, this function can be called once before calling trackPlanets
// ------------------------------------------------------------------------------------------------------------------------------ 

bool track_planet_period=false;
bool test_planets=false;
int test_hour=0;
int test_month=0;

void setTrackPlanets(void * pvParamaters) {
  while (1) {
    if (track_planet_period==true) {
      track_planet_period=false; 
      // Serial.println("[setTrackPlanets] updating");
      if (systemData.satio_enabled) {
        if (test_planets==false) {
          myAstro.setLatLong(satData.degrees_latitude, satData.degrees_longitude);
          // ----------------------------------------------------------------------------------
          // RTC should be UTC (GMT)
          // ----------------------------------------------------------------------------------
          myAstro.setGMTdate((int)satData.rtc_year, (int)satData.rtc_month, (int)satData.rtc_day);
          myAstro.setGMTtime((int)satData.rtc_hour, (int)satData.rtc_minute, (float)satData.rtc_second);
          // ----------------------------------------------------------------------------------
          // Set/reject DST
          // ----------------------------------------------------------------------------------
          // myAstro.rejectDST();
          // myAstro.setDST();
          myAstro.useAutoDST(); // make optional and or use user defined UTC offset time
          // ----------------------------------------------------------------------------------
          // Local time (RTC+-)
          // ----------------------------------------------------------------------------------
          myAstro.setLocalTime((int)satData.local_hour, (int)satData.local_minute, (float)satData.local_second);
          // ----------------------------------------------------------------------------------
          // Elevation (experimental)
          // ----------------------------------------------------------------------------------
          myAstro.setElevationM(atol(gnggaData.altitude));
          myAstro.spData.DegreesAltitudeOffsetByElevationM = myAstro.inRange90(myAstro.getDegreesAltitudeOffsetByElevationM(atol(gnggaData.altitude)));
        }
        else {
          test_hour++;if (test_hour>23) {test_hour=0;}
          test_month++;if (test_month>11) {test_month=0;}
          myAstro.setLatLong(satData.degrees_latitude, satData.degrees_longitude);
          myAstro.rejectDST();
          myAstro.setGMTdate(2025, test_month, 1);
          myAstro.setGMTtime(test_hour, 0, 0);
          myAstro.setLocalTime(test_hour, 0, 0);
        }
        trackPlanets();
        ui_track_planet_period=true;
      }
    }
    delay(1);
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                    MATRIX FUNCTION EXPRESSIONS
// ------------------------------------------------------------------------------------------------------------------------------ 

/*
matrix switch requires all checks to return true for a matrix to be active, therefore checks can be inverted as required, to
return true when otherwise a check would return false, which allows more flexibility.
*/

// calculate if n0 in (+- range/2) of n1
bool in_range_check_true(double n0, double n1, double r) {
  // debug(
  //   "in_range_check_true: (n0 " +
  //   String(n0) +
  //   " >= n1 (" +
  //   String(n1) +
  //   " - r/2 " +
  //   String(r/2) +
  //   ")) && (n0 " +
  //   String(n0) +
  //   " <= n1 (" +
  //   String(n1) +
  //   " + r/2 " +
  //   String(r/2) +
  //   "))");
  if ((n0  >=  n1 - r/2) && (n0  <= n1 + r/2)) {return true;}
  else {return false;}
}

// calculate if n0 in (+- range/2) of n1
bool in_range_check_false(double n0, double n1, double r) {
  // debug(
  //   "in_range_check_false: (n0 " +
  //   String(n0) +
  //   " >= n1 (" +
  //   String(n1) +
  //   " - r/2 " +
  //   String(r/2) +
  //   ")) && (n0 " +
  //   String(n0) +
  //   " <= n1 (" +
  //   String(n1) +
  //   " + r/2 " +
  //   String(r/2) +
  //   "))");
  if ((n0  >=  n1 - r/2) && (n0  <= n1 + r/2)) {return false;}
  else {return true;}
}

bool in_square_range_check_true(double x0, double x1, double y0, double y1, double r) {
  if (in_range_check_true(x0, x1, r)==true) {
    if (in_range_check_true(y0, y1, r)==true) {return true;} else return false;}
  else {return false;}
}

bool in_square_range_check_false(double x0, double x1, double y0, double y1, double r) {
  if (in_range_check_true(x0, x1, r)==true) {
    if (in_range_check_true(y0, y1, r)==true) {return false;} else return true;}
  else {return true;}
}

bool check_over_true(double n0, double n1) {
  // debug("check_over_true: n0 " + String(n0) + " > n1 " + String(n1));
  if (n0 > n1) {return true;}
  else {return false;}
}

bool check_over_false(double n0, double n1) {
  // debug("check_over_false: n0 " + String(n0) + " > n1 " + String(n1));
  if (n0 > n1) {return false;}
  else {return true;}
}

bool check_under_true(double n0, double n1) {
  // debug("check_under_true: n0 " + String(n0) + " < n1 " + String(n1));
  if (n0 < n1) {return true;}
  else {return false;}
}

bool check_under_false(double n0, double n1) {
  // debug("check_under_false: n0 " + String(n0) + " < n1 " + String(n1));
  if (n0 < n1) {return false;}
  else {return true;}
}

bool check_equal_true(double n0, double n1) {
  // debug("check_equal_true: n0 " + String(n0) + "==n1 " + String(n1));
  if (n0==n1) {return true;}
  else {return false;}
}

bool check_equal_false(double n0, double n1) {
  // debug("check_equal_false: n0 " + String(n0) + "==n1 " + String(n1));
  if (n0 != n1) {return true;}
  else {return false;}
}

bool check_ge_and_le_true(double n0, double n1, double n2) {
  // debug(
  //   "check_ge_and_le_true: n0 " +
  //   String(n0) +
  //   " >= n1 " +
  //   String(n1) +
  //   " && n0 " +
  //   String(n0) +
  //   " <= " +
    // String(n2));
  if ((n0 >= n1) && (n0 <= n2)) {return true;}
  else {return false;}
}

bool check_ge_and_le_false(double n0, double n1, double n2) {
  // debug(
  //   "check_ge_and_le_false: n0 " +
  //   String(n0) +
  //   " >= n1 " +
  //   String(n1) +
  //   " && n0 " +
  //   String(n0) +
  //   " <= " +
  //   String(n2));
  if ((n0 >= n1) && (n0 <= n2)) {return false;}
  else {return true;}
}

bool check_strncmp_true(char * c0, char * c1, int n) {
  // debug("check_strncmp_true: c0 " + String(c0) + "==c1 " + String(c1) + " (n=" + String(n) + ")");
  if (strncmp(c0, c1, n)==0) {return true;}
  else {return false;}
}

bool check_strncmp_false(char * c0, char * c1, int n) {
  // debug("check_strncmp_false: c0 " + String(c0) + "==c1 " + String(c1) + " (n=" + String(n) + ")");
  if (strncmp(c0, c1, n)==0) {return false;}
  else {return true;}
}

bool check_bool_true(bool _bool) {
  // debug("check_bool_true: " + String(_bool));
  if (_bool==true) {return true;} else {return false;}
}

bool check_bool_false(bool _bool) {
  // debug("check_bool_false: " + String(_bool));
  if (_bool==false) {return true;} else {return false;}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                   MATRIX TIMER
// ------------------------------------------------------------------------------------------------------------------------------ 

bool MatrixTimer(double n0, double n1, int Mi) {
  /*
  units of time accumulated by an isr alarm.
  can be used to modulate output, if other functions are also set then the output will still be modulated according to matrix timer.
  x (n0): off interval
  y (n1): on interval (should not exceed off interval)
  example: x=1, y=1=on for 1 unit of time, off for 1 unit of time
  */
  // ---------------------
  // turn on or remain off
  // ---------------------
  if (matrixData.matrix_switch_state[0][Mi]==0) {
    if ((timeData.accumulated_intervals - matrixData.matrix_timers[0][Mi]) < n0) {return false;}
    if ((timeData.accumulated_intervals - matrixData.matrix_timers[0][Mi]) > n0) {matrixData.matrix_timers[0][Mi]=timeData.accumulated_intervals; return true;}
    else {false;}
  }
  // ---------------------
  // turn off or remain on
  // ---------------------
  else if (matrixData.matrix_switch_state[0][Mi]==1) {
    if      ((timeData.accumulated_intervals - matrixData.matrix_timers[0][Mi]) < n1) {return true;}
    /*
    timer style: stacked time: y on time period is stacked on top of x time interval.
                 (1) total off time is x (x time interval effectively becomes an off time period).
                 (2) total on time is y.
                 (3) total on off time is x+y.
                 (4) considerations: harder to predict because on and off times will creep.
    */
    // else if ((timeData.accumulated_intervals - matrixData.matrix_timers[0][Mi]) > n1) {matrixData.matrix_timers[0][Mi]=timeData.accumulated_intervals; return false;}

    /*
    timer style: integrated time: y on time occurrs for a period within x time interval.
                 (1) total off time is x - y (time interval minus on time period).
                 (2) total on time is y.
                 (3) total on off time is x.
                 (4) considerations: take care no to overlap x and y to prevent always returning true or false.
                 
    */
    else if ((timeData.accumulated_intervals - matrixData.matrix_timers[0][Mi]) > n1) {matrixData.matrix_timers[0][Mi]=timeData.accumulated_intervals-n1; return false;}
    else {true;}
  }
  return false;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                 MATRIX: SWITCH
// ------------------------------------------------------------------------------------------------------------------------------ 

void matrixSwitch() {
  /*
  check stacked logic for each matrix switch, resulting in either true or false (high/low) for each matrix switch (output pin).
  */
  // -----------------------------------------------------------------------------------------------------------------------
  // iterate over each matrix switch
  // -----------------------------------------------------------------------------------------------------------------------
  for (int Mi=0; Mi < matrixData.max_matrices; Mi++) {
    // debug("[Mi] " + String(Mi) + " [E] " + String(matrixData.matrix_switch_enabled[0][Mi]));
    if (matrixData.matrix_switch_enabled[0][Mi]==1) {

      // -------------------------------------------------------------------------------------------------------------------
      // temporary switch is zero (each switch has 0 to 10 functions that must all be true for the switch to turn high/low)
      // -------------------------------------------------------------------------------------------------------------------
      bool tmp_matrix[matrixData.max_matrix_functions]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
      int count_none_function=0;

      // -------------------------------------------------------------------------------------------------------------------
      // iterate over each function in the current matrix switch
      // -------------------------------------------------------------------------------------------------------------------
      for (int Fi=0; Fi < matrixData.max_matrix_functions; Fi++) {
        // uncomment to debug
        // debug("[Mi] " + String(Mi));
        // debug("[Fi] " + String(Fi));
        // debug("[matrixData.matrix_function[Mi][Fi]] " + String(matrixData.matrix_function[Mi][Fi]));

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                          FIRST IS NONE
        // ----------------------------------------------------------------------------------------------------------------------
        // perfromance prefers adding function names in matrix from index zero, so if function index zero is None then break
        // ----------------------------------------------------------------------------------------------------------------------
        if ((strcmp(matrixData.matrix_function[Mi][Fi], "None")==0) && (Fi==0)) {break;}

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                   NONE
        // ----------------------------------------------------------------------------------------------------------------------
        // put true in temporary matrix for None at non-zero function indices (allow for 1-10 functions to be set)
        // ----------------------------------------------------------------------------------------------------------------------
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "None")==0) {
          tmp_matrix[Fi]=1; count_none_function++;}

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                ENABLED
        // ----------------------------------------------------------------------------------------------------------------------
        // put true in temporary matrix if switch is function name is set to Enabled (return true with no further logic required)
        // ----------------------------------------------------------------------------------------------------------------------
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "Enabled")==0) {tmp_matrix[Fi]=1;}

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                               OVERLOAD
        // ----------------------------------------------------------------------------------------------------------------------
        // a special function name for logic that requires loop time be below any specified time (overload_max)
        // ----------------------------------------------------------------------------------------------------------------------
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "Overload")==0) {tmp_matrix[Fi]=check_bool_true(systemData.overload);}

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                             SWITCHLINK
        // ----------------------------------------------------------------------------------------------------------------------
        // a special function that allow mirroring/inversion of a specified (function value x) matrix switch (0-19).
        // ----------------------------------------------------------------------------------------------------------------------
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "SwitchLink")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_equal_true(matrixData.matrix_switch_state[0][(int)matrixData.matrix_function_xyz[Mi][Fi][0]], 1);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_equal_false(matrixData.matrix_switch_state[0][(int)matrixData.matrix_function_xyz[Mi][Fi][0]], 1);
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                           SECOND TIMER
        // ----------------------------------------------------------------------------------------------------------------------
        // modulation, with or without any further logic
        // ----------------------------------------------------------------------------------------------------------------------
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "MatrixTimer")==0) {
          tmp_matrix[Fi]=MatrixTimer(matrixData.matrix_function_xyz[Mi][Fi][0],
          matrixData.matrix_function_xyz[Mi][Fi][1], Mi);
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                    RTC
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "LocalTime", strlen("LocalTime"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "LocalTimeOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "LocalTimeUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }
    
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "LocalTimeEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }
    
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "LocalTimeRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Day", strlen("Day"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "DaySunday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Sunday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Sunday")==0) {tmp_matrix[Fi]=1;}
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DayMonday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Monday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Monday")==0) {tmp_matrix[Fi]=1;}
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DayTuesday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Tuesday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Tuesday")==0) {tmp_matrix[Fi]=1;}
            }
          }
            
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DayWednesday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Wednesday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Wednesday")==0) {tmp_matrix[Fi]=1;}
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DayThursday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Thursday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Thursday")==0) {tmp_matrix[Fi]=1;}
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DayFriday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Friday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Friday")==0) {tmp_matrix[Fi]=1;}
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DaySaturday")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              if (strcmp(satData.local_weekday, "Saturday")==0) {tmp_matrix[Fi]=1;}
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              if (!strcmp(satData.local_weekday, "Saturday")==0) {tmp_matrix[Fi]=1;}
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Date", strlen("Date"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "DateDayX")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(satData.local_day, (int)matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(satData.local_day, (int)matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DateMonthX")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(satData.local_month, (int)matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(satData.local_month, (int)matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DateYearX")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(satData.local_year, (int)matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(satData.local_year, (int)matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                  SATIO
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Deg", strlen("Deg"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLatOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_true(satData.degrees_latitude,
                matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLonOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLonUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(satData.degrees_longitude,
                matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLatUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLatEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLonEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLatRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=in_range_check_true(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][2]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=in_range_check_false(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][2]);
            }
          }
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLonRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=in_range_check_true(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0], matrixData.matrix_function_xyz[Mi][Fi][2]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=in_range_check_false(satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][0], matrixData.matrix_function_xyz[Mi][Fi][2]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DegLatLonRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=in_square_range_check_true(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][1],
              matrixData.matrix_function_xyz[Mi][Fi][2]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=in_square_range_check_false(satData.degrees_latitude,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              satData.degrees_longitude,
              matrixData.matrix_function_xyz[Mi][Fi][1],
              matrixData.matrix_function_xyz[Mi][Fi][2]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                  GNGGA
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNGGA", strlen("UTCTimeGNGGA"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNGGAOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNGGAUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNGGAEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNGGARange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnggaData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strcmp(matrixData.matrix_function[Mi][Fi], "PosStatusGNGGA")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_equal_true(atol(gnggaData.solution_status),
            matrixData.matrix_function_xyz[Mi][Fi][0]);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_equal_false(atol(gnggaData.solution_status),
            matrixData.matrix_function_xyz[Mi][Fi][0]);
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "SatCount", strlen("SatCount"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "SatCountOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SatCountUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SatCountEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SatCountRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnggaData.satellite_count_gngga),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "HemiGNGGA", strlen("HemiGNGGA"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNGGANorth")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnggaData.latitude_hemisphere, N_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnggaData.latitude_hemisphere, N_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNGGAEast")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnggaData.longitude_hemisphere, E_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnggaData.longitude_hemisphere, E_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNGGASouth")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnggaData.latitude_hemisphere, S_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnggaData.latitude_hemisphere, S_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNGGAWest")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnggaData.longitude_hemisphere, W_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnggaData.longitude_hemisphere, W_char, 1);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "GPSPrecision", strlen("GPSPrecision"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "GPSPrecisionOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GPSPrecisionUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GPSPrecisionEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GPSPrecisionRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnggaData.hdop_precision_factor),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "AltGNGGA", strlen("AltGNGGA"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "AltGNGGAOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "AltGNGGAUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "AltGNGGAEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "AltGNGGARange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnggaData.altitude),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                  GNRMC
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNRMC", strlen("UTCTimeGNRMC"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNRMCOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNRMCUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNRMCEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCTimeGNRMCRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnrmcData.utc_time),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "HemiGNRMC", strlen("HemiGNRMC"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNRMCNorth")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.latitude_hemisphere, N_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.latitude_hemisphere, N_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNRMCEast")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.longitude_hemisphere, E_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.longitude_hemisphere, E_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNRMCSouth")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.latitude_hemisphere, S_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.latitude_hemisphere, S_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HemiGNRMCWest")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.longitude_hemisphere, W_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.longitude_hemisphere, W_char, 1);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "GSpeedGNRMC", strlen("GSpeedGNRMC"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "GSpeedGNRMCOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GSpeedGNRMCUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GSpeedGNRMCEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GSpeedGNRMCRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnrmcData.ground_speed),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "HeadingGNRMC", strlen("HeadingGNRMC"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "HeadingGNRMCOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0]); 
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0]); 
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HeadingGNRMCUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HeadingGNRMCEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "HeadingGNRMCRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnrmcData.ground_heading),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "UTCDateGNRMC", strlen("UTCDateGNRMC"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCDateGNRMCOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCDateGNRMCUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCDateGNRMCEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UTCDateGNRMCRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gnrmcData.utc_date),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strcmp(matrixData.matrix_function[Mi][Fi], "PosStatusGNRMCA")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_strncmp_true(gnrmcData.positioning_status, A_char, 1);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_strncmp_false(gnrmcData.positioning_status, A_char, 1);
          }
        }

        else if (strcmp(matrixData.matrix_function[Mi][Fi], "PosStatusGNRMCV")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_strncmp_true(gnrmcData.positioning_status, V_char, 1);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_strncmp_false(gnrmcData.positioning_status, V_char, 1);
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "ModeGNRMC", strlen("ModeGNRMC"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "ModeGNRMCA")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.mode_indication, A_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.mode_indication, A_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "ModeGNRMCD")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.mode_indication, D_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.mode_indication, D_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "ModeGNRMCE")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.mode_indication, E_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.mode_indication, E_char, 1);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "ModeGNRMCN")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_strncmp_true(gnrmcData.mode_indication, N_char, 1);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_strncmp_false(gnrmcData.mode_indication, N_char, 1);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                  GPATT
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "PitchGPATT", strlen("PitchGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "PitchGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "PitchGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "PitchGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "PitchGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.pitch),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "RollGPATT", strlen("RollGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "RollGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "RollGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "RollGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "RollGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.roll),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "YawGPATT", strlen("YawGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "YawGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "YawGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "YawGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "YawGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.yaw),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "GSTDataGPATT", strlen("GSTDataGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "GSTDataGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GSTDataGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GSTDataGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "GSTDataGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.gst_data),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "MileageGPATT", strlen("MileageGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "MileageGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MileageGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MileageGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MileageGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.mileage),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "SpeedNumGPATT", strlen("SpeedNumGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "SpeedNumGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SpeedNumGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SpeedNumGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SpeedNumGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.speed_num),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "LFlagGPATT", strlen("LFlagGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "LFlagGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "LFlagGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "LFlagGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "LFlagGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.line_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "INSGPATT", strlen("INSGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "INSGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "INSGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "INSGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "INSGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.ins),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "RSFlagGPATT", strlen("RSFlagGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "RSFlagGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "RSFlagGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "RSFlagGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "RSFlagGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.run_state_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "SFlagGPATT", strlen("SFlagGPATT"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "SFlagGPATTOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SFlagGPATTUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SFlagGPATTEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SFlagGPATTRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(atol(gpattData.static_flag),
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                                 METEOR
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Meteors", strlen("Meteors"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "Meteors")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_bool_true(
                //                           x: select meteor shower                         y: select datetime range or peak datetime range
                meteor_shower_warning_system[(int)matrixData.matrix_function_xyz[Mi][Fi][0]][(int)matrixData.matrix_function_xyz[Mi][Fi][1]]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_bool_false(
                //                           x: select meteor shower                         y: select datetime range or peak datetime range
                meteor_shower_warning_system[(int)matrixData.matrix_function_xyz[Mi][Fi][0]][(int)matrixData.matrix_function_xyz[Mi][Fi][1]]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                     SIDEREAL TIME: SUN
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Sun", strlen("Sun"))==0) {
        
          if (strcmp(matrixData.matrix_function[Mi][Fi], "SunAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.sun_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.sun_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SunAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.sun_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.sun_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // sunrise time less than current time: true after sunrise until midnight
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sunrise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.sun_r, hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.sun_r, hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          // sunset time less than current time: true after sunset until midnight                                                                  
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sunset")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.sun_s, hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.sun_s, hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }
        }

        // daytime: current time in range of sunrise and sunset
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "DayTime")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.sun_r, siderealPlanetData.sun_s);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.sun_r, siderealPlanetData.sun_s);
          }
        }

        // night time: current time not in range of sunrise and sunset
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "NightTime")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.sun_r,
            siderealPlanetData.sun_s);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.sun_r,
            siderealPlanetData.sun_s);
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                    SIDEREAL TIME: MOON
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Moon", strlen("Moon"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.moon_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.moon_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.moon_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.moon_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Moonrise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.moon_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.moon_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Moonset")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.moon_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.moon_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.moon_r,
              siderealPlanetData.moon_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.moon_r,
              siderealPlanetData.moon_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonDown")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.moon_r,
              siderealPlanetData.moon_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.moon_r,
              siderealPlanetData.moon_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonPhaseOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true((int)siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_false((int)siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonPhaseUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true((int)siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_false((int)siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonPhaseEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true((int)siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_false((int)siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MoonPhaseRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.moon_p,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                 SIDEREAL TIME: MERCURY
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Mercury", strlen("Mercury"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "MercuryAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.mercury_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.mercury_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MercuryAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.mercury_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.mercury_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MercuryRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.mercury_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.mercury_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MercurySet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.mercury_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.mercury_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MercuryUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.mercury_r,
              siderealPlanetData.mercury_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.mercury_r,
              siderealPlanetData.mercury_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MercuryDown")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.mercury_r,
              siderealPlanetData.mercury_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.mercury_r,
              siderealPlanetData.mercury_s);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                   SIDEREAL TIME: VENUS
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Venus", strlen("Venus"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "VenusAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.venus_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.venus_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "VenusAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.venus_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.venus_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "VenusRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.venus_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.venus_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "VenusSet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.venus_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.venus_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "VenusUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.venus_r, 
              siderealPlanetData.venus_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.venus_r, 
              siderealPlanetData.venus_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "VenusDown")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.venus_r,
              siderealPlanetData.venus_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.venus_r,
              siderealPlanetData.venus_s);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                    SIDEREAL TIME: MARS
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Mars", strlen("Mars"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "MarsAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.mars_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.mars_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MarsAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.mars_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.mars_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MarsRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.mars_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.mars_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MarsSet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.mars_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.mars_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "MarsUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.mars_r,
              siderealPlanetData.mars_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.mars_r,
              siderealPlanetData.mars_s);
            }
          }
        }

        else if (strcmp(matrixData.matrix_function[Mi][Fi], "MarsDown")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.mars_r,
            siderealPlanetData.mars_s);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.mars_r,
            siderealPlanetData.mars_s);
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                 SIDEREAL TIME: JUPITER
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Jupiter", strlen("Jupiter"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JupiterAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.jupiter_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.jupiter_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JupiterAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.jupiter_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.jupiter_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JupiterRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.jupiter_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.jupiter_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JupiterSet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.jupiter_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.jupiter_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JupiterUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.jupiter_r,
              siderealPlanetData.jupiter_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.jupiter_r,
              siderealPlanetData.jupiter_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JupiterDown")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.jupiter_r,
              siderealPlanetData.jupiter_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.jupiter_r,
              siderealPlanetData.jupiter_s);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                  SIDEREAL TIME: SATURN
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Saturn", strlen("Saturn"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "SaturnAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.saturn_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.saturn_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SaturnAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.saturn_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.saturn_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SaturnRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.saturn_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.saturn_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SaturnSet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.saturn_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.saturn_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "SaturnUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.saturn_r,
              siderealPlanetData.saturn_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.saturn_r,
              siderealPlanetData.saturn_s);
            }
          }
        }

        else if (strcmp(matrixData.matrix_function[Mi][Fi], "SaturnDown")==0) {
          if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
            tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.saturn_r,
            siderealPlanetData.saturn_s);
          }
          else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
            tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
            siderealPlanetData.saturn_r,
            siderealPlanetData.saturn_s);
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                  SIDEREAL TIME: URANUS
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Uranus", strlen("Uranus"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "UranusAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.uranus_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.uranus_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UranusAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.uranus_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.uranus_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UranusRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.uranus_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.uranus_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UranusSet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.uranus_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.uranus_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UranusUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.uranus_r,
              siderealPlanetData.uranus_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.uranus_r,
              siderealPlanetData.uranus_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "UranusDown")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.uranus_r,
              siderealPlanetData.uranus_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.uranus_r,
              siderealPlanetData.uranus_s);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                 SIDEREAL TIME: NEPTUNE
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Neptune", strlen("Neptune"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "NeptuneAzRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.neptune_az,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.neptune_az,
                matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "NeptuneAltRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(siderealPlanetData.neptune_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(siderealPlanetData.neptune_alt,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "NeptuneRise")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.neptune_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.neptune_r,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "NeptuneSet")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(siderealPlanetData.neptune_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(siderealPlanetData.neptune_s,
              hoursMinutesToInt(satData.local_hour, satData.local_minute));
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "NeptuneUp")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.neptune_r,
              siderealPlanetData.neptune_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.neptune_r,
              siderealPlanetData.neptune_s);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "NeptuneDown")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.neptune_r,
              siderealPlanetData.neptune_s);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute),
              siderealPlanetData.neptune_r,
              siderealPlanetData.neptune_s);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                               VALIDITY
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strcmp(matrixData.matrix_function[Mi][Fi], "GNGGAValidCS")==0) {
          tmp_matrix[Fi]=check_bool_true(gnggaData.valid_checksum);}
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "GNRMCValidCS")==0) {
          tmp_matrix[Fi]=check_bool_true(gnrmcData.valid_checksum);}
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "GPATTValidCS")==0) {
          tmp_matrix[Fi]=check_bool_true(gpattData.valid_checksum);}
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "GNGGAValidCD")==0) {
          tmp_matrix[Fi]=check_equal_true(gnggaData.count_valid_elements, 15);}
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "GNRMCValidCD")==0) {
          tmp_matrix[Fi]=check_equal_true(gnrmcData.count_valid_elements, 14);}
        else if (strcmp(matrixData.matrix_function[Mi][Fi], "GPATTValidCD")==0) {
          tmp_matrix[Fi]=check_equal_true(gpattData.count_valid_elements, 41);}
        

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                     WT901 ACCELERATION
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "WT901", strlen("WT901"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccXOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccXUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccXEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccXRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_acc_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccYOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccYUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccYEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccYRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_acc_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccZOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccZUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccZEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccZRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_acc_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                            WT901 ANGLE
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngXOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AccXUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngXEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngXRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_ang_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngYOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngYUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngYEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngYRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_ang_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngZOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngZUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngZEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901AngZRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_ang_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                   WT901 MAGNETIC FIELD
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagXOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagXUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagXEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagXRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_mag_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagYOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagYUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagYEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagYRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_mag_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagZOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagZUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagZEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901MagZRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_mag_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                             WT901 GYRO
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroXOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroXUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroXEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroXRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_gyr_x,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroYOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroYUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroYEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroYRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_gyr_y,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroZOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroZUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroZEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "WT901GyroZRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.wt901_gyr_z,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                       DHT11_0 HUMIDITY
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "DHT11", strlen("DHT11"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11H0Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11H0Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11H0Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11H0Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.dht11_h_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        
          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                        DHT11_0 CELSIUS
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11C0Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11C0Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11C0Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11C0Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.dht11_c_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
          
          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                     DHT11_0 FAHRENHEIT
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11F0Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11F0Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11F0Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11F0Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.dht11_f_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
          
          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                             DHT11_0 HEAT INDEX CELSIUS
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIC0Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIC0Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIC0Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIC0Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.dht11_hic_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
          
          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                          DHT11_0 HEAT INDEX FAHRENHEIT
          // ----------------------------------------------------------------------------------------------------------------------
          
          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIF0Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIF0Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIF0Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "DHT11HIF0Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.dht11_hif_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                               SENSOR 0
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "Sensor", strlen("Sensor"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor0Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor0Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor0Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor0Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_0,
              matrixData.matrix_function_xyz[Mi][Fi][0],
              matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_0,
                matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 1
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor1Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor1Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor1Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor1Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_1,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 2
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor2Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor2Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor2Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor2Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_2,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 3
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor3Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor3Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor3Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor3Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_3,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 4
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor4Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor4Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor4Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor4Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_4,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 5
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor5Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor5Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor5Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor5Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_5,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 6
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor6Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor6Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor6Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor6Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_6,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 7
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor7Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor7Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor7Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor7Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_7,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 8
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor8Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor8Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor8Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor8Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_8,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                               SENSOR 9
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor9Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor9Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor9Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor9Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_9,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                              SENSOR 10
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor10Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor10Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor10Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor10Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_10,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                              SENSOR 11
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor11Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor11Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor11Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor11Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_11,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                              SENSOR 12
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor12Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor12Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor12Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor12Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_12,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                              SENSOR 13
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor13Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor13Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor13Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor13Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_13,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                              SENSOR 14
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor14Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor14Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor14Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor14Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_14,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }

          // ----------------------------------------------------------------------------------------------------------------------
          //                                                                                                              SENSOR 15
          // ----------------------------------------------------------------------------------------------------------------------

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor15Over")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor15Under")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor15Equal")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "Sensor15Range")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.sensor_15,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                        Joy Stick 0: Up
        // ----------------------------------------------------------------------------------------------------------------------

        // change N to len
        // experiment with further increasing efficiency: JoyS0 broken down into JoyS0Up,JoyS0Down etc.
        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS0Up", strlen("JoyS0Up"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0UpOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0UpUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0UpEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0UpRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_0_u,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                      Joy Stick 0: Down
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS0Down", strlen("JoyS0Down"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0DownOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0DownUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0DownEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0DownRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_0_d,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                      Joy Stick 0: Left
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS0Left", strlen("JoyS0Left"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0LeftOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0LeftUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0LeftEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0LeftRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_0_l,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                     Joy Stick 0: Right
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS0Right", strlen("JoyS0Right"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0RightOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0RightUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0RightEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0RightRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_0_r,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                     Joy Stick 0: Click
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS0Click", strlen("JoyS0Click"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0ClickOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0ClickUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0ClickEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS0ClickRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_0_c,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                        Joy Stick 1: Up
        // ----------------------------------------------------------------------------------------------------------------------
        
        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS1Up", strlen("JoyS1Up"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1UpOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1UpUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1UpEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1UpRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_1_u,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                      Joy Stick 0: Down
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS1Down", strlen("JoyS1Down"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1DownOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1DownUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1DownEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1DownRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_1_d,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                      Joy Stick 0: Left
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS1Left", strlen("JoyS1Left"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1LeftOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1LeftUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1LeftEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1LeftRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_1_l,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                     Joy Stick 0: Right
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS1Right", strlen("JoyS1Right"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1RightOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1RightUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1RightEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1RightRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_1_r,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
        }

        // ----------------------------------------------------------------------------------------------------------------------
        //                                                                                                     Joy Stick 0: Click
        // ----------------------------------------------------------------------------------------------------------------------

        else if (strncmp(matrixData.matrix_function[Mi][Fi], "JoyS1Click", strlen("JoyS1Click"))==0) {

          if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1ClickOver")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_over_true(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_over_false(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1ClickUnder")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_under_true(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_under_false(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1ClickEqual")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_equal_true(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_equal_false(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0]);
            }
          }

          else if (strcmp(matrixData.matrix_function[Mi][Fi], "JoyS1ClickRange")==0) {
            if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==false) {
              tmp_matrix[Fi]=check_ge_and_le_true(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
            else if (matrixData.matrix_switch_inverted_logic[Mi][Fi]==true) {
              tmp_matrix[Fi]=check_ge_and_le_false(sensorData.as_1_c,
              matrixData.matrix_function_xyz[Mi][Fi][0],
                matrixData.matrix_function_xyz[Mi][Fi][1]);
            }
          }
       }
        
      }

      // ----------------------------------------------------------------------------------------------------------------------
      //                                                                                                           FINAL SWITCH
      // ----------------------------------------------------------------------------------------------------------------------
      // safety layer: disengage if all entries are None. a layer on top of initial check for None set at function index zero.
      // ----------------------------------------------------------------------------------------------------------------------
      if (count_none_function <= matrixData.max_matrix_functions-1) {

        // -------------------------------------------------------------------------------------------------------
        // the final bool: default final bool is true. if a single false is found then final bool is set to false.
        // -------------------------------------------------------------------------------------------------------
        bool final_bool=true;

        // -------------------------------------------------------------------------------------------------------
        // create a final bool
        // -------------------------------------------------------------------------------------------------------
        for (int FC=0; FC < matrixData.max_matrix_functions-1; FC++) {if (tmp_matrix[FC]==0) {final_bool=false; break;}}

        /*
        WARNING: why do you think you can trust the data you are receiving?
                 once you plug something into this, the 'satellites' are in control unless you have a way to override.
                 critical systems: arduino is neither medical nor military grade.
        */

        // -------------------------------------------------------------------------------------------------------
        // set matrix switch state as true/false according to final bool
        // -------------------------------------------------------------------------------------------------------
        if (final_bool==false) {matrixData.matrix_switch_state[0][Mi]=0;}
        else if (final_bool==true) {matrixData.matrix_switch_state[0][Mi]=1;}
      }
    }
    // -----------------------------------------
    // handle matrix switches that are disbaled.
    // -----------------------------------------
    else {matrixData.matrix_switch_state[0][Mi]=0;}
  }

  // ----------------------------------------------------------------------------------------------------------------------
  //                                                                                                                 OUTPUT
  // ----------------------------------------------------------------------------------------------------------------------
  if (systemData.output_matrix_enabled==true) {
    // -------------------------------
    // start building matrix sentence
    // -------------------------------
    memset(matrixData.matrix_sentence, 0, sizeof(matrixData.matrix_sentence));
    strcpy(matrixData.matrix_sentence, "$MATRIX,");
    // -------------------------------
    // append port mapping data
    // -------------------------------
    for (int i=0; i < matrixData.max_matrices; i++) {strcat(matrixData.matrix_sentence, String(String(matrixData.matrix_port_map[0][i])+",").c_str());}
    // -------------------------------
    // append matrix switch state data
    // -------------------------------
    for (int i=0; i < matrixData.max_matrices; i++) {strcat(matrixData.matrix_sentence, String(String(matrixData.matrix_switch_state[0][i])+",").c_str());}
    // -------------------------------
    // append checksum
    // -------------------------------
    createChecksum(matrixData.matrix_sentence);
    strcat(matrixData.matrix_sentence, "*");
    strcat(matrixData.matrix_sentence, SerialLink.checksum);
    // -------------------------------
    // print
    // -------------------------------
    Serial.println(matrixData.matrix_sentence);
    // debug(matrixData.matrix_sentence);
  }
  // ------------------------------------------------
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                 STATS COUNTERS
// ------------------------------------------------------------------------------------------------------------------------------

void CountMatrixEnabled() {
  matrixData.matrix_enabled_i=0;
  matrixData.matrix_disabled_i=0;
  for (int Mi=0; Mi < matrixData.max_matrices; Mi++) {
    if (matrixData.matrix_switch_enabled[0][Mi]==1) {matrixData.matrix_enabled_i++;} else {matrixData.matrix_disabled_i++;}
  }
}

void CountMatrixActive(){
  matrixData.matrix_active_i=0;
  matrixData.matrix_inactive_i=0;
  for (int Mi=0; Mi < matrixData.max_matrices; Mi++) {
    if (matrixData.matrix_switch_state[0][Mi]==1) {matrixData.matrix_active_i++;} else {matrixData.matrix_inactive_i++;}}
}

void MatrixStatsCounter() {
  CountMatrixEnabled();
  CountMatrixActive();
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                    ZERO MATRIX
// ------------------------------------------------------------------------------------------------------------------------------ 
// zero all user programmable matrix logic 
// ------------------------------------------------------------------------------------------------------------------------------ 

void zero_matrix() {
  Serial.println("[matrix] setting all matrix values to zero.");
  // -------------------------------
  // iterate over each matrix matrix
  // -------------------------------
  for (int Mi=0; Mi < matrixData.max_matrices; Mi++) {
    matrixData.matrix_switch_enabled[0][Mi]=0;
    for (int Fi=0; Fi < matrixData.max_matrix_functions; Fi++) {
      // ---------------------------
      // clear function names
      // ---------------------------
      memset(matrixData.matrix_function[Mi][Fi], 0, 56);
      strcpy(matrixData.matrix_function[Mi][Fi], "None");
      // ---------------------------
      // clear function values
      // ---------------------------
      matrixData.matrix_function_xyz[Mi][Fi][0]=0.0;
      matrixData.matrix_function_xyz[Mi][Fi][1]=0.0;
      matrixData.matrix_function_xyz[Mi][Fi][2]=0.0;
      // ---------------------------
      // clear port maps
      // ---------------------------
      matrixData.matrix_port_map[0][Mi]=-1;
      matrixData.tmp_matrix_port_map[0][Mi]=-1;
      // -------------------------------------------------------
      // clear inverted logic (default is standard not inverted)
      // -------------------------------------------------------
      matrixData.matrix_switch_inverted_logic[Mi][Fi]=false;
      // ---------------------------
      // clear timers
      // ---------------------------
      matrixData.matrix_timers[0][Mi]=0.0;
      // ---------------------------
      // clear enabled
      // ---------------------------
      matrixData.matrix_switch_enabled[0][Mi]=false;
      // ---------------------------
      // clear states
      // ---------------------------
      matrixData.matrix_switch_state[0][Mi]=false;
      matrixData.tmp_matrix_switch_state[0][Mi]=false;
    }
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                        MATRIX SWITCH FUNCTIONS
// ------------------------------------------------------------------------------------------------------------------------------

void setAllMatrixSwitchesEnabledFalse() {
  for (int i=0; i<matrixData.max_matrices; i++) {matrixData.matrix_switch_enabled[0][i]=false;}
}

void setAllMatrixSwitchesStateFalse() {
  for (int i=0; i<matrixData.max_matrices; i++) {matrixData.matrix_switch_state[0][i]=false;}
}

void setAllMatrixSwitchesEnabledTrue() {
  for (int i=0; i<matrixData.max_matrices; i++) {matrixData.matrix_switch_enabled[0][i]=true;}
}

void setAllMatrixSwitchesStateTrue() {
  for (int i=0; i<matrixData.max_matrices; i++) {matrixData.matrix_switch_state[0][i]=true;}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                     INPUT DATA
// ------------------------------------------------------------------------------------------------------------------------------

void inputChar(char * data) {
  // -----------------------------------------------------------------
  // auto: automatic input
  // -----------------------------------------------------------------
  if ((strcmp(data, ".")==0) && (strlen(input_data)==0)) {if (allow_input_data==true) {
    // copy real x into matrix x
    if (enter_digits_key==2) {
      memset(input_data, 0, sizeof(input_data));
      strcpy(input_data, getRelatedX(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]).c_str());
      }
    // copy real y into matrix y
    if (enter_digits_key==3) {
      memset(input_data, 0, sizeof(input_data));
      strcpy(input_data, getRelatedY(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]).c_str());
      }
    }
  }
  // -----------------------------------------------------------------
  // allow signing as first char regardless of how large the number is
  // -----------------------------------------------------------------
  else if ((strcmp(data, "-")==0) && (strlen(input_data)==0)) {if (allow_input_data==true) {strcat(input_data, data);}}
  else {
    // ---------------------------
    // port
    // ---------------------------
    if (enter_digits_key==1) {
      if (allow_input_data==true) {
        // ----------------------------------------
        // create temporary data to concat and test
        // ----------------------------------------
        memset(tmp_input_data, 0, sizeof(tmp_input_data));
        strcpy(tmp_input_data, input_data);
        strcat(tmp_input_data, data);
        // ----------------------------------------
        // test range
        // ----------------------------------------
        if ((atoi(tmp_input_data) <= 99) && (atoi(tmp_input_data) >= -1)) {
          memset(input_data, 0, sizeof(input_data));
          strcpy(input_data, tmp_input_data);
        }
      }
    }
    // ---------------------------
    // <= long
    // ---------------------------
    else if ((enter_digits_key==2) || (enter_digits_key==3) || (enter_digits_key==4) || (enter_digits_key==5)) {
      if (allow_input_data==true) {
        // ----------------------------------------
        // create temporary data to concat and test
        // ----------------------------------------
        memset(tmp_input_data, 0, sizeof(tmp_input_data));
        strcpy(tmp_input_data, input_data);
        strcat(tmp_input_data, data);
        // ----------------------------------------
        // test range
        // ----------------------------------------
        if ((atol(tmp_input_data) <= 179769313486232) && (atol(tmp_input_data) >= -179769313486232)) {
          memset(input_data, 0, sizeof(input_data));
          strcpy(input_data, tmp_input_data);
        }
      }
    }
    // ---------------------------
    // meteor
    // ---------------------------
    else if (enter_digits_key==6) {
      if (allow_input_data==true) {
        // ----------------------------------------
        // create temporary data to concat and test
        // ----------------------------------------
        memset(tmp_input_data, 0, sizeof(tmp_input_data));
        strcpy(tmp_input_data, input_data);
        strcat(tmp_input_data, data);
        // ----------------------------------------
        // test range
        // ----------------------------------------
        if (atoi(tmp_input_data)>=0 && atoi(tmp_input_data)<max_meteor_showers) {
          memset(input_data, 0, sizeof(input_data));
          strcpy(input_data, tmp_input_data);
        }
      }
    }
    // ---------------------------
    // volcano
    // ---------------------------
    else if (enter_digits_key==7) {
      if (allow_input_data==true) {
        // ----------------------------------------
        // create temporary data to concat and test
        // ----------------------------------------
        memset(tmp_input_data, 0, sizeof(tmp_input_data));
        strcpy(tmp_input_data, input_data);
        strcat(tmp_input_data, data);
        // ----------------------------------------
        // test range
        // ----------------------------------------
        if (atoi(tmp_input_data)>=0 && atoi(tmp_input_data)<max_volcanos) {
          memset(input_data, 0, sizeof(input_data));
          strcpy(input_data, tmp_input_data);
        }
      }
    }
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                        MENU UP
// ------------------------------------------------------------------------------------------------------------------------------

void menuUp() {
  if (menu_page==page_main_menu) {menuMain.up();}
  else if (menu_page==page_matrix_logic_main) {
    if (menu_column_selection==0) {menuMatrixSwitchSelect.up();}
    if (menu_column_selection==1) {}
    if (menu_column_selection==2) {}
    if (menu_column_selection==4) {menuMatrixFunctionSelect.up();}
  }
  else if (menu_page==page_input_data) {
    if (enter_digits_key==6) {meteor_index_key--; if (meteor_index_key<0) {meteor_index_key=max_meteor_showers-1;}}
    if (enter_digits_key==7) {volcano_index_key--; if (volcano_index_key<0) {volcano_index_key=max_volcanos-1;}}
  }
  else if (menu_page==page_matrix_logic_select_setup) {menuMatrixConfigureFunction.up();}
  else if (menu_page==page_matrix_logic_setup_function) {menuMatrixSetFunctionName.up();}
  else if (menu_page==page_file_main) {menuFile.up();}
  else if (menu_page==page_file_save_matrix) {menuMatrixFilepath.up();}
  else if (menu_page==page_file_load_matrix) {menuMatrixFilepath.up();}
  else if (menu_page==page_file_delete_matrix) {menuMatrixFilepath.up();}
  else if (menu_page==page_gps_main) {menuGPS.up();}
  else if (menu_page==page_serial_main) {menuSerial.up();}
  else if (menu_page==page_universe_main) {menuUniverse.up();}
  else if (menu_page==page_display_main) {menuDisplay.up();}
  else if (menu_page==page_system_main) {menuSystem.up();}
  else if (menu_page==page_timeanddate_main) {menuTimeAndDate.up();}
  else if (menu_page==page_CD74HC4067_main) {menuCD74HC4067.up();}
  else if (menu_page==page_TCA9548A_main) {menuTCA9548A.up();}
  else if (menu_page==page_indicators) {menuIndicators.up();}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      MENU DOWN
// ------------------------------------------------------------------------------------------------------------------------------

void menuDown() {
  if (menu_page==page_main_menu) {menuMain.down();}
  else if (menu_page==page_matrix_logic_main) {
    if (menu_column_selection==0) {menuMatrixSwitchSelect.down();}
    if (menu_column_selection==1) {}
    if (menu_column_selection==2) {}
    if (menu_column_selection==4) {menuMatrixFunctionSelect.down();}
  }
  else if (menu_page==page_input_data) {
    if (enter_digits_key==6) {meteor_index_key++; if (meteor_index_key>=max_meteor_showers) {meteor_index_key=0;}}
    if (enter_digits_key==7) {volcano_index_key++; if (volcano_index_key>=max_volcanos) {volcano_index_key=0;}}
  }
  else if (menu_page==page_matrix_logic_select_setup) {menuMatrixConfigureFunction.down();}
  else if (menu_page==page_matrix_logic_setup_function) {menuMatrixSetFunctionName.down();}
  else if (menu_page==page_file_main) {menuFile.down();}
  else if (menu_page==page_file_save_matrix) {menuMatrixFilepath.down();}
  else if (menu_page==page_file_load_matrix) {menuMatrixFilepath.down();}
  else if (menu_page==page_file_delete_matrix) {menuMatrixFilepath.down();}
  else if (menu_page==page_gps_main) {menuGPS.down();}
  else if (menu_page==page_serial_main) {menuSerial.down();}
  else if (menu_page==page_universe_main) {menuUniverse.down();}
  else if (menu_page==page_display_main) {menuDisplay.down();}
  else if (menu_page==page_system_main) {menuSystem.down();}
  else if (menu_page==page_timeanddate_main) {menuTimeAndDate.down();}
  else if (menu_page==page_CD74HC4067_main) {menuCD74HC4067.down();}
  else if (menu_page==page_TCA9548A_main) {menuTCA9548A.down();}
  else if (menu_page==page_indicators) {menuIndicators.down();}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                     MENU RIGHT
// ------------------------------------------------------------------------------------------------------------------------------

void menuRight() {
  if (menu_page==page_home) {astroclock_key++; if (astroclock_key>max_astroclock_key) {astroclock_key=0;};}
  else if (menu_page==page_main_menu) {}
  else if (menu_page==page_matrix_logic_main) {menu_column_selection++; if (menu_column_selection>4) {menu_column_selection=0;}}
  // debug("[menu_column_selection] " + String(menu_column_selection));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      MENU LEFT
// ------------------------------------------------------------------------------------------------------------------------------

void menuLeft() {
  if (menu_page==page_home) {astroclock_key--; if (astroclock_key<0) {astroclock_key=max_astroclock_key;};}
  else if (menu_page==page_main_menu) {}
  else if (menu_page==page_matrix_logic_main) {menu_column_selection--; if (menu_column_selection<0) {menu_column_selection=4;}}
  // debug("[menu_column_selection] " + String(menu_column_selection));
}
// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      MENU BACK
// ------------------------------------------------------------------------------------------------------------------------------

void menuBack() {
  // ---------------------------------------------------------------
  /* specify explicity which page to go from each given page */
  // ---------------------------------------------------------------
  if (menu_page==page_home) {astroclock_key=0;}
  else if (menu_page==page_main_menu) {menu_page=page_home;}
  else if (menu_page==page_matrix_logic_main) {menu_page=page_main_menu;}
  // ---------------------------------------------------------------
  // ENTER DIGITS
  // ---------------------------------------------------------------
  else if (menu_page==page_input_data) {
    // -------------------------------------------------------------
    // enter port
    // -------------------------------------------------------------
    if (enter_digits_key==1) {menu_page=page_matrix_logic_main;}
    // -------------------------------------------------------------
    // enter function x, enter function y, enter function z
    // -------------------------------------------------------------
    else if ((enter_digits_key==2) || (enter_digits_key==3) || (enter_digits_key==4)) {menu_page=page_matrix_logic_select_setup;}
    // -------------------------------------------------------------
    // enter utc offset seconds
    // -------------------------------------------------------------
    else if (enter_digits_key==5) {menu_page=page_timeanddate_main;}
    // -------------------------------------------------------------
    // enter meteor key
    // -------------------------------------------------------------
    else if (enter_digits_key==6) {menu_page=page_main_menu;}
    // -------------------------------------------------------------
    // enter volcano key
    // -------------------------------------------------------------
    else if (enter_digits_key==7) {menu_page=page_main_menu;}
  }
  else if (menu_page==page_matrix_logic_select_setup) {menu_page=page_matrix_logic_main;}
  else if (menu_page==page_matrix_logic_setup_function) {menu_page=page_matrix_logic_select_setup;}
  else if (menu_page==page_overview_matrix_switching) {menu_page=page_main_menu;}
  else if (menu_page==page_file_main) {menu_page=page_main_menu;}
  else if (menu_page==page_file_save_matrix) {menu_page=page_file_main;}
  else if (menu_page==page_file_load_matrix) {menu_page=page_file_main;}
  else if (menu_page==page_file_delete_matrix) {menu_page=page_file_main;}
  else if (menu_page==page_gps_main) {menu_page=page_main_menu;}
  else if (menu_page==page_serial_main) {menu_page=page_main_menu;}
  else if (menu_page==page_universe_main) {menu_page=page_main_menu;}
  else if (menu_page==page_display_main) {menu_page=page_main_menu;}
  else if (menu_page==page_system_main) {menu_page=page_main_menu;}
  else if (menu_page==page_CD74HC4067_main) {menu_page=page_main_menu;}
  else if (menu_page==page_TCA9548A_main) {menu_page=page_main_menu;}
  else if (menu_page==page_timeanddate_main) {menu_page=page_main_menu;}
  else if (menu_page==page_gps_view_gngga) {menu_page=page_gps_main;}
  else if (menu_page==page_gps_view_gnrmc) {menu_page=page_gps_main;}
  else if (menu_page==page_gps_view_gpatt) {menu_page=page_gps_main;}
  else if (menu_page==page_gps_view_satio) {menu_page=page_gps_main;}
  else if (menu_page==page_universe_view_sun) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_moon) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_mercury) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_venus) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_mars) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_jupiter) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_saturn) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_uranus) {menu_page=page_universe_main;}
  else if (menu_page==page_universe_view_neptune) {menu_page=page_universe_main;}
  else if (menu_page==page_attitude) {menu_page=page_main_menu;}
  else if (menu_page==page_view_magnetic_field) {menu_page=page_main_menu;}
  else if (menu_page==page_indicators) {menu_page=page_main_menu;}
}

void saveSystemHandleUI(int return_page) {
  Serial.println("[saveSystemHandleUI]");
  // --------------------------------------------
  // DISPLAY
  // --------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // ------------------------------------------
    // go to
    // ------------------------------------------
    WaitToUpdateUI();
    menu_page=page_save_system_config_indicator;
    UIIndicators();
    // ------------------------------------------
    // end spi device
    // ------------------------------------------
    endSPIDevice(SSD1351_CS);
  }
  // --------------------------------------------
  // SDCARD
  // --------------------------------------------
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  sdcardSaveSystemConfig(sdcardData.sysconf);
  sd.end();
  endSPIDevice(SD_CS);
  // --------------------------------------------
  // DISPLAY
  // --------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    wait_1S_to_update_ui=true;
    // ------------------------------------------
    // begin spi device
    // ------------------------------------------
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS); 
    display.begin();
    // --------------------------------------------
    // go to
    // --------------------------------------------
    menu_page=return_page;
  }
}

void restoreSystemDefaultsHandleUI(int return_page) {
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // --------------------------------------------
    // go to
    // --------------------------------------------
    WaitToUpdateUI();
    menu_page=page_restore_default_matrix_indicator;
    UIIndicators();
    // --------------------------------------------
    // end spi device
    // --------------------------------------------
    endSPIDevice(SSD1351_CS);
  }
  // ----------------------------------------------
  // SDCARD
  // ----------------------------------------------
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  // ToDo: restore defaults
  sd.end();
  endSPIDevice(SD_CS);
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    wait_1S_to_update_ui=true;
    // --------------------------------------------
    // begin spi device
    // --------------------------------------------
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS);
    display.begin();
    // --------------------------------------------
    // go to
    // --------------------------------------------
    menu_page=return_page;
  }
}

void createMatrixMenuFileName() {
  // ----------------------------------------------
  // generate filename according to selection index
  // ----------------------------------------------
  memset(sdcardData.newfilename, 0, sizeof(sdcardData.newfilename));
  strcpy(sdcardData.newfilename, "/MATRIX/M_");
  memset(sdcardData.tmp, 0, sizeof(sdcardData.tmp));
  itoa(menuMatrixFilepath.selection(), sdcardData.tmp, 10);
  strcat(sdcardData.newfilename, sdcardData.tmp);
  strcat(sdcardData.newfilename, ".SAVE");
}

void createMatrixFileNameN(int n) {
  // ----------------------------------------------
  // generate filename according to arg
  // ----------------------------------------------
  memset(sdcardData.newfilename, 0, sizeof(sdcardData.newfilename));
  strcpy(sdcardData.newfilename, "/MATRIX/M_");
  memset(sdcardData.tmp, 0, sizeof(sdcardData.tmp));
  itoa(n, sdcardData.tmp, 10);
  strcat(sdcardData.newfilename, sdcardData.tmp);
  strcat(sdcardData.newfilename, ".SAVE");
}

void goToIndicatorPage(int p) {
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // --------------------------------------------
    // go to
    // --------------------------------------------
    WaitToUpdateUI();
    menu_page=p;
    UIIndicators();
    // --------------------------------------------
    // end spi device
    // --------------------------------------------
    endSPIDevice(SSD1351_CS);
  }
}

void leaveIndicatorPage(int return_page) {
  // ------------------------------------------------
  // DISPLAY
  // ------------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // ----------------------------------------------
    // begin spi device
    // ----------------------------------------------
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS); 
    display.begin();
    // ----------------------------------------------
    // go to
    // ----------------------------------------------
    menu_page=return_page;
  }
}

void saveMatrixHandleUI(int return_page) {
  // ----------------------------------------------
  // Indicator On
  // ----------------------------------------------
  WaitToUpdateUI();
  goToIndicatorPage(page_save_matrix_file_indicator);
  // ----------------------------------------------
  // SDCARD
  // ----------------------------------------------
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  sdcardSaveMatrix(sdcardData.newfilename);
  sd.end();
  endSPIDevice(SD_CS);
  // ----------------------------------------------
  // Indicator Off
  // ----------------------------------------------
  leaveIndicatorPage(return_page);
}

void loadMatrixHandleUI(int return_page) {
  // ------------------------------------------------
  // handle empty slots
  // ------------------------------------------------
  if (!strcmp(sdcardData.matrix_filenames[menuMatrixFilepath.selection()], "EMPTY")==0) {
    // ----------------------------------------------
    // Indicator On
    // ----------------------------------------------
    WaitToUpdateUI();
    goToIndicatorPage(page_load_matrix_file_indicator);
    // ----------------------------------------------
    // SDCARD
    // ----------------------------------------------
    beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
    sdcardLoadMatrix(sdcardData.newfilename);
    sd.end();
    endSPIDevice(SD_CS);
    // ----------------------------------------------
    // Indicator Off
    // ----------------------------------------------
    leaveIndicatorPage(return_page);
  }
}

void deleteMatrixHandleUI(int return_page) {
  // ------------------------------------------------
  // handle empty slots
  // ------------------------------------------------
  if (!strcmp(sdcardData.matrix_filenames[menuMatrixFilepath.selection()], "EMPTY")==0) {
    // ----------------------------------------------
    // Indicator On
    // ----------------------------------------------
    WaitToUpdateUI();
    goToIndicatorPage(page_delete_matrix_file_indicator);
    // ----------------------------------------------
    // SDCARD
    // ----------------------------------------------
    beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
    sdcardDeleteMatrix(sdcardData.newfilename);
    sd.end();
    endSPIDevice(SD_CS);
    // ----------------------------------------------
    // Indicator Off
    // ----------------------------------------------
    leaveIndicatorPage(return_page);
  }
}

void listMatrixFilesHandleUI(int return_page) {
  // ----------------------------------------------
  // wait for ui task to complete before suspension
  // ----------------------------------------------
  WaitToUpdateUI();
  vTaskSuspend(UpdateUITask);
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // --------------------------------------------
    // end spi device
    // --------------------------------------------
    endSPIDevice(SSD1351_CS);
  }
  // ----------------------------------------------
  // SDCARD
  // ----------------------------------------------
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  sdcardCreateMatrixFileSlotList();
  sd.end();
  endSPIDevice(SD_CS);
  // ----------------------------------------------
  // DISPLAY
  // ----------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    // --------------------------------------------
    // begin spi device
    // --------------------------------------------
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS);
    display.begin();
    // --------------------------------------------
    // go to
    // --------------------------------------------
    WaitToUpdateUI();
    menu_page=return_page;
  }
   vTaskResume(UpdateUITask);
}

void setMatrixDefault() {
  // ----------------------------------------------
  // set states
  // ----------------------------------------------
  setAllMatrixSwitchesEnabledTrue();
  setAllMatrixSwitchesStateFalse();
  // ----------------------------------------------
  // write states
  // ----------------------------------------------
  writePortControllerSwitchState();
  // ----------------------------------------------
  // zero matrix
  // ----------------------------------------------
  zero_matrix();
  // ----------------------------------------------
  // update filename and file path
  // ----------------------------------------------
  memset(sdcardData.matrix_filepath, 0, sizeof(sdcardData.matrix_filepath));
  memset(sdcardData.matrix_filename, 0, sizeof(sdcardData.matrix_filename));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                     MENU ENTER
// ------------------------------------------------------------------------------------------------------------------------------

void menuEnter() {

  // ----------------------------------------------------------------
  // home page
  // ----------------------------------------------------------------
  if (menu_page==page_home) {
    // ------------------------------------------------
    // go to main menu
    // ------------------------------------------------
    if      (astroclock_key==0) {menu_page=page_main_menu;}
    else if (astroclock_key==1) {menu_page=page_universe_view_sun;}
    else if (astroclock_key==2) {menu_page=page_universe_view_mercury;}
    else if (astroclock_key==3) {menu_page=page_universe_view_venus;}
    // else if (astroclock_key==4) {menu_page=page_universe_view_earth;}
    else if (astroclock_key==5) {menu_page=page_universe_view_moon;}
    else if (astroclock_key==6) {menu_page=page_universe_view_mars;}
    else if (astroclock_key==7) {menu_page=page_universe_view_jupiter;}
    else if (astroclock_key==8) {menu_page=page_universe_view_saturn;}
    else if (astroclock_key==9) {menu_page=page_universe_view_uranus;}
    else if (astroclock_key==10) {menu_page=page_universe_view_neptune;}
  }

  // ----------------------------------------------------------------
  // main menu page
  // ----------------------------------------------------------------
  else if (menu_page==page_main_menu) {
    // ------------------------------------------------
    // go to matrix menu
    // ------------------------------------------------
    if (menuMain.selection()==0) {
      menu_page=page_matrix_logic_main;
    }
    // ------------------------------------------------
    // go to matrix menu
    // ------------------------------------------------
    if (menuMain.selection()==1) {
      menu_page=page_overview_matrix_switching;
    }
    // ------------------------------------------------
    // go to file menu
    // ------------------------------------------------
    else if (menuMain.selection()==2) {
      menu_page=page_file_main;
    }
    // ------------------------------------------------
    // go to gps menu
    // ------------------------------------------------
    else if (menuMain.selection()==3) {
      menu_page=page_gps_main;
    }
    // ------------------------------------------------
    // go to serial menu
    // ------------------------------------------------
    else if (menuMain.selection()==4) {
      menu_page=page_serial_main;
    }
    // ------------------------------------------------
    // go to system menu
    // ------------------------------------------------
    else if (menuMain.selection()==5) {
      menu_page=page_system_main;
    }
    // ------------------------------------------------
    // go to universe menu
    // ------------------------------------------------
    else if (menuMain.selection()==6) {
      menu_page=page_universe_main;
    }
    // ------------------------------------------------
    // go to display menu
    // ------------------------------------------------
    else if (menuMain.selection()==7) {
      menu_page=page_display_main;
    }
    // ------------------------------------------------
    // go to CD74HC4067 menu
    // ------------------------------------------------
    else if (menuMain.selection()==8) {
      menu_page=page_CD74HC4067_main;
    }
    // ------------------------------------------------
    // go to TCA9548A menu
    // ------------------------------------------------
    else if (menuMain.selection()==9) {
      menu_page=page_TCA9548A_main;
    }
    // ------------------------------------------------
    // go to time and date menu
    // ------------------------------------------------
    else if (menuMain.selection()==10) {
      menu_page=page_timeanddate_main;
    }
    // ------------------------------------------------
    // go to attitude page
    // ------------------------------------------------
    else if (menuMain.selection()==11) {
      menu_page=page_attitude;
    }
    // ------------------------------------------------
    // go to view magnetic field page
    // ------------------------------------------------
    else if (menuMain.selection()==12) {
      menu_page=page_view_magnetic_field;
    }
    // ------------------------------------------------
    // go to matrix indicators page
    // ------------------------------------------------
    else if (menuMain.selection()==13) {
      menu_page=page_indicators;
    }
    // ------------------------------------------------
    // go to meteors page
    // ------------------------------------------------
    else if (menuMain.selection()==14) {
      allow_input_data=true;
      enter_digits_key=6;
      menu_page=page_input_data;
    }
    // ------------------------------------------------
    // go to volcano page
    // ------------------------------------------------
    else if (menuMain.selection()==15) {
      allow_input_data=true;
      enter_digits_key=7;
      menu_page=page_input_data;
    }
  }
  // ----------------------------------------------------------------
  // matrix switch configuration page
  // ----------------------------------------------------------------
  else if (menu_page==page_matrix_logic_main) {
    // ------------------------------------------------
    // go to set port page
    // ------------------------------------------------
    if (menu_column_selection==1) {
      memset(input_data, 0, sizeof(input_data));
      allow_input_data=true;
      enter_digits_key=1;
      menu_page=page_input_data;
    }
    // ------------------------------------------------
    // enable/disable matrix switch (& turn switch off)
    // ------------------------------------------------
    else if (menu_column_selection==2) {
      matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]^=true;
      matrixData.matrix_switch_state[0][menuMatrixSwitchSelect.selection()]=false;
    }
    // ------------------------------------------------
    // toggle standard/inverted function logic
    // ------------------------------------------------
    else if (menu_column_selection==3) {
      matrixData.matrix_switch_inverted_logic[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]^=true;
    }
    // ------------------------------------------------
    // go to function name selection
    // ------------------------------------------------
    else if (menu_column_selection==4) {
      menu_page=page_matrix_logic_select_setup;
    }
  }

  // ----------------------------------------------------------------
  // set digits page
  // ----------------------------------------------------------------
  else if (menu_page==page_input_data) {
    // Serial.println("[input_data] " + String(input_data, 10));
    if (enter_digits_key==1) {allow_input_data=false; matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]=atoi(input_data); enter_digits_key=-1; menu_page=page_matrix_logic_main;}
    else if (enter_digits_key==2) {allow_input_data=false; matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][0]=strtod(input_data, NULL); enter_digits_key=-1; menu_page=page_matrix_logic_select_setup;}
    else if (enter_digits_key==3) {allow_input_data=false; matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][1]=strtod(input_data, NULL); enter_digits_key=-1; menu_page=page_matrix_logic_select_setup;}
    else if (enter_digits_key==4) {allow_input_data=false; matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][2]=strtod(input_data, NULL); enter_digits_key=-1; menu_page=page_matrix_logic_select_setup;}
    else if (enter_digits_key==5) {allow_input_data=false; satData.utc_second_offset=atol(input_data); enter_digits_key=-1; menu_page=page_timeanddate_main;}
    else if (enter_digits_key==6) {allow_input_data=true; meteor_index_key=atoi(input_data); memset(input_data, 0, sizeof(input_data));}
    else if (enter_digits_key==7) {allow_input_data=true; volcano_index_key=atoi(input_data); memset(input_data, 0, sizeof(input_data));}
    // Serial.println("[matrix x] " + String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][0], 10));
  }

  // ----------------------------------------------------------------
  // matrix switch select function name, x, y, or z page
  // ----------------------------------------------------------------
  else if (menu_page==page_matrix_logic_select_setup) {
    if (menuMatrixConfigureFunction.selection()==0) {menu_page=page_matrix_logic_setup_function;}
    // ------------------------------------------------
    // go to set function value x page
    // ------------------------------------------------
    if (menuMatrixConfigureFunction.selection()==1) {
      memset(input_data, 0, sizeof(input_data));
      allow_input_data=true;
      enter_digits_key=2;
      menu_page=page_input_data;
    }
    // ------------------------------------------------
    // go to set function value y page
    // ------------------------------------------------
    else if (menuMatrixConfigureFunction.selection()==2) {
      memset(input_data, 0, sizeof(input_data));
      allow_input_data=true;
      enter_digits_key=3;
      menu_page=page_input_data;
    }
    // ------------------------------------------------
    // go to set function value z page
    // ------------------------------------------------
    else if (menuMatrixConfigureFunction.selection()==3) {
      memset(input_data, 0, sizeof(input_data));
      allow_input_data=true;
      enter_digits_key=4;
      menu_page=page_input_data;
    }
    // ------------------------------------------------
    // set expression
    // ------------------------------------------------
    else if (menuMatrixConfigureFunction.selection()==4) {
      // ------------------------------------------------
      // iterate over expression
      // ------------------------------------------------
      matrixData.matrix_switch_expression_index[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]++;
      if (matrixData.matrix_switch_expression_index[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()] > 4) {
        matrixData.matrix_switch_expression_index[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]=0;
      }
      // ------------------------------------------------
      // put current str in temp
      // ------------------------------------------------
      memset(matrixData.temp, 0, sizeof(matrixData.temp));
      strcpy(matrixData.temp, matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]);
      // ------------------------------------------------
      // remove expression
      // ------------------------------------------------
      matrixData.tempStr=String(matrixData.temp);
      matrixData.tempStr.replace("Under", "");
      matrixData.tempStr.replace("Over", "");
      matrixData.tempStr.replace("Equal", "");
      matrixData.tempStr.replace("Range", "");
      // ------------------------------------------------
      // concatinate base function name with expression
      // ------------------------------------------------
      matrixData.tempStr=matrixData.tempStr + matrixData.expression[matrixData.matrix_switch_expression_index[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]];
      // ------------------------------------------------
      // copy new name into matrix
      // ------------------------------------------------
      memset(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], 0, sizeof(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]));
      strcpy(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], matrixData.tempStr.c_str());
    }
  }

  // ----------------------------------------------------------------
  // matrix switch set function name page
  // ----------------------------------------------------------------
  else if (menu_page==page_matrix_logic_setup_function) {
    memset(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], 0, sizeof(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]));
    strcpy(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], matrixData.matrix_function_names[menuMatrixSetFunctionName.selection()]);
    menu_page=page_matrix_logic_select_setup;
  }

  // ----------------------------------------------------------------
  // file menu page
  // ----------------------------------------------------------------
  else if (menu_page==page_file_main) {

    // ------------------------------------------------
    // new matrix
    // ------------------------------------------------
    if (menuFile.selection()==0) {
      setMatrixDefault();
    }

    // ------------------------------------------------
    // goto save matrix page
    // ------------------------------------------------
    else if (menuFile.selection()==1) {
      listMatrixFilesHandleUI(page_file_save_matrix);
    }

    // ------------------------------------------------
    // goto load matrix page
    // ------------------------------------------------
    else if (menuFile.selection()==2) {
      listMatrixFilesHandleUI(page_file_load_matrix);
    }

    // ------------------------------------------------
    // goto delete matrix page
    // ------------------------------------------------
    else if (menuFile.selection()==3) {
      listMatrixFilesHandleUI(page_file_delete_matrix);
    }

    // ----------------------------------------------
    // save system settings
    // ----------------------------------------------
    else if (menuFile.selection()==4) {
      saveSystemHandleUI(page_file_main);
    }

    // ------------------------------------------------
    // restore default system settings
    // ------------------------------------------------
    else if (menuFile.selection()==5) {
      restoreSystemDefaultsHandleUI(page_file_main);
    }
  }

  // ------------------------------------------------
  // save matrix menu page
  // ------------------------------------------------
  else if (menu_page==page_file_save_matrix) {
    createMatrixMenuFileName();
    saveMatrixHandleUI(page_file_save_matrix);
  }

  // --------------------------------------------------
  // load matrix menu page
  // --------------------------------------------------
  else if (menu_page==page_file_load_matrix) {
    setMatrixDefault();
    createMatrixMenuFileName();
    loadMatrixHandleUI(page_file_load_matrix);
  }

  // --------------------------------------------------
  // delete matrix menu page
  // --------------------------------------------------
  else if (menu_page==page_file_delete_matrix) {
    setMatrixDefault();
    createMatrixMenuFileName();
    deleteMatrixHandleUI(page_file_delete_matrix);
  }

  // ----------------------------------------------------------------
  // gps page
  // ----------------------------------------------------------------
  else if (menu_page==page_gps_main) {
    if (menuGPS.selection()==0) {systemData.satio_enabled^=true;}
    else if (menuGPS.selection()==1) {systemData.gngga_enabled^=true;}
    else if (menuGPS.selection()==2) {systemData.gnrmc_enabled^=true;}
    else if (menuGPS.selection()==3) {systemData.gpatt_enabled^=true;}
    else if (menuGPS.selection()==4) {
      if (strcmp(satData.coordinate_conversion_mode, "GNGGA")==0) {
        memset(satData.coordinate_conversion_mode, 0, sizeof(satData.coordinate_conversion_mode));
        strcpy(satData.coordinate_conversion_mode, "GNRMC");
      }
      else if (strcmp(satData.coordinate_conversion_mode, "GNRMC")==0) {
        memset(satData.coordinate_conversion_mode, 0, sizeof(satData.coordinate_conversion_mode));
        strcpy(satData.coordinate_conversion_mode, "GNGGA");
      }
    }
    else if (menuGPS.selection()==5) {menu_page=page_gps_view_gngga;}
    else if (menuGPS.selection()==6) {menu_page=page_gps_view_gnrmc;}
    else if (menuGPS.selection()==7) {menu_page=page_gps_view_gpatt;}
    else if (menuGPS.selection()==8) {menu_page=page_gps_view_satio;}
  }

  // ----------------------------------------------------------------
  // serial page
  // ----------------------------------------------------------------
  else if (menu_page==page_serial_main) {
    if (menuSerial.selection()==0) {systemData.output_satio_enabled^=true;}
    else if (menuSerial.selection()==1) {systemData.output_gngga_enabled^=true;}
    else if (menuSerial.selection()==2) {systemData.output_gnrmc_enabled^=true;}
    else if (menuSerial.selection()==3) {systemData.output_gpatt_enabled^=true;}
    else if (menuSerial.selection()==4) {systemData.output_matrix_enabled^=true;}
    else if (menuSerial.selection()==5) {systemData.output_sensors_enabled^=true;}
    else if (menuSerial.selection()==6) {systemData.output_sun_enabled^=true;}
    else if (menuSerial.selection()==7) {systemData.output_moon_enabled^=true;}
    else if (menuSerial.selection()==8) {systemData.output_mercury_enabled^=true;}
    else if (menuSerial.selection()==9) {systemData.output_venus_enabled^=true;}
    else if (menuSerial.selection()==10) {systemData.output_mars_enabled^=true;}
    else if (menuSerial.selection()==11) {systemData.output_jupiter_enabled^=true;}
    else if (menuSerial.selection()==12) {systemData.output_saturn_enabled^=true;}
    else if (menuSerial.selection()==13) {systemData.output_uranus_enabled^=true;}
    else if (menuSerial.selection()==14) {systemData.output_neptune_enabled^=true;}
    else if (menuSerial.selection()==15) {systemData.output_meteors_enabled^=true;}
  }

  // ----------------------------------------------------------------
  // universe page
  // ----------------------------------------------------------------
  else if (menu_page==page_universe_main) {
    if      (menuUniverse.selection()==0) {menu_page=page_universe_view_sun;}
    else if (menuUniverse.selection()==1) {menu_page=page_universe_view_moon;}
    else if (menuUniverse.selection()==2) {menu_page=page_universe_view_mercury;}
    else if (menuUniverse.selection()==3) {menu_page=page_universe_view_venus;}
    else if (menuUniverse.selection()==4) {menu_page=page_universe_view_mars;}
    else if (menuUniverse.selection()==5) {menu_page=page_universe_view_jupiter;}
    else if (menuUniverse.selection()==6) {menu_page=page_universe_view_saturn;}
    else if (menuUniverse.selection()==7) {menu_page=page_universe_view_uranus;}
    else if (menuUniverse.selection()==8) {menu_page=page_universe_view_neptune;}
    else if (menuUniverse.selection()==9) {systemData.sidereal_track_sun^=true;}
    else if (menuUniverse.selection()==10) {systemData.sidereal_track_mercury^=true;}
    else if (menuUniverse.selection()==11) {systemData.sidereal_track_moon^=true;}
    else if (menuUniverse.selection()==12) {systemData.sidereal_track_venus^=true;}
    else if (menuUniverse.selection()==13) {systemData.sidereal_track_mars^=true;}
    else if (menuUniverse.selection()==14) {systemData.sidereal_track_jupiter^=true;}
    else if (menuUniverse.selection()==15) {systemData.sidereal_track_saturn^=true;}
    else if (menuUniverse.selection()==16) {systemData.sidereal_track_uranus^=true;}
    else if (menuUniverse.selection()==17) {systemData.sidereal_track_neptune^=true;}
  }

  // ----------------------------------------------------------------
  // dispaly page
  // ----------------------------------------------------------------
  else if (menu_page==page_display_main) {
     // ------------------------------------------------
    // display auto off
    // ------------------------------------------------
    if (menuDisplay.selection()==0)  {systemData.display_auto_off^=true;}
    // ------------------------------------------------
    // iter display auto off timing
    // ------------------------------------------------
    if (menuDisplay.selection()==1)  {
      systemData.index_display_autooff_times++;
      if (systemData.index_display_autooff_times>systemData.max_display_autooff_times) {systemData.index_display_autooff_times=0;}
      systemData.display_timeout=systemData.display_autooff_times[systemData.index_display_autooff_times];
    }
    // ------------------------------------------------
    // iter display border color
    // ------------------------------------------------
    if (menuDisplay.selection()==2) {systemData.index_display_border_color++;
      if (systemData.index_display_border_color>systemData.max_color_index) {systemData.index_display_border_color=0;}
      systemData.color_border    =systemData.display_color[systemData.index_display_border_color];
      systemData.low_color_border=systemData.display_low_color[systemData.index_display_border_color];
    }
    // ------------------------------------------------
    // iter display border color
    // ------------------------------------------------
    if (menuDisplay.selection()==3) {systemData.index_display_content_color++;
      if (systemData.index_display_content_color>systemData.max_color_index) {systemData.index_display_content_color=0;}
      systemData.color_content    =systemData.display_color[systemData.index_display_content_color];
      systemData.low_color_content=systemData.display_low_color[systemData.index_display_content_color];
    }
    // ------------------------------------------------
    // iter display menu border color
    // ------------------------------------------------
    if (menuDisplay.selection()==4) {systemData.index_display_menu_border_color++;
      if (systemData.index_display_menu_border_color>systemData.max_color_index) {systemData.index_display_menu_border_color=0;}
      systemData.color_menu_border    =systemData.display_color[systemData.index_display_menu_border_color];
      systemData.low_color_menu_border=systemData.display_low_color[systemData.index_display_menu_border_color];
    }
    // ------------------------------------------------
    // iter display menu content color
    // ------------------------------------------------
    if (menuDisplay.selection()==5) {systemData.index_display_menu_content_color++;
      if (systemData.index_display_menu_content_color>systemData.max_color_index) {systemData.index_display_menu_content_color=0;}
      systemData.color_menu_content    =systemData.display_color[systemData.index_display_menu_content_color];
      systemData.low_color_menu_content=systemData.display_low_color[systemData.index_display_menu_content_color];
    }
    // ------------------------------------------------
    // iter display title color
    // ------------------------------------------------
    if (menuDisplay.selection()==6) {systemData.index_display_title_color++;
      if (systemData.index_display_title_color>systemData.max_color_index) {systemData.index_display_title_color=0;}
      systemData.color_title    =systemData.display_color[systemData.index_display_title_color];
      systemData.low_color_title=systemData.display_low_color[systemData.index_display_title_color];
    }
    // ------------------------------------------------
    // iter display subtitle color
    // ------------------------------------------------
    if (menuDisplay.selection()==7) {systemData.index_display_color_subtitle++;
      if (systemData.index_display_color_subtitle>systemData.max_color_index) {systemData.index_display_color_subtitle=0;}
      systemData.color_subtitle    =systemData.display_color[systemData.index_display_color_subtitle];
      systemData.low_color_subtitle=systemData.display_low_color[systemData.index_display_color_subtitle];
    }
    // ------------------------------------------------
    // iter home page feature
    // ------------------------------------------------
    if (menuDisplay.selection()==8) {systemData.index_home_page_feature++;
      if (systemData.index_home_page_feature>systemData.max_home_page_feature_index) {systemData.index_home_page_feature=0;}
    }
  }

  // ----------------------------------------------------------------
  // system page
  // ----------------------------------------------------------------
  else if (menu_page==page_system_main) {
    // ------------------------------------------------
    // startup run matrix
    // ------------------------------------------------
    if (menuSystem.selection()==0) {systemData.matrix_run_on_startup^=true;}
    // ------------------------------------------------
    // iter overload times
    // ------------------------------------------------
    else if (menuSystem.selection()==1) {systemData.index_overload_times++;
      if (systemData.index_overload_times>systemData.max_overload_times) {systemData.index_overload_times=0;}
      systemData.overload_max=systemData.overload_times[systemData.index_overload_times];
    }
    // ------------------------------------------------
    // enable/disable matrix switching
    // ------------------------------------------------
    else if (menuSystem.selection()==2) {systemData.matrix_enabled^=true;}
    // ------------------------------------------------
    // enable/disable port controller
    // ------------------------------------------------
    else if (menuSystem.selection()==3) {systemData.matrix_io_enabled^=true;}
    // ------------------------------------------------
    // enable/disable serial command
    // ------------------------------------------------
    else if (menuSystem.selection()==4) {systemData.serial_command^=true;}
    // ------------------------------------------------
    // enable/disable wt901
    // ------------------------------------------------
    else if (menuSystem.selection()==5) {systemData.wt901_enabled^=true;}
  }

  // ----------------------------------------------------------------
  // time and date page
  // ----------------------------------------------------------------
  else if (menu_page==page_timeanddate_main) {
    // ------------------------------------------------
    // go to enter offset value page
    // ------------------------------------------------
    if (menuTimeAndDate.selection()==0) {
      memset(input_data, 0, sizeof(input_data));
      allow_input_data=true;
      enter_digits_key=5;
      menu_page=page_input_data;
    }
    // ------------------------------------------------
    // enable/disable auto offset
    // ------------------------------------------------
    else if (menuTimeAndDate.selection()==1) {satData.utc_auto_offset_flag^=true;}
  }

  // ----------------------------------------------------------------
  // CD74HC4067 page
  // ----------------------------------------------------------------
  else if (menu_page==page_CD74HC4067_main) {
    // ------------------------------------------------
    // switch channel enabled/disabled
    // ------------------------------------------------
    if (menuCD74HC4067.selection() <= 15) {systemData.CD74HC4067_channel_enabled[menuCD74HC4067.selection()]^=true;}
    // ------------------------------------------------
    // switch enabled/disabled
    // ------------------------------------------------
    else if (menuCD74HC4067.selection()==16) {systemData.CD74HC4067_enabled^=true;}
  }

  // ----------------------------------------------------------------
  // TCA9548A page
  // ----------------------------------------------------------------
  else if (menu_page==page_TCA9548A_main) {
    // ------------------------------------------------
    // switch channel enabled/disabled
    // ------------------------------------------------
    if (menuTCA9548A.selection() <= 7) {systemData.TCA9548A_channel_enabled[menuTCA9548A.selection()]^=true;}
    // ------------------------------------------------
    // switch enabled/disabled
    // ------------------------------------------------
    else if (menuTCA9548A.selection()==8) {systemData.TCA9548A_enabled^=true;}
  }

  // ----------------------------------------------------------------
  // indicators page
  // ----------------------------------------------------------------
  else if (menu_page==page_indicators) {
    if (menuIndicators.selection() >= 0 && menuIndicators.selection() <=19) {
      matrixData.indicator_number=menuIndicators.selection();
      matrixData.matrix_indicator_colors[0][matrixData.indicator_number]++;
      if (matrixData.matrix_indicator_colors[0][matrixData.indicator_number]>matrixData.max_indicator_colors) {matrixData.matrix_indicator_colors[0][matrixData.indicator_number]=0;}
    }
  }

  // ----------------------------------------------------------------
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                FUNCTION NAMES MAPPED TO VALUES 
// ------------------------------------------------------------------------------------------------------------------------------

String getRelatedY(char * data) {
  /*
  returns y value for in ranges checks where x and y are different (not typically required for an in range check where range pertains to x alone).
  in ranges checks are square (check in square range) where z is square range. example x=lat, y=lon, z= squarerange=0.0000100=approx 1 meter in latitude.
  if inverted then in square range check becomes is out of square range check.
  */
  if (strcmp("DegLatLonRange", data)==0) {return String(satData.degrees_longitude, 10);}
  return String("");
}

String getRelatedZ(char * data) {
  return String("");
}

String getRelatedX(char * data) {
  // if (strcmp("None", data)==0) {return String();}
  // if (strcmp("Enabled", data)==0) {return String();}
  if (strcmp("Overload", data)==0) {return String(systemData.overload);}
  // if (strcmp("SwitchLink", data)==0) {return String();}
  // if (strcmp("MatrixTimer", data)==0) {return String();}
  if (strncmp(data, "LocalTime", strlen("LocalTime"))==0) {
    if (strcmp("LocalTimeOver", data)==0) {return String(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second));}
    else if (strcmp("LocalTimeUnder", data)==0) {return String(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second));}
    else if (strcmp("LocalTimeEqual", data)==0) {return String(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second));}
    else if (strcmp("LocalTimeRange", data)==0) {return String(hoursMinutesSecondsToInt(satData.local_hour, satData.local_minute, satData.local_second));}
  }
  else if (strncmp(data, "Day", strlen("Day"))==0) {
    if (strcmp("DaySunday", data)==0) {return String(satData.local_weekday);}
    else if (strcmp("DayMonday", data)==0) {return String(satData.local_weekday);}
    else if (strcmp("DayTuesday", data)==0) {return String(satData.local_weekday);}
    else if (strcmp("DayWednesday", data)==0) {return String(satData.local_weekday);}
    else if (strcmp("DayThursday", data)==0) {return String(satData.local_weekday);}
    else if (strcmp("DayFriday", data)==0) {return String(satData.local_weekday);}
    else if (strcmp("DaySaturday", data)==0) {return String(satData.local_weekday);}
  }
  else if (strncmp(data, "Date", strlen("Date"))==0) {
    if (strcmp("DateDayX", data)==0) {return String(satData.local_day);}
    else if (strcmp("DateMonthX", data)==0) {return String(satData.local_month);}
    else if (strcmp("DateYearX", data)==0) {return String(satData.local_year);}
  }
  else if (strncmp(data, "Deg", strlen("Deg"))==0) {
    if (strcmp("DegLatOver", data)==0) {return String(satData.degrees_latitude, 10);}
    else if (strcmp("DegLatUnder", data)==0) {return String(satData.degrees_latitude, 10);}
    else if (strcmp("DegLatEqual", data)==0) {return String(satData.degrees_latitude, 10);}
    else if (strcmp("DegLatRange", data)==0) {return String(satData.degrees_latitude, 10);}
    else if (strcmp("DegLonOver", data)==0) {return String(satData.degrees_longitude, 10);}
    else if (strcmp("DegLonUnder", data)==0) {return String(satData.degrees_longitude, 10);}
    else if (strcmp("DegLonEqual", data)==0) {return String(satData.degrees_longitude, 10);}
    else if (strcmp("DegLonRange", data)==0) {return String(satData.degrees_longitude, 10);}
    else if (strcmp("DegLatLonRange", data)==0) {return String(satData.degrees_latitude, 10);}
  }
  else if (strncmp(data, "UTCTimeGNGGA", strlen("UTCTimeGNGGA"))==0) {
    if (strcmp("UTCTimeGNGGAOver", data)==0) {return String(gnggaData.utc_time);}
    else if (strcmp("UTCTimeGNGGAUnder", data)==0) {return String(gnggaData.utc_time);}
    else if (strcmp("UTCTimeGNGGAEqual", data)==0) {return String(gnggaData.utc_time);}
    else if (strcmp("UTCTimeGNGGARange", data)==0) {return String(gnggaData.utc_time);}
  }
  else if (strcmp("PosStatusGNGGA", data)==0) {return String(gnggaData.solution_status);}
  else if (strncmp(data, "SatCount", strlen("SatCount"))==0) {
    if (strcmp("SatCountOver", data)==0) {return String(gnggaData.satellite_count_gngga);}
    else if (strcmp("SatCountUnder", data)==0) {return String(gnggaData.satellite_count_gngga);}
    else if (strcmp("SatCountEqual", data)==0) {return String(gnggaData.satellite_count_gngga);}
    else if (strcmp("SatCountRange", data)==0) {return String(gnggaData.satellite_count_gngga);}
  }
  else if (strncmp(data, "HemiGNGGA", strlen("HemiGNGGA"))==0) {
    if (strcmp("HemiGNGGANorth", data)==0) {return String(gnggaData.latitude_hemisphere);}
    else if (strcmp("HemiGNGGASouth", data)==0) {return String(gnggaData.latitude_hemisphere);}
    else if (strcmp("HemiGNGGAEast", data)==0) {return String(gnggaData.latitude_hemisphere);}
    else if (strcmp("HemiGNGGAWest", data)==0) {return String(gnggaData.latitude_hemisphere);}
  }
  else if (strncmp(data, "GPSPrecision", strlen("GPSPrecision"))==0) {
    if (strcmp("GPSPrecisionOver", data)==0) {return String(gnggaData.hdop_precision_factor, 2);}
    else if (strcmp("GPSPrecisionUnder", data)==0) {return String(gnggaData.hdop_precision_factor, 2);}
    else if (strcmp("GPSPrecisionEqual", data)==0) {return String(gnggaData.hdop_precision_factor, 2);}
    else if (strcmp("GPSPrecisionRange", data)==0) {return String(gnggaData.hdop_precision_factor, 2);}
  }
  else if (strncmp(data, "AltGNGGA", strlen("AltGNGGA"))==0) {
    if (strcmp("AltGNGGAOver", data)==0) {return String(gnggaData.altitude, 2);}
    else if (strcmp("AltGNGGAUnder", data)==0) {return String(gnggaData.altitude, 2);}
    else if (strcmp("AltGNGGAEqual", data)==0) {return String(gnggaData.altitude, 2);}
    else if (strcmp("AltGNGGARange", data)==0) {return String(gnggaData.altitude, 2);}
  }
  else if (strncmp(data, "UTCTimeGNRMC", strlen("UTCTimeGNRMC"))==0) {
    if (strcmp("UTCTimeGNRMCOver", data)==0) {return String(gnrmcData.utc_time);}
    else if (strcmp("UTCTimeGNRMCUnder", data)==0) {return String(gnrmcData.utc_time);}
    else if (strcmp("UTCTimeGNRMCEqual", data)==0) {return String(gnrmcData.utc_time);}
    else if (strcmp("UTCTimeGNRMCRange", data)==0) {return String(gnrmcData.utc_time);}
  }
  else if (strcmp("PosStatusGNRMCA", data)==0) {return String(gnrmcData.positioning_status);}
  else if (strcmp("PosStatusGNRMCV", data)==0) {return String(gnrmcData.positioning_status);}
  else if (strncmp(data, "Mode", strlen("Mode"))==0) {
    if (strcmp("ModeGNRMCA", data)==0) {return String(gnrmcData.mode_indication);}
    else if (strcmp("ModeGNRMCD", data)==0) {return String(gnrmcData.mode_indication);}
    else if (strcmp("ModeGNRMCE", data)==0) {return String(gnrmcData.mode_indication);}
    else if (strcmp("ModeGNRMCN", data)==0) {return String(gnrmcData.mode_indication);}
  }
  else if (strncmp(data, "HemiGNRMC", strlen("HemiGNRMC"))==0) {
    if (strcmp("HemiGNRMCNorth", data)==0) {return String(gnrmcData.latitude_hemisphere);}
    else if (strcmp("HemiGNRMCSouth", data)==0) {return String(gnrmcData.latitude_hemisphere);}
    else if (strcmp("HemiGNRMCEast", data)==0) {return String(gnrmcData.latitude_hemisphere);}
    else if (strcmp("HemiGNRMCWest", data)==0) {return String(gnrmcData.latitude_hemisphere);}
  }
  else if (strncmp(data, "GSpeedGNRMC", strlen("GSpeedGNRMC"))==0) {
    if (strcmp("GSpeedGNRMCOver", data)==0) {return String(gnrmcData.ground_speed, 2);}
    else if (strcmp("GSpeedGNRMCUnder", data)==0) {return String(gnrmcData.ground_speed, 2);}
    else if (strcmp("GSpeedGNRMCEqual", data)==0) {return String(gnrmcData.ground_speed, 2);}
    else if (strcmp("GSpeedGNRMCRange", data)==0) {return String(gnrmcData.ground_speed, 2);}
  }
  else if (strncmp(data, "HeadingGNRMC", strlen("HeadingGNRMC"))==0) {
    if (strcmp("HeadingGNRMCOver", data)==0) {return String(gnrmcData.ground_heading, 2);}
    else if (strcmp("HeadingGNRMCUnder", data)==0) {return String(gnrmcData.ground_heading, 2);}
    else if (strcmp("HeadingGNRMCEqual", data)==0) {return String(gnrmcData.ground_heading, 2);}
    else if (strcmp("HeadingGNRMCRange", data)==0) {return String(gnrmcData.ground_heading, 2);}
  }
  else if (strncmp(data, "UTCDateGNRMC", strlen("UTCDateGNRMC"))==0) {
    if (strcmp("UTCDateGNRMCOver", data)==0) {return String(gnrmcData.utc_date);}
    else if (strcmp("UTCDateGNRMCUnder", data)==0) {return String(gnrmcData.utc_date);}
    else if (strcmp("UTCDateGNRMCEqual", data)==0) {return String(gnrmcData.utc_date);}
    else if (strcmp("UTCDateGNRMCRange", data)==0) {return String(gnrmcData.utc_date);}
  }
  else if (strncmp(data, "LFlagGPATT", strlen("LFlagGPATT"))==0) {
    if (strcmp("LFlagGPATTOver", data)==0) {return String(gpattData.line_flag);}
    else if (strcmp("LFlagGPATTUnder", data)==0) {return String(gpattData.line_flag);}
    else if (strcmp("LFlagGPATTEqual", data)==0) {return String(gpattData.line_flag);}
    else if (strcmp("LFlagGPATTRange", data)==0) {return String(gpattData.line_flag);}
  }
  else if (strncmp(data, "SFlagGPATT", strlen("SFlagGPATT"))==0) {
    if (strcmp("SFlagGPATTOver", data)==0) {return String(gpattData.static_flag);}
    else if (strcmp("SFlagGPATTUnder", data)==0) {return String(gpattData.static_flag);}
    else if (strcmp("SFlagGPATTEqual", data)==0) {return String(gpattData.static_flag);}
    else if (strcmp("SFlagGPATTRange", data)==0) {return String(gpattData.static_flag);}
  }
  else if (strncmp(data, "RSFlagGPATT", strlen("RSFlagGPATT"))==0) {
    if (strcmp("RSFlagGPATTOver", data)==0) {return String(gpattData.run_state_flag);}
    else if (strcmp("RSFlagGPATTUnder", data)==0) {return String(gpattData.run_state_flag);}
    else if (strcmp("RSFlagGPATTEqual", data)==0) {return String(gpattData.run_state_flag);}
    else if (strcmp("RSFlagGPATTRange", data)==0) {return String(gpattData.run_state_flag);}
  }
  else if (strncmp(data, "INS", strlen("INS"))==0) {
    if (strcmp("INSGPATTOver", data)==0) {return String(gpattData.ins);}
    else if (strcmp("INSGPATTUnder", data)==0) {return String(gpattData.ins);}
    else if (strcmp("INSGPATTEqual", data)==0) {return String(gpattData.ins);}
    else if (strcmp("INSGPATTRange", data)==0) {return String(gpattData.ins);}
  }
  else if (strncmp(data, "SpeedNumGPATT", strlen("SpeedNumGPATT"))==0) {
    if (strcmp("SpeedNumGPATTOver", data)==0) {return String(gpattData.speed_num);}
    else if (strcmp("SpeedNumGPATTUnder", data)==0) {return String(gpattData.speed_num);}
    else if (strcmp("SpeedNumGPATTEqual", data)==0) {return String(gpattData.speed_num);}
    else if (strcmp("SpeedNumGPATTRange", data)==0) {return String(gpattData.speed_num);}
  }
  else if (strncmp(data, "MileageGPATT", strlen("MileageGPATT"))==0) {
    if (strcmp("MileageGPATTOver", data)==0) {return String(gpattData.mileage, 2);}
    else if (strcmp("MileageGPATTUnder", data)==0) {return String(gpattData.mileage, 2);}
    else if (strcmp("MileageGPATTEqual", data)==0) {return String(gpattData.mileage, 2);}
    else if (strcmp("MileageGPATTRange", data)==0) {return String(gpattData.mileage, 2);}
  }
  else if (strncmp(data, "GSTDataGPATT", strlen("GSTDataGPATT"))==0) {
    if (strcmp("GSTDataGPATTOver", data)==0) {return String(gpattData.gst_data);}
    else if (strcmp("GSTDataGPATTUnder", data)==0) {return String(gpattData.gst_data);}
    else if (strcmp("GSTDataGPATTEqual", data)==0) {return String(gpattData.gst_data);}
    else if (strcmp("GSTDataGPATTRange", data)==0) {return String(gpattData.gst_data);}
  }
  else if (strncmp(data, "YawGPATTO", strlen("YawGPATTO"))==0) {
    if (strcmp("YawGPATTOver", data)==0) {return String(gpattData.yaw, 2);}
    else if (strcmp("YawGPATTUnder", data)==0) {return String(gpattData.yaw, 2);}
    else if (strcmp("YawGPATTEqual", data)==0) {return String(gpattData.yaw, 2);}
    else if (strcmp("YawGPATTRange", data)==0) {return String(gpattData.yaw, 2);}
  }
  else if (strncmp(data, "RollGPATT", strlen("RollGPATT"))==0) {
    if (strcmp("RollGPATTOver", data)==0) {return String(gpattData.roll, 2);}
    else if (strcmp("RollGPATTUnder", data)==0) {return String(gpattData.roll, 2);}
    else if (strcmp("RollGPATTEqual", data)==0) {return String(gpattData.roll, 2);}
    else if (strcmp("RollGPATTRange", data)==0) {return String(gpattData.roll, 2);}
  }
  else if (strncmp(data, "PitchGPATT", strlen("PitchGPATT"))==0) {
    if (strcmp("PitchGPATTOver", data)==0) {return String(gpattData.pitch, 2);}
    else if (strcmp("PitchGPATTUnder", data)==0) {return String(gpattData.pitch, 2);}
    else if (strcmp("PitchGPATTEqual", data)==0) {return String(gpattData.pitch, 2);}
    else if (strcmp("PitchGPATTRange", data)==0) {return String(gpattData.pitch, 2);}
  }
  else if (strcmp("GNGGAValidCS", data)==0) {return String(gnggaData.valid_checksum);}
  else if (strcmp("GNRMCValidCS", data)==0) {return String(gnrmcData.valid_checksum);}
  else if (strcmp("GPATTValidCS", data)==0) {return String(gpattData.valid_checksum);}
  else if (strcmp("GNGGAValidCD", data)==0) {return String(gnggaData.count_valid_elements);}
  else if (strcmp("GNRMCValidCD", data)==0) {return String(gnrmcData.count_valid_elements);}
  else if (strcmp("GPATTValidCD", data)==0) {return String(gpattData.count_valid_elements);}
  else if (strncmp(data, "WT901", strlen("WT901"))==0) {
    if (strncmp("WT901AccX", data, 8)==0) {return String(sensorData.wt901_acc_x, 3);}
    else if (strncmp("WT901AccY", data, 8)==0) {return String(sensorData.wt901_acc_y, 3);}
    else if (strncmp("WT901AccZ", data, 8)==0) {return String(sensorData.wt901_acc_z, 3);}
    else if (strncmp("WT901AngX", data, 8)==0) {return String(sensorData.wt901_ang_x, 3);}
    else if (strncmp("WT901AngY", data, 8)==0) {return String(sensorData.wt901_ang_y, 3);}
    else if (strncmp("WT901AngZ", data, 8)==0) {return String(sensorData.wt901_ang_z, 3);}
    else if (strncmp("WT901MagX", data, 8)==0) {return String(sensorData.wt901_mag_x, 3);}
    else if (strncmp("WT901MagY", data, 8)==0) {return String(sensorData.wt901_mag_y, 3);}
    else if (strncmp("WT901MagZ", data, 8)==0) {return String(sensorData.wt901_mag_z, 3);}
    else if (strncmp("WT901GyroX", data, 8)==0) {return String(sensorData.wt901_gyr_x, 3);}
    else if (strncmp("WT901GyroY", data, 8)==0) {return String(sensorData.wt901_gyr_y, 3);}
    else if (strncmp("WT901GyroZ", data, 8)==0) {return String(sensorData.wt901_gyr_z, 3);}
  }
  // else if (strncmp(data, "Meteors", strlen("Meteors"))==0) {
  // }
  else if (strncmp(data, "Sun", strlen("Sun"))==0) {
    if (strcmp("SunAzRange", data)==0) {return String(siderealPlanetData.sun_az);}
    else if (strcmp("SunAltRange", data)==0) {return String(siderealPlanetData.sun_alt);}
    else if (strcmp("Sunrise", data)==0) {return String(siderealPlanetData.sun_r);}
    else if (strcmp("Sunset", data)==0) {return String(siderealPlanetData.sun_s);}
  }
  else if (strcmp("DayTime", data)==0) {return String(check_ge_and_le_true(hoursMinutesToInt(satData.local_hour, satData.local_minute), siderealPlanetData.sun_r, siderealPlanetData.sun_s));}
  else if (strcmp("NightTime", data)==0) {return String(check_ge_and_le_false(hoursMinutesToInt(satData.local_hour, satData.local_minute), siderealPlanetData.sun_r, siderealPlanetData.sun_s));}
  
  else if (strncmp(data, "Moon", strlen("Moon"))==0) {
    if (strcmp("MoonAzRange", data)==0) {return String(siderealPlanetData.moon_az);}
    else if (strcmp("MoonAltRange", data)==0) {return String(siderealPlanetData.moon_alt);}
    else if (strcmp("MoonUp", data)==0) {return String(siderealPlanetData.moon_r);}
    else if (strcmp("MoonDown", data)==0) {return String(siderealPlanetData.moon_s);}
    else if (strcmp("Moonrise", data)==0) {return String(siderealPlanetData.moon_r);}
    else if (strcmp("Moonset", data)==0) {return String(siderealPlanetData.moon_s);}
    else if (strcmp("MoonPhaseOver", data)==0) {return String((int)siderealPlanetData.moon_p);}
    else if (strcmp("MoonPhaseUnder", data)==0) {return String((int)siderealPlanetData.moon_p);}
    else if (strcmp("MoonPhaseEqual", data)==0) {return String((int)siderealPlanetData.moon_p);}
    else if (strcmp("MoonPhaseRange", data)==0) {return String((int)siderealPlanetData.moon_p);}
  }
  else if (strncmp(data, "Mercury", strlen("Mercury"))==0) {
    if (strcmp("MercuryAzRange", data)==0) {return String(siderealPlanetData.mercury_az);}
    else if (strcmp("MercuryAltRange", data)==0) {return String(siderealPlanetData.mercury_alt);}
    else if (strcmp("MercuryUp", data)==0) {return String(siderealPlanetData.mercury_r);}
    else if (strcmp("MercuryDown", data)==0) {return String(siderealPlanetData.mercury_s);}
    else if (strcmp("MercuryRise", data)==0) {return String(siderealPlanetData.mercury_r);}
    else if (strcmp("MercurySet", data)==0) {return String(siderealPlanetData.mercury_s);}
  }
  else if (strncmp(data, "Venus", strlen("Venus"))==0) {
    if (strcmp("VenusAzRange", data)==0) {return String(siderealPlanetData.venus_az);}
    else if (strcmp("VenusAltRange", data)==0) {return String(siderealPlanetData.venus_alt);}
    else if (strcmp("VenusUp", data)==0) {return String(siderealPlanetData.venus_r);}
    else if (strcmp("VenusDown", data)==0) {return String(siderealPlanetData.venus_s);}
    else if (strcmp("VenusRise", data)==0) {return String(siderealPlanetData.venus_r);}
    else if (strcmp("VenusSet", data)==0) {return String(siderealPlanetData.venus_s);}
  }
  else if (strncmp(data, "Mars", strlen("Mars"))==0) {
    if (strcmp("MarsAzRange", data)==0) {return String(siderealPlanetData.mars_az);}
    else if (strcmp("MarsAltRange", data)==0) {return String(siderealPlanetData.mars_alt);}
    else if (strcmp("MarsUp", data)==0) {return String(siderealPlanetData.mars_r);}
    else if (strcmp("MarsDown", data)==0) {return String(siderealPlanetData.mars_s);}
    else if (strcmp("MarsRise", data)==0) {return String(siderealPlanetData.mars_r);}
    else if (strcmp("MarsSet", data)==0) {return String(siderealPlanetData.mars_s);}
  }
  else if (strncmp(data, "Jupiter", strlen("Jupiter"))==0) {
    if (strcmp("JupiterAzRange", data)==0) {return String(siderealPlanetData.jupiter_az);}
    else if (strcmp("JupiterAltRange", data)==0) {return String(siderealPlanetData.jupiter_alt);}
    else if (strcmp("JupiterUp", data)==0) {return String(siderealPlanetData.jupiter_r);}
    else if (strcmp("JupiterDown", data)==0) {return String(siderealPlanetData.jupiter_s);}
    else if (strcmp("JupiterRise", data)==0) {return String(siderealPlanetData.jupiter_r);}
    else if (strcmp("JupiterSet", data)==0) {return String(siderealPlanetData.jupiter_s);}
  }
  else if (strncmp(data, "Saturn", strlen("Saturn"))==0) {
    if (strcmp("SaturnAzRange", data)==0) {return String(siderealPlanetData.saturn_az);}
    else if (strcmp("SaturnAltRange", data)==0) {return String(siderealPlanetData.saturn_alt);}
    else if (strcmp("SaturnUp", data)==0) {return String(siderealPlanetData.saturn_r);}
    else if (strcmp("SaturnDown", data)==0) {return String(siderealPlanetData.saturn_s);}
    else if (strcmp("SaturnRise", data)==0) {return String(siderealPlanetData.saturn_r);}
    else if (strcmp("SaturnSet", data)==0) {return String(siderealPlanetData.saturn_s);}
  }
  else if (strncmp(data, "Uranus", strlen("Uranus"))==0) {
    if (strcmp("UranusAzRange", data)==0) {return String(siderealPlanetData.uranus_az);}
    else if (strcmp("UranusAltRange", data)==0) {return String(siderealPlanetData.uranus_alt);}
    else if (strcmp("UranusUp", data)==0) {return String(siderealPlanetData.uranus_r);}
    else if (strcmp("UranusDown", data)==0) {return String(siderealPlanetData.uranus_s);}
    else if (strcmp("UranusRise", data)==0) {return String(siderealPlanetData.uranus_r);}
    else if (strcmp("UranusSet", data)==0) {return String(siderealPlanetData.uranus_s);}
  }
  else if (strncmp(data, "Neptune", strlen("Neptune"))==0) {
    if (strcmp("NeptuneAzRange", data)==0) {return String(siderealPlanetData.neptune_az);}
    else if (strcmp("NeptuneAltRange", data)==0) {return String(siderealPlanetData.neptune_alt);}
    else if (strcmp("NeptuneUp", data)==0) {return String(siderealPlanetData.neptune_r);}
    else if (strcmp("NeptuneDown", data)==0) {return String(siderealPlanetData.neptune_s);}
    else if (strcmp("NeptuneRise", data)==0) {return String(siderealPlanetData.neptune_r);}
    else if (strcmp("NeptuneSet", data)==0) {return String(siderealPlanetData.neptune_s);}
  }
  else if (strncmp(data, "DHT11", strlen("DHT11"))==0) {
    if (strcmp("DHT11H0Under", data)==0) {return String(sensorData.dht11_h_0);}
    else if (strcmp("DHT11H0Over", data)==0) {return String(sensorData.dht11_h_0);}
    else if (strcmp("DHT11H0Equal", data)==0) {return String(sensorData.dht11_h_0);}
    else if (strcmp("DHT11H0Range", data)==0) {return String(sensorData.dht11_h_0);}
    else if (strcmp("DHT11C0Under", data)==0) {return String(sensorData.dht11_c_0);}
    else if (strcmp("DHT11C0Over", data)==0) {return String(sensorData.dht11_c_0);}
    else if (strcmp("DHT11C0Equal", data)==0) {return String(sensorData.dht11_c_0);}
    else if (strcmp("DHT11C0Range", data)==0) {return String(sensorData.dht11_c_0);}
    else if (strcmp("DHT11F0Under", data)==0) {return String(sensorData.dht11_f_0);}
    else if (strcmp("DHT11F0Over", data)==0) {return String(sensorData.dht11_f_0);}
    else if (strcmp("DHT11F0Equal", data)==0) {return String(sensorData.dht11_f_0);}
    else if (strcmp("DHT11F0Range", data)==0) {return String(sensorData.dht11_f_0);}
    else if (strcmp("DHT11HIC0Under", data)==0) {return String(sensorData.dht11_hic_0);}
    else if (strcmp("DHT11HIC0Over", data)==0) {return String(sensorData.dht11_hic_0);}
    else if (strcmp("DHT11HIC0Equal", data)==0) {return String(sensorData.dht11_hic_0);}
    else if (strcmp("DHT11HIC0Range", data)==0) {return String(sensorData.dht11_hic_0);}
    else if (strcmp("DHT11HIF0Under", data)==0) {return String(sensorData.dht11_hif_0);}
    else if (strcmp("DHT11HIF0Over", data)==0) {return String(sensorData.dht11_hif_0);}
    else if (strcmp("DHT11HIF0Equal", data)==0) {return String(sensorData.dht11_hif_0);}
    else if (strcmp("DHT11HIF0Range", data)==0) {return String(sensorData.dht11_hif_0);}
  }
  else if (strncmp(data, "Sensor", strlen("Sensor"))==0) {
    if (strcmp("Sensor0Over", data)==0) {return String(sensorData.sensor_0);}
    else if (strcmp("Sensor0Under", data)==0) {return String(sensorData.sensor_0);}
    else if (strcmp("Sensor0Equal", data)==0) {return String(sensorData.sensor_0);}
    else if (strcmp("Sensor0Range", data)==0) {return String(sensorData.sensor_0);}
    else if (strcmp("Sensor1Over", data)==0) {return String(sensorData.sensor_1);}
    else if (strcmp("Sensor1Under", data)==0) {return String(sensorData.sensor_1);}
    else if (strcmp("Sensor1Equal", data)==0) {return String(sensorData.sensor_1);}
    else if (strcmp("Sensor1Range", data)==0) {return String(sensorData.sensor_1);}
    else if (strcmp("Sensor2Over", data)==0) {return String(sensorData.sensor_2);}
    else if (strcmp("Sensor2Under", data)==0) {return String(sensorData.sensor_2);}
    else if (strcmp("Sensor2Equal", data)==0) {return String(sensorData.sensor_2);}
    else if (strcmp("Sensor2Range", data)==0) {return String(sensorData.sensor_2);}
    else if (strcmp("Sensor3Over", data)==0) {return String(sensorData.sensor_3);}
    else if (strcmp("Sensor3Under", data)==0) {return String(sensorData.sensor_3);}
    else if (strcmp("Sensor3Equal", data)==0) {return String(sensorData.sensor_3);}
    else if (strcmp("Sensor3Range", data)==0) {return String(sensorData.sensor_3);}
    else if (strcmp("Sensor4Over", data)==0) {return String(sensorData.sensor_4);}
    else if (strcmp("Sensor4Under", data)==0) {return String(sensorData.sensor_4);}
    else if (strcmp("Sensor4Equal", data)==0) {return String(sensorData.sensor_4);}
    else if (strcmp("Sensor4Range", data)==0) {return String(sensorData.sensor_4);}
    else if (strcmp("Sensor5Over", data)==0) {return String(sensorData.sensor_5);}
    else if (strcmp("Sensor5Under", data)==0) {return String(sensorData.sensor_5);}
    else if (strcmp("Sensor5Equal", data)==0) {return String(sensorData.sensor_5);}
    else if (strcmp("Sensor5Range", data)==0) {return String(sensorData.sensor_5);}
    else if (strcmp("Sensor6Over", data)==0) {return String(sensorData.sensor_6);}
    else if (strcmp("Sensor6Under", data)==0) {return String(sensorData.sensor_6);}
    else if (strcmp("Sensor6Equal", data)==0) {return String(sensorData.sensor_6);}
    else if (strcmp("Sensor6Range", data)==0) {return String(sensorData.sensor_6);}
    else if (strcmp("Sensor7Over", data)==0) {return String(sensorData.sensor_7);}
    else if (strcmp("Sensor7Under", data)==0) {return String(sensorData.sensor_7);}
    else if (strcmp("Sensor7Equal", data)==0) {return String(sensorData.sensor_7);}
    else if (strcmp("Sensor7Range", data)==0) {return String(sensorData.sensor_7);}
    else if (strcmp("Sensor8Over", data)==0) {return String(sensorData.sensor_8);}
    else if (strcmp("Sensor8Under", data)==0) {return String(sensorData.sensor_8);}
    else if (strcmp("Sensor8Equal", data)==0) {return String(sensorData.sensor_8);}
    else if (strcmp("Sensor8Range", data)==0) {return String(sensorData.sensor_8);}
    else if (strcmp("Sensor9Over", data)==0) {return String(sensorData.sensor_9);}
    else if (strcmp("Sensor9Under", data)==0) {return String(sensorData.sensor_9);}
    else if (strcmp("Sensor9Equal", data)==0) {return String(sensorData.sensor_9);}
    else if (strcmp("Sensor9Range", data)==0) {return String(sensorData.sensor_9);}
    else if (strcmp("Sensor10Over", data)==0) {return String(sensorData.sensor_10);}
    else if (strcmp("Sensor10Under", data)==0) {return String(sensorData.sensor_10);}
    else if (strcmp("Sensor10Equal", data)==0) {return String(sensorData.sensor_10);}
    else if (strcmp("Sensor10Range", data)==0) {return String(sensorData.sensor_10);}
    else if (strcmp("Sensor11Over", data)==0) {return String(sensorData.sensor_11);}
    else if (strcmp("Sensor11Under", data)==0) {return String(sensorData.sensor_11);}
    else if (strcmp("Sensor11Equal", data)==0) {return String(sensorData.sensor_11);}
    else if (strcmp("Sensor11Range", data)==0) {return String(sensorData.sensor_11);}
    else if (strcmp("Sensor12Over", data)==0) {return String(sensorData.sensor_12);}
    else if (strcmp("Sensor12Under", data)==0) {return String(sensorData.sensor_12);}
    else if (strcmp("Sensor12Equal", data)==0) {return String(sensorData.sensor_12);}
    else if (strcmp("Sensor12Range", data)==0) {return String(sensorData.sensor_12);}
    else if (strcmp("Sensor13Over", data)==0) {return String(sensorData.sensor_13);}
    else if (strcmp("Sensor13Under", data)==0) {return String(sensorData.sensor_13);}
    else if (strcmp("Sensor13Equal", data)==0) {return String(sensorData.sensor_13);}
    else if (strcmp("Sensor13Range", data)==0) {return String(sensorData.sensor_13);}
    else if (strcmp("Sensor14Over", data)==0) {return String(sensorData.sensor_14);}
    else if (strcmp("Sensor14Under", data)==0) {return String(sensorData.sensor_14);}
    else if (strcmp("Sensor14Equal", data)==0) {return String(sensorData.sensor_14);}
    else if (strcmp("Sensor14Range", data)==0) {return String(sensorData.sensor_14);}
    else if (strcmp("Sensor15Over", data)==0) {return String(sensorData.sensor_15);}
    else if (strcmp("Sensor15Under", data)==0) {return String(sensorData.sensor_15);}
    else if (strcmp("Sensor15Equal", data)==0) {return String(sensorData.sensor_15);}
    else if (strcmp("Sensor15Range", data)==0) {return String(sensorData.sensor_15);}
  }
  else if (strncmp(data, "JoyS0", strlen("JoyS0"))==0) {
    if (strcmp("JoyS0UpOver", data)==0) {return String(sensorData.as_0_u);}
    else if (strcmp("JoyS0UpUnder", data)==0) {return String(sensorData.as_0_u);}
    else if (strcmp("JoyS0UpEqual", data)==0) {return String(sensorData.as_0_u);}
    else if (strcmp("JoyS0UpRange", data)==0) {return String(sensorData.as_0_u);}
    else if (strcmp("JoyS0DownOver", data)==0) {return String(sensorData.as_0_d);}
    else if (strcmp("JoyS0DownUnder", data)==0) {return String(sensorData.as_0_d);}
    else if (strcmp("JoyS0DownEqual", data)==0) {return String(sensorData.as_0_d);}
    else if (strcmp("JoyS0DownRange", data)==0) {return String(sensorData.as_0_d);}
    else if (strcmp("JoyS0LeftOver", data)==0) {return String(sensorData.as_0_l);}
    else if (strcmp("JoyS0LeftUnder", data)==0) {return String(sensorData.as_0_l);}
    else if (strcmp("JoyS0LeftEqual", data)==0) {return String(sensorData.as_0_l);}
    else if (strcmp("JoyS0LeftRange", data)==0) {return String(sensorData.as_0_l);}
    else if (strcmp("JoyS0RightOver", data)==0) {return String(sensorData.as_0_r);}
    else if (strcmp("JoyS0RightUnder", data)==0) {return String(sensorData.as_0_r);}
    else if (strcmp("JoyS0RightEqual", data)==0) {return String(sensorData.as_0_r);}
    else if (strcmp("JoyS0RightRange", data)==0) {return String(sensorData.as_0_r);}
    else if (strcmp("JoyS0ClickOver", data)==0) {return String(sensorData.as_0_c);}
    else if (strcmp("JoyS0ClickUnder", data)==0) {return String(sensorData.as_0_c);}
    else if (strcmp("JoyS0ClickEqual", data)==0) {return String(sensorData.as_0_c);}
    else if (strcmp("JoyS0ClickRange", data)==0) {return String(sensorData.as_0_c);}
  }
  else if (strncmp(data, "JoyS1", strlen("JoyS1"))==0) {
    if (strcmp("JoyS1UpOver", data)==0) {return String(sensorData.as_1_u);}
    else if (strcmp("JoyS1UpUnder", data)==0) {return String(sensorData.as_1_u);}
    else if (strcmp("JoyS1UpEqual", data)==0) {return String(sensorData.as_1_u);}
    else if (strcmp("JoyS1UpRange", data)==0) {return String(sensorData.as_1_u);}
    else if (strcmp("JoyS1DownOver", data)==0) {return String(sensorData.as_1_d);}
    else if (strcmp("JoyS1DownUnder", data)==0) {return String(sensorData.as_1_d);}
    else if (strcmp("JoyS1DownEqual", data)==0) {return String(sensorData.as_1_d);}
    else if (strcmp("JoyS1DownRange", data)==0) {return String(sensorData.as_1_d);}
    else if (strcmp("JoyS1LeftOver", data)==0) {return String(sensorData.as_1_l);}
    else if (strcmp("JoyS1LeftUnder", data)==0) {return String(sensorData.as_1_l);}
    else if (strcmp("JoyS1LeftEqual", data)==0) {return String(sensorData.as_1_l);}
    else if (strcmp("JoyS1LeftRange", data)==0) {return String(sensorData.as_1_l);}
    else if (strcmp("JoyS1RightOver", data)==0) {return String(sensorData.as_1_r);}
    else if (strcmp("JoyS1RightUnder", data)==0) {return String(sensorData.as_1_r);}
    else if (strcmp("JoyS1RightEqual", data)==0) {return String(sensorData.as_1_r);}
    else if (strcmp("JoyS1RightRange", data)==0) {return String(sensorData.as_1_r);}
    else if (strcmp("JoyS1ClickOver", data)==0) {return String(sensorData.as_1_c);}
    else if (strcmp("JoyS1ClickUnder", data)==0) {return String(sensorData.as_1_c);}
    else if (strcmp("JoyS1ClickEqual", data)==0) {return String(sensorData.as_1_c);}
    else if (strcmp("JoyS1ClickRange", data)==0) {return String(sensorData.as_1_c);}
  }
  return String("");
}

String groundHeadingDegreesToNESW(float num) {
  if (num == 0 || num == 360)      {return String("N");}
  else if (num > 0 && num < 45)    {return String("NNE");}
  else if (num == 45)              {return String("NE");}
  else if (num > 45 && num < 90)   {return String("ENE");}
  else if (num == 90)              {return String("E");}
  else if (num > 90 && num < 135)  {return String("ESE");}
  else if (num == 135)             {return String("SE");}
  else if (num > 135 && num < 180) {return String("SSE");}
  else if (num == 180)             {return String("S");}
  else if (num > 180 && num < 225) {return String("SSW");}
  else if (num == 225)             {return String("SW");}
  else if (num > 225 && num < 270) {return String("WSW");}
  else if (num == 270)             {return String("W");}
  else if (num > 270 && num < 315) {return String("WNW");}
  else if (num == 315)             {return String("NW");}
  else if (num > 315 && num < 360) {return String("NNW");}
  return String("");
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                             UI
// ------------------------------------------------------------------------------------------------------------------------------

char TMP_UI_DATA_0[128];

// -------------------------------------------------------------------
//                                                           UI BORDER
// -------------------------------------------------------------------

void drawMainBorder() {
  display.setColor(systemData.color_border);
  display.drawRect(0, 0, 127, 127);
}

void drawMainBorderRed() {
  display.setColor(RGB_COLOR16(255,0,0));
  display.drawRect(0, 0, 127, 127);
}

void drawMainBorderGreen() {
  display.setColor(RGB_COLOR16(0,255,0));
  display.drawRect(0, 0, 127, 127);
}

// -------------------------------------------------------------------
//                                                            UI TITLE
// -------------------------------------------------------------------

void drawGeneralTitle(String title, int color1, int color2) {
  // ----------------------------------------------
  // Color1: Text color.
  // Color2: Border coler. 
  // ----------------------------------------------
  display.setColor(color1);
  canvas120x8.clear();
  // top center
  canvas120x8.printFixed((int)(128/2)-((int)(strlen(title.c_str())/2)*6), 1, title.c_str(), STYLE_BOLD);
  display.drawCanvas(1, 2, canvas120x8);
  // title border
  display.setColor(color2);
  display.drawRect(0, 0, 127, 12);
}

// -------------------------------------------------------------------
//                                                        UI FILENAMES
// -------------------------------------------------------------------

void setMenuMatrixFilePathItems() {
    menuMatrixFilepathItems[0]=sdcardData.matrix_filenames[0];
    menuMatrixFilepathItems[1]=sdcardData.matrix_filenames[1];
    menuMatrixFilepathItems[2]=sdcardData.matrix_filenames[2];
    menuMatrixFilepathItems[3]=sdcardData.matrix_filenames[3];
    menuMatrixFilepathItems[4]=sdcardData.matrix_filenames[4];
    menuMatrixFilepathItems[5]=sdcardData.matrix_filenames[5];
    menuMatrixFilepathItems[6]=sdcardData.matrix_filenames[6];
    menuMatrixFilepathItems[7]=sdcardData.matrix_filenames[7];
    menuMatrixFilepathItems[8]=sdcardData.matrix_filenames[8];
    menuMatrixFilepathItems[9]=sdcardData.matrix_filenames[9];
    menuMatrixFilepathItems[10]=sdcardData.matrix_filenames[10];
    menuMatrixFilepathItems[11]=sdcardData.matrix_filenames[11];
    menuMatrixFilepathItems[12]=sdcardData.matrix_filenames[12];
    menuMatrixFilepathItems[13]=sdcardData.matrix_filenames[13];
    menuMatrixFilepathItems[14]=sdcardData.matrix_filenames[14];
    menuMatrixFilepathItems[15]=sdcardData.matrix_filenames[15];
    menuMatrixFilepathItems[16]=sdcardData.matrix_filenames[16];
    menuMatrixFilepathItems[17]=sdcardData.matrix_filenames[17];
    menuMatrixFilepathItems[18]=sdcardData.matrix_filenames[18];
    menuMatrixFilepathItems[19]=sdcardData.matrix_filenames[19];
}

// -------------------------------------------------------------------
//                                         UI DISCRETE LOAD PERCENTAGE
// -------------------------------------------------------------------

void DisplayDiscreteLoadPercentage(int x, int y, int w) {
  // title bar right: x=115, y=3, w=10
  display.setColor(RGB_COLOR16(0,0,0));
  display.drawHLine(x, y, x+w);
  display.drawHLine(x, y+2, x+w);
  display.drawHLine(x, y+4, x+w);
  display.drawHLine(x, y+6, x+w);
  if (systemData.load_percentage>=0 && systemData.load_percentage<=25) {
    display.setColor(RGB_COLOR16(0,255,0));
    display.drawHLine(x, y+6, x+w);
  }
  else if (systemData.load_percentage>25 && systemData.load_percentage<=50) {
    display.setColor(RGB_COLOR16(0,255,0));
    display.drawHLine(x, y+4, x+w);
    display.drawHLine(x, y+6, x+w);
  }
  else if (systemData.load_percentage>50 && systemData.load_percentage<=75) {
    display.setColor(RGB_COLOR16(255,255,0));
    display.drawHLine(x, y+2, x+w);
    display.setColor(RGB_COLOR16(0,255,0));
    display.drawHLine(x, y+4, x+w);
    display.drawHLine(x, y+6, x+w);
  }
  else if (systemData.load_percentage>75 && systemData.load_percentage<100) {
    display.setColor(RGB_COLOR16(255,0,0));
    display.drawHLine(x, y, x+w);
    display.setColor(RGB_COLOR16(255,255,0));
    display.drawHLine(x, y+2, x+w);
    display.setColor(RGB_COLOR16(0,255,0));
    display.drawHLine(x, y+4, x+w);
    display.drawHLine(x, y+6, x+w);
  }
  else if (systemData.load_percentage==100) {
    display.setColor(RGB_COLOR16(255,0,0));
    display.drawHLine(x, y, x+w);
    display.drawHLine(x, y+2, x+w);
    display.drawHLine(x, y+4, x+w);
    display.drawHLine(x, y+6, x+w);
  }
}

// -------------------------------------------------------------------
//                                                   UI LOOPS A SECOND
// -------------------------------------------------------------------
void DisplayLoopsASecond(int x, int y) {
  display.setColor(RGB_COLOR16(0,0,255));
  canvas19x8.clear();
  canvas19x8.printFixed(1, 1, String(systemData.total_loops_a_second).c_str(), STYLE_BOLD);
  display.drawCanvas(x, y, canvas19x8);
}

void DisplaySignal(int x1, int y1) {
  canvas9x7.clear();
  if (gps_signal==0) {display.drawBitmap16(x1, y1, 9, 7, image_data_gpssig_0);}
  else if (gps_signal==1) {display.drawBitmap16(x1, y1, 9, 7, image_data_gpssig_1);}
  else if (gps_signal==2) {display.drawBitmap16(x1, y1, 9, 7, image_data_gpssig_2);}
}

// -------------------------------------------------------------------
//                                                         UI RTC SYNC
// -------------------------------------------------------------------

void DisplayRTCSync(int x1, int y1) {
  if (rtc_sync_flag==true) {display.drawBitmap16(x1, y1, 9, 7, image_data_rtcsync_0);}
}

// -------------------------------------------------------------------
//                                                   UI SERIAL COMMAND
// -------------------------------------------------------------------
void DisplayDebugSymbol(int x1, int y1) {
  if (systemData.serial_command==true) {display.drawBitmap16(x1, y1, 9, 7, image_data_serial_command_enabled);}
  else                               {display.drawBitmap16(x1, y1, 9, 7, image_data_serial_command_disabled);}
}

// -------------------------------------------------------------------
//                                                       UI INDICATORS
// -------------------------------------------------------------------

void UIIndicators() {
  // --------------------------------------------------------------
  // Indicate something before SPI switching to another SPI device.
  // Should not be ran while UpdateUI is writing to display.
  // --------------------------------------------------------------

  // --------------------------------------------------------------
  //                                          SAVE MATRIX INDICATOR
  // --------------------------------------------------------------
  if (menu_page==page_save_matrix_file_indicator) {
    // ------------------------------------------------------------
    // static data
    // ------------------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      canvas120x120.clear();
      display.setColor(RGB_COLOR16(0,255,0));
      canvas120x120.printFixed((120/2)-((strlen("SAVING")/2)*6), (display.height()/2)-16, "SAVING", STYLE_BOLD);
      display.drawCanvas(5, 5, canvas120x120);
      drawMainBorderGreen();
    }
  }

  // --------------------------------------------------------------
  //                                          LOAD MATRIX INDICATOR
  // --------------------------------------------------------------
  else if (menu_page==page_load_matrix_file_indicator) {
    // ------------------------------------------------------------
    // static data
    // ------------------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      canvas120x120.clear();
      display.setColor(RGB_COLOR16(0,255,0));
      canvas120x120.printFixed((120/2)-((strlen("LOADING")/2)*6), (display.height()/2)-16, "LOADING", STYLE_BOLD);
      display.drawCanvas(5, 5, canvas120x120);
      drawMainBorderGreen();
    }
  }

  // --------------------------------------------------------------
  //                                        DELETE MATRIX INDICATOR
  // --------------------------------------------------------------
  else if (menu_page==page_delete_matrix_file_indicator) {
    // ------------------------------------------------------------
    // static data
    // ------------------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      canvas120x120.clear();
      display.setColor(RGB_COLOR16(0,255,0));
      canvas120x120.printFixed((120/2)-((strlen("DELETING")/2)*6), (display.height()/2)-16, "DELETING", STYLE_BOLD);
      display.drawCanvas(5, 5, canvas120x120);
      drawMainBorderGreen();
    }
  }

  // --------------------------------------------------------------
  //                                 SAVING SYSTEM CONFIG INDICATOR
  // --------------------------------------------------------------
  else if (menu_page==page_save_system_config_indicator) {
    // ------------------------------------------------------------
    // static data
    // ------------------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      canvas120x120.clear();
      display.setColor(RGB_COLOR16(0,255,0));
      canvas120x120.printFixed((120/2)-((strlen("SAVING")/2)*6), (display.height()/2)-16, "SAVING", STYLE_BOLD);
      canvas120x120.printFixed((120/2)-((strlen("SYSTEM CONFIG")/2)*6), (display.height()/2), "SYSTEM CONFIG", STYLE_BOLD);
      display.drawCanvas(5, 5, canvas120x120);
      drawMainBorderGreen();
    }
  }

  // --------------------------------------------------------------
  //                      RESTORING DEFAULT SYSTEM CONFIG INDICATOR
  // --------------------------------------------------------------
  else if (menu_page==page_restore_default_matrix_indicator) {
    // ------------------------------------------------------------
    // static data
    // ------------------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      canvas120x120.clear();
      display.setColor(RGB_COLOR16(0,255,0));
      canvas120x120.printFixed((120/2)-((strlen("RESTORING")/2)*6), (display.height()/2)-16, "RESTORING", STYLE_BOLD);
      canvas120x120.printFixed((120/2)-((strlen("SYSTEM CONFIG")/2)*6), (display.height()/2), "SYSTEM CONFIG", STYLE_BOLD);
      display.drawCanvas(5, 5, canvas120x120);
      drawMainBorderGreen();
    }
  }
}

// --------------------------------------------------------------
//                                                    DISPLAY UAP
// --------------------------------------------------------------
void DisplayUAP() {
  // ------------------------------------------------------------
  // create sprite
  // ------------------------------------------------------------
  uap.createSprite(uap_w, uap_h); 
  uap_piv_X = uap.width() / 2; // x pivot of Sprite (middle)
  uap_piv_y = uap_h/2; // y pivot of Sprite (10 pixels from bottom)
  uap.setPivot(uap_piv_X, uap_piv_y); // Set pivot point in this Sprite
  // ------------------------------------------------------------
  // draw object to be rotated
  // ------------------------------------------------------------
  uap.fillRect(uap_piv_X - 1, 1, 2, uap_piv_y+48, TFT_BLUE); // uap
  uap.fillCircle(uap_piv_X-2, uap_piv_y, 2, TFT_GREEN); // uap orientation
  // ------------------------------------------------------------
  // calculate rotation
  // ------------------------------------------------------------
  tft.setPivot(64, 64); // set the TFT pivot point that the sprite will rotate around
  // mapped_roll = wt901_roll; // sim
  mapped_roll = sensorData.wt901_ang_x;
  mapped_roll = map(mapped_roll, -180.00, 180, 0, 360);
  mapped_roll -= offset_wt901_roll_0;
  
  // ------------------------------------------------------------
  // uncomment to force roll incrementation and debug
  // ------------------------------------------------------------
  // Serial.println("[roll] "+String(wt901_roll)+" [ui offset] "+String(offset_wt901_roll_0)+" [ui value] "+String(mapped_roll));
  // wt901_roll++; if (wt901_roll>360) {wt901_roll=0;} // sim

  // ------------------------------------------------------------
  // rotate sprite and free memory
  // ------------------------------------------------------------
  uap.pushRotated((int)mapped_roll);
  yield();
  uap.deleteSprite();
}


// ----------------------------------------------------------------------------------------------------------------
//                                                                                                  UI SOLAR SYSTEM
// ----------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------
// Planet/Object screen positions. Updated dynamically.
// ---------------------------------------------------------------
bool crunching_time_data=false;

float test_angle=90;
float test_moon_angle=90;

int solar_system_center_x=64;
int solar_system_center_y=68;

//                                      0-1: low                                  2-3: high
int celestial_object_altitude_color[4]={RGB_COLOR16(0,0,24), RGB_COLOR16(0,28,0), RGB_COLOR16(0,0,36), RGB_COLOR16(0,64,0)};

int sun_sprite_size=5;
int sun_sprite_center=2;
int sun_radius=2;
int sun_ui_x = solar_system_center_x-sun_radius;
int sun_ui_y = solar_system_center_y-sun_radius;

int mercury_color[1]={RGB_COLOR16(255,0,255)};
int mercury_orbit_radius=7;
int mercury_sprite_size=3;
int mercury_sprite_center=1;
int mercury_radius=1;
int mercury_ui_x = solar_system_center_x+mercury_orbit_radius;
int mercury_ui_y = solar_system_center_y;

int venus_color[1]={RGB_COLOR16(255,255,0)};
int venus_orbit_radius=13;
int venus_sprite_size=3;
int venus_sprite_center=1;
int venus_radius=1;
int venus_ui_x = solar_system_center_x+venus_orbit_radius;
int venus_ui_y = solar_system_center_y;

int earth_color[1]={RGB_COLOR16(0,0,255)};
int earth_orbit_radius=22;
int earth_sprite_size=3;
int earth_sprite_center=1;
int earth_radius=1;
int earth_ui_x = solar_system_center_x+earth_orbit_radius;
int earth_ui_y = solar_system_center_y;

int moon_color[2]={RGB_COLOR16(128,128,128)};
int moon_orbit_radius=4;
int moon_sprite_size=3;
int moon_sprite_center=1;
int moon_radius=1;
int moon_ui_x = earth_orbit_radius+earth_sprite_center;
int moon_ui_y = solar_system_center_y;

int mars_color[1]={RGB_COLOR16(255,0,0)};
int mars_orbit_radius=31;
int mars_sprite_size=3;
int mars_sprite_center=1;
int mars_radius=1;
int mars_ui_x = solar_system_center_x+mars_orbit_radius;
int mars_ui_y = solar_system_center_y;

int jupiter_color[1]={RGB_COLOR16(128,128,128)};
int jupiter_orbit_radius=37;
int jupiter_sprite_size=5;
int jupiter_sprite_center=2;
int jupiter_radius=2;
int jupiter_ui_x = solar_system_center_x+jupiter_orbit_radius;
int jupiter_ui_y = solar_system_center_y;

int saturn_color[1]={RGB_COLOR16(255,255,0)};
int saturn_orbit_radius=45;
int saturn_sprite_size=7;
int saturn_sprite_center=3;
int saturn_rings_radius=3;
int saturn_radius=1;
int saturn_ui_x = solar_system_center_x+saturn_orbit_radius;
int saturn_ui_y = solar_system_center_y;

int uranus_color[1]={RGB_COLOR16(0,255,255)};
int uranus_orbit_radius=51;
int uranus_sprite_size=3;
int uranus_sprite_center=1;
int uranus_radius=1;
int uranus_ui_x = solar_system_center_x+uranus_orbit_radius;
int uranus_ui_y = solar_system_center_y;

int neptune_color[1]={RGB_COLOR16(255,0,255)};
int neptune_orbit_radius=56;
int neptune_sprite_size=3;
int neptune_sprite_center=1;
int neptune_radius=1;
int neptune_ui_x = solar_system_center_x+neptune_orbit_radius;
int neptune_ui_y = solar_system_center_y;

int astroclock_angle_offset=90;

// ----------------------------------------------------------------------------------------------------------------
//                                                                                                      DRAW ZODIAC
// ----------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------
/*
  These elements allow for 12 lines to be drawn from earth to the
  defined width and height of the astronarium and 12 symbols to be
  drawn between said lines.
  These values are updated dynamically (because Earth is moving).
  0: earth x
  1: earth y
  2: zodiac_seg_end_x
  3: zodiac_seg_end_y
*/
// ---------------------------------------------------------------
int zodiac_elements[12][4] {
  {64,64,64,64}, {64,64,64,64}, {64,64,64,64}, {64,64,64,64},
  {64,64,64,64}, {64,64,64,64}, {64,64,64,64}, {64,64,64,64},
  {64,64,64,64}, {64,64,64,64}, {64,64,64,64}, {64,64,64,64}
};
// ---------------------------------------------------------------
// Rectangle boundaries
// ---------------------------------------------------------------
int z_width=128;
int z_height=128;
int16_t z_rect_x = 0;
int16_t z_rect_y = 8;
// ---------------------------------------------------------------
// Rectangle edges
// ---------------------------------------------------------------
int16_t z_left_edge = z_rect_x;
int16_t z_right_edge = z_rect_x + z_width;
int16_t z_top_edge = z_rect_y;
int16_t z_bottom_edge = z_rect_y + z_height;
// ---------------------------------------------------------------
// Segment endpoint
// ---------------------------------------------------------------
int16_t zodiac_seg_end_x=0;
int16_t zodiac_seg_end_y=0;
// ---------------------------------------------------------------
// Calculate angles for 12 evenly spaced lines (30 degrees each)
// ---------------------------------------------------------------
const float z_angle_step = 2.0 * PI / 12.0;  // 360° / 12 = 30° in radians
// -------------------------------------------------------------
// Calculate intersection with rectangle edges
// -------------------------------------------------------------
float z_cos_angle=0;
float z_sin_angle=0;
// -------------------------------------------------------------
// Initialize z_radius_0 to a large value
// -------------------------------------------------------------
float z_radius_0 = 10000.0; // Large enough to ensure intersection
float z_angle=0;
float z_radius_1=0;

// -------------------------------------------------------------
// Clear previous line
// -------------------------------------------------------------
void clearZodiacLine(int i) {
  tft.drawLine(zodiac_elements[i][0], zodiac_elements[i][1], zodiac_elements[i][2], zodiac_elements[i][3], TFT_BLACK);
}

void drawZodiac() {
  // ---------------------------------------------------------------
  // todo: reduce zodiac segment lines right and bottom edges
  // ---------------------------------------------------------------
  // Border
  // ---------------------------------------------------------------
  tft.drawRect(1, 10, 126, 117, RGB_COLOR16(0,0,24));
  // ---------------------------------------------------------------
  // Clear existing zodiacs & Draw new zodiacs
  // ---------------------------------------------------------------
  for (int i = 0; i < 12; i++) {
    // -------------------------------------------------------------
    // Step z_angle
    // -------------------------------------------------------------
    z_angle = i * z_angle_step;
    // -------------------------------------------------------------
    // Calculate intersection with rectangle edges
    // -------------------------------------------------------------
    z_cos_angle = cos(z_angle);
    z_sin_angle = sin(z_angle);
    // -------------------------------------------------------------
    // z_radius_0 to large value (large enough ensures intersection)
    // -------------------------------------------------------------
    z_radius_0 = 10000.0;
    // -------------------------------------------------------------
    // Check intersection with left edge (x = z_left_edge)
    // -------------------------------------------------------------
    if (z_cos_angle < -0.0001) {
        z_radius_1 = (z_left_edge - earth_ui_x+earth_radius) / z_cos_angle;
        if (z_radius_1 > 0) z_radius_0 = min(z_radius_0, z_radius_1);}
    // -------------------------------------------------------------
    // Check intersection with right edge (x = z_right_edge)
    // -------------------------------------------------------------
    if (z_cos_angle > 0.0001) {
        z_radius_1 = (z_right_edge - earth_ui_x+earth_radius) / z_cos_angle;
        if (z_radius_1 > 0) z_radius_0 = min(z_radius_0, z_radius_1);}
    // -------------------------------------------------------------
    // Check intersection with top edge (y = z_top_edge)
    // -------------------------------------------------------------
    if (z_sin_angle < -0.0001) {
        z_radius_1 = (z_top_edge - earth_ui_y+earth_radius) / z_sin_angle;
        if (z_radius_1 > 0) z_radius_0 = min(z_radius_0, z_radius_1);}
    // -------------------------------------------------------------
    // Check intersection with bottom edge (y = z_bottom_edge)
    // -------------------------------------------------------------
    if (z_sin_angle > 0.0001) {
        z_radius_1 = (z_bottom_edge - earth_ui_y+earth_radius) / z_sin_angle;
        if (z_radius_1 > 0) z_radius_0 = min(z_radius_0, z_radius_1);}
    // -------------------------------------------------------------
    // Calculate endpoint
    // -------------------------------------------------------------
    zodiac_seg_end_x = earth_ui_x+earth_radius + (int16_t)(z_cos_angle * z_radius_0);
    zodiac_seg_end_y = earth_ui_y+earth_radius + (int16_t)(z_sin_angle * z_radius_0);
    // -------------------------------------------------------------
    // Clear line before updating elements
    // -------------------------------------------------------------
    clearZodiacLine(i);
    // -------------------------------------------------------------
    // Store elements ready to clear next function call
    // -------------------------------------------------------------
    zodiac_elements[i][0]=earth_ui_x+earth_radius;
    zodiac_elements[i][1]=earth_ui_y+earth_radius;
    zodiac_elements[i][2]=zodiac_seg_end_x;
    zodiac_elements[i][3]=zodiac_seg_end_y;
    // -------------------------------------------------------------
    // Draw the line from the specified center to the edge
    // -------------------------------------------------------------
    tft.drawLine(zodiac_elements[i][0], zodiac_elements[i][1], zodiac_elements[i][2], zodiac_elements[i][3], RGB_COLOR16(0,0,24));
    // tft.drawRect(1, 10, 126, 117, RGB_COLOR16(0,0,24)); // (patch overrun while lines slightly longer in some cases)
    // -------------------------------------------------------------
    // Note seg index to line degrees
    // -------------------------------------------------------------
    // 0:  90  deg
    // 1:  120 deg
    // 2:  150 deg
    // 3:  180 deg
    // 4:  210 deg
    // 5:  240 deg
    // 6:  270 deg
    // 7:  300 deg
    // 8:  330 deg
    // 9:  360 deg
    // 10: 30  deg
    // 11: 60  deg
  }
}

// ----------------------------------------------------------------------------------------------------------------
//                                                                                                DRAW EARTH ZENITH
// ----------------------------------------------------------------------------------------------------------------

float zenith_ui=0;

// ---------------------------------------------------------------
// Zenith direction in space. Updated dynamically.
// ---------------------------------------------------------------
int zenith_direction[1][4] {
  {64,64,64,64}
};
// -------------------------------------------------------------
// Normalize z_angle to [0, 360)
// -------------------------------------------------------------
float normalizeAngle(float z_angle) {
    z_angle = fmod(z_angle, 360.0f); // Reduce to [0, 360)
    if (z_angle < 0.0f) {
        z_angle += 360.0f; // Handle negative angles
    }
    return z_angle;
}
// -------------------------------------------------------------
// Custom mapping function to reverse z_angle (360 to 0)
// -------------------------------------------------------------
float z_reverse_map;
float reverseMap(float value, float inMin, float inMax, float outMin, float outMax) {
    z_reverse_map = (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
    return normalizeAngle(z_reverse_map); // Ensure result is in [0, 360)
}
// -----------------------------------------------------------------------------------
// Draw which direction zenith is pointing into space according to datetime & location (in development)
// This may be removed from this astro 'view' due to accuracy problems in 2 dimensions in this view.
// One solution may be to convey altitude of celestial objects in relation to zenith direction in space.
// -----------------------------------------------------------------------------------
void drawEarthZenith() {

  // -----------------------------------------------------------
  // Find zenith degrees
  // -----------------------------------------------------------
  // zenith = (float)siderealPlanetData.earth_ecliptic_long - siderealPlanetData.sun_az;
  zenith_ui = (float)siderealPlanetData.sun_az - siderealPlanetData.earth_ecliptic_long;
  // -----------------------------------------------------------
  // Adjust by 90 degrees (same as planet adjustements)
  // -----------------------------------------------------------
  zenith_ui += 90.0f;
  // -----------------------------------------------------------
  // Ensure positive and in [0, 360)
  // -----------------------------------------------------------
  zenith_ui = normalizeAngle(zenith_ui);
  // -----------------------------------------------------------
  // Reverse to go anticlockwise
  // -----------------------------------------------------------
  zenith_ui = reverseMap(zenith_ui, 0.0f, 360.0f, 360.0f, 0.0f);
  // -----------------------------------------------------------
  // Draw colored line to convey attitude in space
  // -----------------------------------------------------------
  tft.drawLine(zenith_direction[0][0], zenith_direction[0][1], zenith_direction[0][2], zenith_direction[0][3], RGB_COLOR16(0,0,0));
  zenith_direction[0][0]=earth_ui_x+earth_radius;
  zenith_direction[0][1]=earth_ui_y+earth_radius;

  zenith_direction[0][2]=earth_ui_x+0 + (int)(cos(zenith_ui * PI / 180.0) * 12); // experiemntal: offset value (6) = half length of line (12)
  zenith_direction[0][3]=earth_ui_y+0 + (int)(sin(zenith_ui * PI / 180.0) * 12); // experiemntal: offset value (6) = half length of line (12)

  tft.drawLine(zenith_direction[0][0], zenith_direction[0][1], zenith_direction[0][2], zenith_direction[0][3], RGB_COLOR16(0,164,0));
}

// ----------------------------------------------------------------------------------------------------------------
//                                                                                               DRAW ORBITAL PATHS
// ----------------------------------------------------------------------------------------------------------------

void drawOrbitalPaths() {
    // --------------------------------------------------
    // Mercury
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, mercury_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_mercury==true) {
      if (siderealPlanetData.mercury_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, mercury_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, mercury_orbit_radius, celestial_object_altitude_color[1]);}
    }
    // else {tft.drawCircle(solar_system_center_x, solar_system_center_y, mercury_orbit_radius, celestial_object_altitude_color[1]);}
    // --------------------------------------------------
    // Venus
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, venus_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_venus==true) {
      if (siderealPlanetData.venus_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, venus_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, venus_orbit_radius, celestial_object_altitude_color[1]);}
    }
    // --------------------------------------------------
    // Moon
    // --------------------------------------------------
    tft.drawCircle(earth_ui_x+earth_sprite_center, earth_ui_y+earth_sprite_center, moon_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_moon==true) {
      if (siderealPlanetData.moon_alt<0) {
        tft.drawCircle(earth_ui_x+earth_sprite_center, earth_ui_y+earth_sprite_center, moon_orbit_radius, celestial_object_altitude_color[2]);
        }
      else {tft.drawCircle(earth_ui_x+earth_sprite_center, earth_ui_y+earth_sprite_center, moon_orbit_radius, celestial_object_altitude_color[3]);}
    }
    // --------------------------------------------------
    // Earth
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, earth_orbit_radius, TFT_BLACK);
    tft.drawCircle(solar_system_center_x, solar_system_center_y, earth_orbit_radius, celestial_object_altitude_color[2]);
    // --------------------------------------------------
    // Mars
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, mars_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_mars==true) {
      if (siderealPlanetData.mars_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, mars_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, mars_orbit_radius, celestial_object_altitude_color[1]);}
    }
    // --------------------------------------------------
    // Jupiter
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, jupiter_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_jupiter==true) {
      if (siderealPlanetData.jupiter_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, jupiter_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, jupiter_orbit_radius, celestial_object_altitude_color[1]);}
    }
    // --------------------------------------------------
    // Saturn
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, saturn_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_venus==true) {
      if (siderealPlanetData.saturn_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, saturn_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, saturn_orbit_radius, celestial_object_altitude_color[1]);}
    }
    // --------------------------------------------------
    // Uranus
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, uranus_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_uranus==true) {
      if (siderealPlanetData.uranus_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, uranus_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, uranus_orbit_radius, celestial_object_altitude_color[1]);}
    }
    // --------------------------------------------------
    // Neptune
    // --------------------------------------------------
    tft.drawCircle(solar_system_center_x, solar_system_center_y, neptune_orbit_radius, TFT_BLACK);
    if (systemData.sidereal_track_neptune==true) {
      if (siderealPlanetData.neptune_alt<0) {
        tft.drawCircle(solar_system_center_x, solar_system_center_y, neptune_orbit_radius, celestial_object_altitude_color[0]);
        }
      else {tft.drawCircle(solar_system_center_x, solar_system_center_y, neptune_orbit_radius, celestial_object_altitude_color[1]);}
    }
}

bool cleared_mercury=false;
void ClearAstroClockMercury() {
  hud.createSprite(mercury_sprite_size, mercury_sprite_size); 
  hud.fillCircle(mercury_sprite_size, mercury_sprite_size, mercury_radius, TFT_BLACK);
  hud.pushSprite((int)mercury_ui_x, (int)mercury_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_venus=false;
void ClearAstroClockVenus() {
  hud.createSprite(venus_sprite_size, venus_sprite_size); 
  hud.fillCircle(venus_sprite_center, venus_sprite_center, venus_radius, TFT_BLACK);
  hud.pushSprite((int)venus_ui_x, (int)venus_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_earth=false;
void ClearAstroClockEarth() {
  hud.createSprite(earth_sprite_size, earth_sprite_size); 
  hud.fillCircle(earth_sprite_center, earth_sprite_center, earth_radius, TFT_BLACK);
  hud.pushSprite((int)earth_ui_x, (int)earth_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_moon=false;
void ClearAstroClockMoon() {
  hud.createSprite(moon_sprite_size, moon_sprite_size); 
  hud.fillCircle(moon_sprite_center, moon_sprite_center, moon_radius, TFT_BLACK);
  hud.pushSprite((int)moon_ui_x, (int)moon_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_mars=false;
void ClearAstroClockMars() {
  hud.createSprite(mars_sprite_size, mars_sprite_size); 
  hud.fillCircle(mars_sprite_center, mars_sprite_center, mars_radius, TFT_BLACK);
  hud.pushSprite((int)mars_ui_x, (int)mars_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_jupiter=false;
void ClearAstroClockJupiter() {
  hud.createSprite(jupiter_sprite_size, jupiter_sprite_size);
  hud.fillCircle(jupiter_sprite_center, jupiter_sprite_center, jupiter_radius, TFT_BLACK);
  hud.pushSprite((int)jupiter_ui_x, (int)jupiter_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_saturn=false;
void ClearAstroClockSaturn() {
  hud.createSprite(saturn_sprite_size, saturn_sprite_size); 
  hud.drawCircle(saturn_sprite_center, saturn_sprite_center, saturn_rings_radius, TFT_BLACK);
  hud.fillCircle(saturn_sprite_center, saturn_sprite_center, saturn_radius, TFT_BLACK);
  hud.pushSprite((int)saturn_ui_x, (int)saturn_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_uranus=false;
void ClearAstroClockUranus() {
  hud.createSprite(uranus_sprite_size, uranus_sprite_size); 
  hud.fillCircle(uranus_sprite_center, uranus_sprite_center, uranus_radius, TFT_BLACK);
  hud.pushSprite((int)uranus_ui_x, (int)uranus_ui_y);
  yield();
  hud.deleteSprite();
}

bool cleared_neptune=false;
void ClearAstroClockNeptune() {
  hud.createSprite(neptune_sprite_size, neptune_sprite_size); 
  hud.fillCircle(neptune_sprite_center, neptune_sprite_center, neptune_radius, TFT_BLACK);
  hud.pushSprite((int)neptune_ui_x, (int)neptune_ui_y);
  yield();
  hud.deleteSprite();
}

// ----------------------------------------------------------------------------------------------------------------
//                                                                                                     DRAW PLANETS
// ----------------------------------------------------------------------------------------------------------------

void drawPlanets() {
  // -----------------------------------------------------------------
  // not to scale and is approximate
  // -----------------------------------------------------------------

  // -----------------------------------------------------------------
  //                                                               SUN
  // -----------------------------------------------------------------
  hud.createSprite(sun_sprite_size, sun_sprite_size); 
  hud.fillCircle(sun_sprite_center, sun_sprite_center, sun_radius, TFT_YELLOW);
  hud.pushSprite(sun_ui_x, sun_ui_y);
  yield();
  hud.deleteSprite();
  // -----------------------------------------------------------------
  //                                                           MERCURY
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_mercury==true) {
    cleared_mercury=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockMercury();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(mercury_sprite_size, mercury_sprite_size);
    hud.fillCircle(mercury_sprite_center, mercury_sprite_center, mercury_radius, mercury_color[0]);
    // mercury_ui_x = solar_system_center_x + mercury_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // mercury_ui_y = solar_system_center_y + mercury_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    mercury_ui_x = solar_system_center_x + mercury_orbit_radius * sin(radians(siderealPlanetData.mercury_helio_ecliptic_long+astroclock_angle_offset));
    mercury_ui_y = solar_system_center_y + mercury_orbit_radius * cos(radians(siderealPlanetData.mercury_helio_ecliptic_long+astroclock_angle_offset));
    hud.pushSprite((int)mercury_ui_x, (int)mercury_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_mercury==false) ClearAstroClockMercury(); cleared_mercury=true;}
  // -----------------------------------------------------------------
  //                                                             VENUS
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_venus==true) {
    cleared_venus=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockVenus();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(venus_sprite_size, venus_sprite_size); 
    hud.fillCircle(venus_sprite_center, venus_sprite_center, venus_radius, venus_color[0]);
    // venus_ui_x = solar_system_center_x + venus_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // venus_ui_y = solar_system_center_y + venus_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    venus_ui_x = solar_system_center_x + venus_orbit_radius * sin(radians(siderealPlanetData.venus_helio_ecliptic_long+astroclock_angle_offset));
    venus_ui_y = solar_system_center_y + venus_orbit_radius * cos(radians(siderealPlanetData.venus_helio_ecliptic_long+astroclock_angle_offset));
    hud.pushSprite((int)venus_ui_x, (int)venus_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_venus==false) ClearAstroClockVenus(); cleared_venus=true;}
  // -----------------------------------------------------------------
  //                                                             EARTH
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_moon==true) {
    cleared_earth=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockEarth();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(earth_sprite_size, earth_sprite_size); 
    hud.fillCircle(earth_sprite_center, earth_sprite_center, earth_radius, earth_color[0]);
    // earth_ui_x = solar_system_center_x + earth_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // earth_ui_y = solar_system_center_y + earth_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    earth_ui_x = solar_system_center_x + earth_orbit_radius * sin(radians(siderealPlanetData.earth_ecliptic_long-astroclock_angle_offset));
    earth_ui_y = solar_system_center_y + earth_orbit_radius * cos(radians(siderealPlanetData.earth_ecliptic_long-astroclock_angle_offset));
    // -----------------------------------------------------------------
    // draw sprite
    // -----------------------------------------------------------------
    hud.pushSprite((int)earth_ui_x, (int)earth_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_earth==false) ClearAstroClockEarth(); cleared_earth=true;}
  // -----------------------------------------------------------------
  //                                                              MOON
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_moon==true) {
    cleared_moon=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockMoon();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(moon_sprite_size, moon_sprite_size); 
    hud.fillCircle(moon_sprite_center, moon_sprite_center, moon_radius, moon_color[0]);
    // moon_ui_x = earth_ui_x + moon_orbit_radius * sin(radians(test_moon_angle+astroclock_angle_offset)); // (test)
    // moon_ui_y = earth_ui_y + moon_orbit_radius * cos(radians(test_moon_angle+astroclock_angle_offset)); // (test)
    moon_ui_x = (earth_ui_x+earth_sprite_center + moon_orbit_radius * sin(radians(map(siderealPlanetData.moon_ra, 0, 24, 0, 360)+astroclock_angle_offset)));
    moon_ui_y = (earth_ui_y+earth_sprite_center + moon_orbit_radius * cos(radians(map(siderealPlanetData.moon_ra, 0, 24, 0, 360)+astroclock_angle_offset)));
    hud.pushSprite((int)moon_ui_x, (int)moon_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_moon==false) ClearAstroClockMoon(); cleared_moon=true;}
  // -----------------------------------------------------------------
  //                                                              MARS
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_mars==true) {
    cleared_mars=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockMars();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(mars_sprite_size, mars_sprite_size); 
    hud.fillCircle(mars_sprite_center, mars_sprite_center, mars_radius, mars_color[0]);
    // mars_ui_x = solar_system_center_x + mars_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // mars_ui_y = solar_system_center_y + mars_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    mars_ui_x = solar_system_center_x + mars_orbit_radius * sin(radians(siderealPlanetData.mars_helio_ecliptic_long+astroclock_angle_offset));
    mars_ui_y = solar_system_center_y + mars_orbit_radius * cos(radians(siderealPlanetData.mars_helio_ecliptic_long+astroclock_angle_offset));
    hud.pushSprite((int)mars_ui_x, (int)mars_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_mars==false) ClearAstroClockMars(); cleared_mars=true;}
  // -----------------------------------------------------------------
  //                                                           JUPITER
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_jupiter==true) {
    cleared_jupiter=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------;
    ClearAstroClockJupiter();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(jupiter_sprite_size, jupiter_sprite_size); 
    hud.fillCircle(jupiter_sprite_center, jupiter_sprite_center, jupiter_radius, jupiter_color[0]);
    // jupiter_ui_x = solar_system_center_x + jupiter_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // jupiter_ui_y = solar_system_center_y + jupiter_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    jupiter_ui_x = (solar_system_center_x + jupiter_orbit_radius * sin(radians(siderealPlanetData.jupiter_helio_ecliptic_long+astroclock_angle_offset))) - jupiter_sprite_center;
    jupiter_ui_y = (solar_system_center_y + jupiter_orbit_radius * cos(radians(siderealPlanetData.jupiter_helio_ecliptic_long+astroclock_angle_offset))) - jupiter_sprite_center;
    hud.pushSprite((int)jupiter_ui_x, (int)jupiter_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_jupiter==false) ClearAstroClockJupiter(); cleared_jupiter=true;}
  // -----------------------------------------------------------------
  //                                                            SATURN
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_saturn==true) {
    cleared_saturn=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockSaturn();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(saturn_sprite_size, saturn_sprite_size); 
    hud.drawCircle(saturn_sprite_center, saturn_sprite_center, saturn_rings_radius, saturn_color[0]); // saturn's rings
    hud.fillCircle(saturn_sprite_center, saturn_sprite_center, saturn_radius, saturn_color[0]); // saturn
    // saturn_ui_x = solar_system_center_x + saturn_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // saturn_ui_y = solar_system_center_y + saturn_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    saturn_ui_x = (solar_system_center_x + saturn_orbit_radius * sin(radians(siderealPlanetData.saturn_helio_ecliptic_long+astroclock_angle_offset))) - saturn_sprite_center;
    saturn_ui_y = (solar_system_center_y + saturn_orbit_radius * cos(radians(siderealPlanetData.saturn_helio_ecliptic_long+astroclock_angle_offset))) - saturn_sprite_center;
    hud.pushSprite((int)saturn_ui_x, (int)saturn_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_saturn==false) ClearAstroClockSaturn(); cleared_saturn=true;}
  // -----------------------------------------------------------------
  //                                                           URANUS
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_uranus==true) {
    cleared_uranus=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockUranus();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(uranus_sprite_size, uranus_sprite_size); 
    hud.fillCircle(uranus_sprite_center, uranus_sprite_center, uranus_radius, uranus_color[0]);
    // uranus_ui_x = solar_system_center_x + uranus_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // uranus_ui_y = solar_system_center_y + uranus_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    uranus_ui_x = solar_system_center_x + uranus_orbit_radius * sin(radians(siderealPlanetData.uranus_helio_ecliptic_long+astroclock_angle_offset));
    uranus_ui_y = solar_system_center_y + uranus_orbit_radius * cos(radians(siderealPlanetData.uranus_helio_ecliptic_long+astroclock_angle_offset));
    hud.pushSprite((int)uranus_ui_x, (int)uranus_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_uranus==false) ClearAstroClockUranus(); cleared_uranus=true;}
  // -----------------------------------------------------------------
  //                                                           NEPTUNE
  // -----------------------------------------------------------------
  if (systemData.sidereal_track_neptune==true) {
    cleared_neptune=false;
    // -----------------------------------------------------------------
    // clear previous position
    // -----------------------------------------------------------------
    ClearAstroClockNeptune();
    // -----------------------------------------------------------------
    // create new position
    // -----------------------------------------------------------------
    hud.createSprite(neptune_sprite_size, neptune_sprite_size); 
    hud.fillCircle(neptune_sprite_center, neptune_sprite_center, neptune_radius, neptune_color[0]);
    // neptune_ui_x = solar_system_center_x + neptune_orbit_radius * sin(radians(test_angle+astroclock_angle_offset)); // (test)
    // neptune_ui_y = solar_system_center_y + neptune_orbit_radius * cos(radians(test_angle+astroclock_angle_offset)); // (test)
    neptune_ui_x = solar_system_center_x + neptune_orbit_radius * sin(radians(siderealPlanetData.neptune_helio_ecliptic_long+astroclock_angle_offset));
    neptune_ui_y = solar_system_center_y + neptune_orbit_radius * cos(radians(siderealPlanetData.neptune_helio_ecliptic_long+astroclock_angle_offset));
    hud.pushSprite((int)neptune_ui_x, (int)neptune_ui_y);
    yield();
    hud.deleteSprite();
  } else {if (cleared_neptune==false) ClearAstroClockNeptune(); cleared_neptune=true;}
  // -----------------------------------------------------------------
  //                                                              TEST
  // -----------------------------------------------------------------
  // test_angle=test_angle+10; if (test_angle>360) {test_angle=0;}
  // test_moon_angle=test_moon_angle+10; if (test_moon_angle>360) {test_moon_angle=0;}
}

int astro_stat_text_0 = RGB_COLOR16(128,0,0);
int astro_stat_border_0 = RGB_COLOR16(0,128,0);
int astro_stat_target_0 = RGB_COLOR16(255,0,0);

void clearAstroStats() {

  tft.drawRect(2, 11, 42, 13, TFT_BLACK);
  tft.drawRect(tft.width()-44, 11, 42, 13, TFT_BLACK);
  tft.drawRect(2, tft.height()-15, 42, 13, TFT_BLACK);
  tft.drawRect(tft.width()-44, tft.height()-15, 42, 13, TFT_BLACK);

  canvas38x8.clear();
  display.setColor(astro_stat_text_0);
  canvas38x8.printFixed(0, 0, String( String("")).c_str(), STYLE_BOLD);
  display.drawCanvas(4, 14, canvas38x8);

  canvas38x8.clear();
  display.setColor(astro_stat_text_0);
  canvas38x8.printFixed(0, 0, String( String("")).c_str(), STYLE_BOLD);
  display.drawCanvas(tft.width()-42, 14, canvas38x8);

  canvas38x8.clear();
  display.setColor(astro_stat_text_0);
  canvas38x8.printFixed(0, 0, String( String("")).c_str(), STYLE_BOLD);
  display.drawCanvas(4, tft.height()-12, canvas38x8);

  canvas38x8.clear();
  display.setColor(astro_stat_text_0);
  canvas38x8.printFixed(0, 0, String( String("")).c_str(), STYLE_BOLD);
  display.drawCanvas(tft.width()-42, tft.height()-12, canvas38x8);
}

// ----------------------------------------------------------------------------------------------------------------
//                                                                                            DRAW ASTROCLOCK STATS
// ----------------------------------------------------------------------------------------------------------------

bool clear_astro_stats=false;
bool clear_sun_target=false;
bool clear_mercury_target=false;
bool clear_venus_target=false;
bool clear_earth_target=false;
bool clear_moon_target=false;
bool clear_mars_target=false;
bool clear_jupiter_target=false;
bool clear_saturn_target=false;
bool clear_uranus_target=false;
bool clear_neptune_target=false;

void drawAstroclockStats(double rise, double set, double az, double alt, bool enabled) {

  // --------------------------------------------
  // de-emphasize target
  // --------------------------------------------
  if (clear_sun_target==true)     {tft.drawRect(sun_ui_x-2, sun_ui_y-2, sun_sprite_size+5, sun_sprite_size+5, TFT_BLACK); clear_sun_target=false;}
  if (clear_mercury_target==true) {tft.drawRect(mercury_ui_x-2, mercury_ui_y-2, mercury_sprite_size+5, mercury_sprite_size+5, TFT_BLACK); clear_mercury_target=false;}
  if (clear_venus_target==true)   {tft.drawRect(venus_ui_x-2, venus_ui_y-2, venus_sprite_size+5, venus_sprite_size+5, TFT_BLACK); clear_venus_target=false;}
  if (clear_earth_target==true)   {tft.drawRect(earth_ui_x-2, earth_ui_y-2, earth_sprite_size+5, earth_sprite_size+5, TFT_BLACK); clear_earth_target=false;}
  if (clear_moon_target==true)    {tft.drawRect(moon_ui_x-2, moon_ui_y-2, moon_sprite_size+5, moon_sprite_size+5, TFT_BLACK); clear_moon_target=false;}
  if (clear_mars_target==true)    {tft.drawRect(mars_ui_x-2, mars_ui_y-2, mars_sprite_size+5, mars_sprite_size+5, TFT_BLACK); clear_mars_target=false;}
  if (clear_jupiter_target==true) {tft.drawRect(jupiter_ui_x-2, jupiter_ui_y-2, jupiter_sprite_size+5, jupiter_sprite_size+5, TFT_BLACK); clear_jupiter_target=false;}
  if (clear_saturn_target==true)  {tft.drawRect(saturn_ui_x-2, saturn_ui_y-2, saturn_sprite_size+5, saturn_sprite_size+5, TFT_BLACK); clear_saturn_target=false;}
  if (clear_uranus_target==true)  {tft.drawRect(uranus_ui_x-2, uranus_ui_y-2, uranus_sprite_size+5, uranus_sprite_size+5, TFT_BLACK); clear_uranus_target=false;}
  if (clear_neptune_target==true) {tft.drawRect(neptune_ui_x-2, neptune_ui_y-2, neptune_sprite_size+5, neptune_sprite_size+5, TFT_BLACK); clear_neptune_target=false;}

  // --------------------------------------------
  // clear stats
  // --------------------------------------------
  if      (astroclock_key==0) {if (clear_astro_stats==true) {clearAstroStats(); clear_astro_stats=false;}}
  else if (astroclock_key==4) {if (clear_astro_stats==true) {clearAstroStats(); clear_astro_stats=false;}}
  else                        {}

  // --------------------------------------------
  // emphasize target
  // --------------------------------------------
  if      (astroclock_key==1)  {clear_sun_target=true;     clear_astro_stats=true; tft.drawRect(sun_ui_x-2, sun_ui_y-2, sun_sprite_size+5, sun_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==2)  {clear_mercury_target=true; clear_astro_stats=true; tft.drawRect(mercury_ui_x-2, mercury_ui_y-2, mercury_sprite_size+5, mercury_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==3)  {clear_venus_target=true;   clear_astro_stats=true; tft.drawRect(venus_ui_x-2, venus_ui_y-2, venus_sprite_size+5, venus_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==4)  {clear_earth_target=true;                           tft.drawRect(earth_ui_x-2, earth_ui_y-2, earth_sprite_size+5, earth_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==5)  {clear_moon_target=true;    clear_astro_stats=true; tft.drawRect(moon_ui_x-2, moon_ui_y-2, moon_sprite_size+5, moon_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==6)  {clear_mars_target=true;    clear_astro_stats=true; tft.drawRect(mars_ui_x-2, mars_ui_y-2, mars_sprite_size+5, mars_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==7)  {clear_jupiter_target=true; clear_astro_stats=true; tft.drawRect(jupiter_ui_x-2, jupiter_ui_y-2, jupiter_sprite_size+5, jupiter_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==8)  {clear_saturn_target=true;  clear_astro_stats=true; tft.drawRect(saturn_ui_x-2, saturn_ui_y-2, saturn_sprite_size+5, saturn_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==9)  {clear_uranus_target=true;  clear_astro_stats=true; tft.drawRect(uranus_ui_x-2, uranus_ui_y-2, uranus_sprite_size+5, uranus_sprite_size+5, astro_stat_target_0);}
  else if (astroclock_key==10) {clear_neptune_target=true; clear_astro_stats=true; tft.drawRect(neptune_ui_x-2, neptune_ui_y-2, neptune_sprite_size+5, neptune_sprite_size+5, astro_stat_target_0);}

  // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  // main stats
  // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  if (astroclock_key==0) {
    // astro_stat_text_0 = RGB_COLOR16(0,128,0); astro_stat_border_0 = RGB_COLOR16(0,0,128);
    // // --------------------------------------------
    // // borders
    // // --------------------------------------------
    // tft.drawRect(2, 11, 42, 13, astro_stat_border_0);
    // tft.drawRect(tft.width()-44, 11, 42, 13, astro_stat_border_0);
    // tft.drawRect(2, tft.height()-15, 42, 13, astro_stat_border_0);
    // tft.drawRect(tft.width()-44, tft.height()-15, 42, 13, astro_stat_border_0);
    // // --------------------------------------------
    // // top left 
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(4, 14, canvas38x8);
    // // --------------------------------------------
    // // top right
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(tft.width()-42, 14, canvas38x8);
    // // --------------------------------------------
    // // bottom left
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(4, tft.height()-12, canvas38x8);
    // // --------------------------------------------
    // // bottom right
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(tft.width()-42, tft.height()-12, canvas38x8);
  }
  // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  // earth stats
  // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  else if (astroclock_key==4) {
    // astro_stat_text_0 = RGB_COLOR16(0,128,0); astro_stat_border_0 = RGB_COLOR16(0,0,128);
    // // --------------------------------------------
    // // borders
    // // --------------------------------------------
    // tft.drawRect(2, 11, 42, 13, astro_stat_border_0);
    // tft.drawRect(tft.width()-44, 11, 42, 13, astro_stat_border_0);
    // tft.drawRect(2, tft.height()-15, 42, 13, astro_stat_border_0);
    // tft.drawRect(tft.width()-44, tft.height()-15, 42, 13, astro_stat_border_0);
    // // --------------------------------------------
    // // top left 
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(4, 14, canvas38x8);
    // // --------------------------------------------
    // // top right
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(tft.width()-42, 14, canvas38x8);
    // // --------------------------------------------
    // // bottom left
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(4, tft.height()-12, canvas38x8);
    // // --------------------------------------------
    // // bottom right
    // // --------------------------------------------
    // canvas38x8.clear();
    // display.setColor(astro_stat_text_0);
    // canvas38x8.printFixed(0, 0, String( String("") + String() ).c_str(), STYLE_BOLD);
    // display.drawCanvas(tft.width()-42, tft.height()-12, canvas38x8);
  }
  // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  // other stats
  // -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  else {
    // --------------------------------------------
    // tracking enabled
    // --------------------------------------------
    if (enabled==true) {
      if (alt>=0) {astro_stat_text_0 = RGB_COLOR16(0,128,0); astro_stat_border_0 = RGB_COLOR16(0,0,128);}
      else {astro_stat_text_0 = RGB_COLOR16(128,0,0); astro_stat_border_0 = RGB_COLOR16(0,128,0);}}
    else {astro_stat_text_0 = RGB_COLOR16(128,0,0); astro_stat_border_0 = RGB_COLOR16(0,0,128);}
    // --------------------------------------------
    // borders
    // --------------------------------------------
    tft.drawRect(2, 11, 42, 13, astro_stat_border_0);
    tft.drawRect(tft.width()-44, 11, 42, 13, astro_stat_border_0);
    tft.drawRect(2, tft.height()-15, 42, 13, astro_stat_border_0);
    tft.drawRect(tft.width()-44, tft.height()-15, 42, 13, astro_stat_border_0);
    // --------------------------------------------
    // top left 
    // --------------------------------------------
    canvas38x8.clear();
    display.setColor(astro_stat_text_0);
    canvas38x8.printFixed(0, 0, String( String("") + String(padDigitsDoubleZero(rise)) ).c_str(), STYLE_BOLD);
    display.drawCanvas(4, 14, canvas38x8);
    // --------------------------------------------
    // top right
    // --------------------------------------------
    canvas38x8.clear();
    display.setColor(astro_stat_text_0);
    canvas38x8.printFixed(0, 0, String( String("") + String(padDigitsDoubleZero(set)) ).c_str(), STYLE_BOLD);
    display.drawCanvas(tft.width()-42, 14, canvas38x8);
    // --------------------------------------------
    // bottom left
    // --------------------------------------------
    canvas38x8.clear();
    display.setColor(astro_stat_text_0);
    canvas38x8.printFixed(0, 0, String( String("") + String(az) ).c_str(), STYLE_BOLD);
    display.drawCanvas(4, tft.height()-12, canvas38x8);
    // --------------------------------------------
    // bottom right
    // --------------------------------------------
    canvas38x8.clear();
    display.setColor(astro_stat_text_0);
    canvas38x8.printFixed(0, 0, String( String("") + String(alt) ).c_str(), STYLE_BOLD);
    display.drawCanvas(tft.width()-42, tft.height()-12, canvas38x8);
  }
}

void drawMeteorWarning() {
  // ------------------------------------------------------
  // yellow: in datetime range. red: in peak datetime range
  // ------------------------------------------------------
  canvas8x8.clear();
  display.setColor(TFT_BLACK);
  tft.drawRect(3, 26, 12, 12, TFT_BLACK);
  if (sumMeteorShowerWarning()==true) {display.setColor(RGB_COLOR16(156,156,0)); tft.drawRect(3, 26, 12, 12, RGB_COLOR16(156,156,0));}
  if (sumMeteorShowerPeakWarning()==true) {display.setColor(RGB_COLOR16(156,0,0)); tft.drawRect(3, 26, 12, 12, RGB_COLOR16(156,0,0));}
  canvas8x8.printFixed(0, 0, "M", STYLE_BOLD);
  display.drawCanvas(5, 28, canvas8x8);
}

// ----------------------------------------------------------------------------------------------------------------
//                                                                                                        UPDATE UI
// ----------------------------------------------------------------------------------------------------------------
/*
This UI is designed for a very small, low pixel panel for performance with ESP32 while considering everything else
the ESP32 has to do running SatIO. If upgrading SatIO to a more moreful chip then the panel may also be considered
in regards to a higher pixel, larger panel, in which case much of the math used to display the same, reimplemented
with more detail and a larger scale. For example Planets are represented by pixels on the small panel currently in
use, and could be represented any other way with much higher detail on higher performance hardware, using the same
math.
*/

bool startup_draw_planets=false;

void UpdateUI(void * pvParamters) {

  while (1) {

  // systemData.serial_command=true; // temporary test

  // ----------------------------------------------------------------------------------------------------------------------
  // used to provide indicators enough time to be displayed while also not blocking requestControlPad() called in main loop
  // ----------------------------------------------------------------------------------------------------------------------
  if (wait_1S_to_update_ui==true) {delay(1000);}
  wait_1S_to_update_ui=false;

  // -----------------------------------------------------------------
  //                                         UPDATE UI COMPLETION FLAG
  // -----------------------------------------------------------------
  update_ui_complete=false;

  // -----------------------------------------------------------------
  //                                                   OLED PROTECTION
  // -----------------------------------------------------------------

  // oled protection: disable writes while display is cleared, so that the screen stays cleared.
  if (systemData.display_auto_off==true) {
    if (satData.rtc_unixtime >= unixtime_i2C_reponse+systemData.display_timeout) {update_ui=false;}
    else {update_ui=true;}
  }
  else {update_ui=true;}

  // -----------------------------------------------------------------
  //                                                 DEVELOPER OPTIONS
  // -----------------------------------------------------------------

  // uncomment to debug. this may damage an OLED display if left uncommented.
  // update_ui=true;
  // uncomment to debug
  // menu_page=page_CD74HC4067_main; // uncomment to debug

  // -----------------------------------------------------------------
  //                                                   UPDATE UI PAGES
  // -----------------------------------------------------------------

  if (update_ui==true) {
    // Serial.println("[update_ui] " + String(update_ui));

    // -----------------------------------------------------------------
    //                                                         NONE PAGE
    // -----------------------------------------------------------------
    if (menu_page==-1) {
      // ---------------------------------------------------------------
      // static data
      // ---------------------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page;
        display.clear();
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                        HOME PAGE
    // ----------------------------------------------------------------------------------------------------------------
    // this page has been mostly left for last while the human interface functionality has been built in. 
    // ----------------------------------------------------------------------------------------------------------------
    if (menu_page==page_home) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page;
        display.clear();
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(118, 0, 9);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(0, 0);}
      else {DisplaySignal(0, 0);}
      DisplayDebugSymbol(15, 0);
      // ------------------------------------------------
      // local time
      // ------------------------------------------------
      if (crunching_time_data==false) {
        canvas56x8.clear();
        display.setColor(systemData.color_title);
        canvas56x8.printFixed(0, 0, String(" " + satData.formatted_local_time).c_str(), STYLE_BOLD);
        display.drawCanvas(34, 0, canvas56x8);
      }
      // ------------------------------------------------
      // feature standard
      // ------------------------------------------------
      if (systemData.index_home_page_feature==0) {
        // ------------------------------------------------
        // local date
        // ------------------------------------------------
        if (crunching_time_data==false) {
          canvas76x8.clear();
          display.setColor(systemData.color_title);
          canvas76x8.printFixed(0, 0, String(satData.formatted_local_date).c_str(), STYLE_BOLD);
          display.drawCanvas(34, 12, canvas76x8);
        }
      }
      // ------------------------------------------------
      // feature astronarium
      // ------------------------------------------------
      else if (systemData.index_home_page_feature==1) {
        if (ui_track_planet_period==true) {
          ui_track_planet_period=false;

          // ---------------------------------------------------------------------------------------------------------
          // gather initial ui x,y information on startup (temporary until a draw sequence has been fully ascertained)
          // this prevents initial moon orbit circle persisting after x,y have been properly set.
          // ---------------------------------------------------------------------------------------------------------
          if (startup_draw_planets==true) {
            drawZodiac();       // behind everything
            drawOrbitalPaths(); // behind zenith and planets
            drawEarthZenith();  // behind planets
            // ------------------------------------------------
            // astro stat
            // ------------------------------------------------
            if (astroclock_key==0)       {drawAstroclockStats(0,0,0,0,true);}
            else if (astroclock_key==1)  {drawAstroclockStats(siderealPlanetData.sun_r,siderealPlanetData.sun_s,siderealPlanetData.sun_az,siderealPlanetData.sun_alt,systemData.sidereal_track_sun);}
            else if (astroclock_key==2)  {drawAstroclockStats(siderealPlanetData.mercury_r,siderealPlanetData.mercury_s,siderealPlanetData.mercury_az,siderealPlanetData.mercury_alt,systemData.sidereal_track_mercury);}
            else if (astroclock_key==3)  {drawAstroclockStats(siderealPlanetData.venus_r,siderealPlanetData.venus_s,siderealPlanetData.venus_az,siderealPlanetData.venus_alt,systemData.sidereal_track_venus);}
            else if (astroclock_key==4)  {drawAstroclockStats(0,0,0,0,true);}
            else if (astroclock_key==5)  {drawAstroclockStats(siderealPlanetData.moon_r,siderealPlanetData.moon_s,siderealPlanetData.moon_az,siderealPlanetData.moon_alt,systemData.sidereal_track_moon);}
            else if (astroclock_key==6)  {drawAstroclockStats(siderealPlanetData.mars_r,siderealPlanetData.mars_s,siderealPlanetData.mars_az,siderealPlanetData.mars_alt,systemData.sidereal_track_mars);}
            else if (astroclock_key==7)  {drawAstroclockStats(siderealPlanetData.jupiter_r,siderealPlanetData.jupiter_s,siderealPlanetData.jupiter_az,siderealPlanetData.jupiter_alt,systemData.sidereal_track_jupiter);}
            else if (astroclock_key==8)  {drawAstroclockStats(siderealPlanetData.saturn_r,siderealPlanetData.saturn_s,siderealPlanetData.saturn_az,siderealPlanetData.saturn_alt,systemData.sidereal_track_saturn);}
            else if (astroclock_key==9)  {drawAstroclockStats(siderealPlanetData.uranus_r,siderealPlanetData.uranus_s,siderealPlanetData.uranus_az,siderealPlanetData.uranus_alt,systemData.sidereal_track_uranus);}
            else if (astroclock_key==10) {drawAstroclockStats(siderealPlanetData.neptune_r,siderealPlanetData.neptune_s,siderealPlanetData.neptune_az,siderealPlanetData.neptune_alt,systemData.sidereal_track_neptune);}
          }
          // ------------------------------------------------
          // draw planets on top
          // ------------------------------------------------
          drawPlanets();
          startup_draw_planets=true;
          // ------------------------------------------------
          // draw meteor warning
          // ------------------------------------------------
          drawMeteorWarning();
        }
      }
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                    SETTINGS PAGE
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_main_menu) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page;
        display.clear();
        drawMainBorder();
        drawGeneralTitle("SETTINGS", systemData.color_title, systemData.color_border);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_content);
        display.setColor(systemData.color_menu_border);
        menuMain.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuMain.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                         MATRIX SWITCH LOGIC PAGE
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_matrix_logic_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("MATRIX", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 39, 127); // 0
        display.drawHLine(1, 54, 127); // 1
        display.drawHLine(1, 101, 127); // x from real x
        display.drawVLine(64, 40, 53); // split enabled fom active 
        display.drawVLine(14, 55, 127); // split value names from values
        // ------------------------------------------------
        // matrix switch function name
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "F", STYLE_BOLD);
        display.drawCanvas(3, 58, canvas8x8);
        // ------------------------------------------------
        // matrix switch function x
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "X", STYLE_BOLD);
        display.drawCanvas(3, 68, canvas8x8);
        // ------------------------------------------------
        // matrix switch function y
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Y", STYLE_BOLD);
        display.drawCanvas(3, 78, canvas8x8);
        // ------------------------------------------------
        // matrix switch function z
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Z", STYLE_BOLD);
        display.drawCanvas(3, 88, canvas8x8);
        // ------------------------------------------------
        // matrix switch function real x
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "X", STYLE_BOLD);
        display.drawCanvas(3, 105, canvas8x8);
        // ------------------------------------------------
        // matrix switch function real y
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Y", STYLE_BOLD);
        display.drawCanvas(3, 115, canvas8x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix switch enabled
      // ------------------------------------------------
      canvas54x8.clear();
      if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
        display.setColor(RGB_COLOR16(0,0,255));
        canvas54x8.printFixed(1, 1, " ENABLED", STYLE_BOLD);
        display.drawCanvas(4, 42, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch disabled
      // ------------------------------------------------
      else {
        display.setColor(RGB_COLOR16(64,64,64));
        canvas54x8.printFixed(1, 1, "DISABLED", STYLE_BOLD);
        display.drawCanvas(7, 42, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch state high
      // ------------------------------------------------
      canvas54x8.clear();
      if (matrixData.matrix_switch_state[0][menuMatrixSwitchSelect.selection()]==true) {
        display.setColor(RGB_COLOR16(0,255,0));
        canvas54x8.printFixed(1, 1, " ACTIVE", STYLE_BOLD);
        display.drawCanvas(70, 42, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch state low
      // ------------------------------------------------
      else {
        display.setColor(RGB_COLOR16(64,64,64));
        canvas54x8.printFixed(1, 1, "INACTIVE", STYLE_BOLD);
        display.drawCanvas(70, 42, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch function name
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], STYLE_BOLD);
      display.drawCanvas(17, 58, canvas108x8);
      // ------------------------------------------------
      // matrix switch function x
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][0], 10).c_str(), STYLE_BOLD);
      display.drawCanvas(17, 68, canvas108x8);
      // ------------------------------------------------
      // matrix switch function y
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][1], 10).c_str(), STYLE_BOLD);
      display.drawCanvas(17, 78, canvas108x8);
      // ------------------------------------------------
      // matrix switch function z
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][2], 10).c_str(), STYLE_BOLD);
      display.drawCanvas(17, 88, canvas108x8);
      // ------------------------------------------------
      // matrix switch function real x
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, getRelatedX(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]).c_str(), STYLE_BOLD);
      display.drawCanvas(17, 105, canvas108x8);
      // ------------------------------------------------
      // matrix switch function real y
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, getRelatedY(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]).c_str(), STYLE_BOLD);
      display.drawCanvas(17, 115, canvas108x8);
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      
      // ------------------------------------------------------------------------------------------------------------
      // clear any previously highlighted menus
      // ------------------------------------------------------------------------------------------------------------
      if (previous_menu_column_selection!=menu_column_selection) {
        canvas126x24.clear();
        display.setColor(systemData.color_content);
        display.drawCanvas(1, 13, canvas126x24);
        previous_menu_column_selection=menu_column_selection;
      }

      // ------------------------------------------------------------------------------------------------------------
      // matrix switch port button
      // ------------------------------------------------------------------------------------------------------------
      if (menu_column_selection==1) {
        // --------------------------------------------
        // draw highlighted
        // --------------------------------------------
        memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
        strcpy(TMP_UI_DATA_0, "P");
        strcat(TMP_UI_DATA_0, String(matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]).c_str());
        canvas19x8.clear();
        // --------------------------------------------
        // indicate if port number is -1 (none)
        // --------------------------------------------
        if (matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]>=0) {display.setColor(RGB_COLOR16(0,0,255));}
        else {display.setColor(RGB_COLOR16(255,0,0));}
        canvas19x8.printFixed(1, 1, TMP_UI_DATA_0, STYLE_BOLD);
        display.drawCanvas(38, 21, canvas19x8);
        display.setColor(systemData.color_menu_content);
        display.drawRect(35, 18, 62, 18+15);
      }
      else {
        // --------------------------------------------
        // draw unhighlighted
        // --------------------------------------------
        memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
        strcpy(TMP_UI_DATA_0, "P");
        strcat(TMP_UI_DATA_0, String(matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]).c_str());
        canvas19x8.clear();
        // --------------------------------------------
        // indicate if port number is -1 (none)
        // --------------------------------------------
        if (matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]>=0) {display.setColor(RGB_COLOR16(0,0,255));}
        else {display.setColor(RGB_COLOR16(255,0,0));}
        canvas19x8.printFixed(1, 1, TMP_UI_DATA_0, STYLE_BOLD);
        display.drawCanvas(39, 21, canvas19x8);
      }
      // ------------------------------------------------------------------------------------------------------------
      // matrix switch enable/disable button
      // ------------------------------------------------------------------------------------------------------------
      if (menu_column_selection==2) {
        // --------------------------------------------
        // draw highlighted
        // --------------------------------------------
        canvas8x8.clear();
        if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(0,0,255));
          canvas8x8.printFixed(1, 1, "E", STYLE_BOLD );
        }
        else if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==false) {
          display.setColor(RGB_COLOR16(255,0,0));
          canvas8x8.printFixed(2, 1, "D", STYLE_BOLD );
        }
        display.drawCanvas(68, 21, canvas8x8);
        display.setColor(systemData.color_menu_content);
        display.drawRect(65, 18, 80, 18+15);
      }
      else {
        // --------------------------------------------
        // draw unhighlighted
        // --------------------------------------------
        canvas8x8.clear();
        if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(0,0,255));
          canvas8x8.printFixed(1, 1, "E", STYLE_BOLD);
        }
        else if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==false) {
          display.setColor(RGB_COLOR16(255,0,0));
          canvas8x8.printFixed(2, 1, "D", STYLE_BOLD);
        }
        display.drawCanvas(68, 21, canvas8x8);
      }
      // ------------------------------------------------------------------------------------------------------------
      // matrix switch inverted logic button
      // ------------------------------------------------------------------------------------------------------------
      if (menu_column_selection==3) {
        // --------------------------------------------
        // draw highlighted
        // --------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_content);
        if (matrixData.matrix_switch_inverted_logic[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(255,255,0));
          canvas8x8.printFixed(2, 1, "I", STYLE_BOLD ); // inverted function logic (not switch logic, this is per function on a switch) 
        }
        else if (matrixData.matrix_switch_inverted_logic[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]==false) {
          display.setColor(RGB_COLOR16(0,0,255));
          canvas8x8.printFixed(1, 1, "S", STYLE_BOLD ); // standard function logic (not switch logic, this is per function on a switch) 
        }
        display.drawCanvas(84, 21, canvas8x8);
        display.setColor(systemData.color_menu_content);
        display.drawRect(82, 18, 96, 18+15);
      }
      else {
        // --------------------------------------------
        // draw unhighlighted
        // --------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_content);
        if (matrixData.matrix_switch_inverted_logic[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(255,255,0));
          canvas8x8.printFixed(2, 1, "I", STYLE_BOLD); // inverted function logic (not switch logic, this is per function on a switch) 
        }
        else if (matrixData.matrix_switch_inverted_logic[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]==false) {
          display.setColor(RGB_COLOR16(0,0,255));
          canvas8x8.printFixed(1, 1, "S", STYLE_BOLD); // standard function logic (not switch logic, this is per function on a switch) 
        }
        display.drawCanvas(84, 21, canvas8x8);
      }

      if (interaction_updateui==true) {
        // ------------------------------------------------------------------------------------------------------------
        // matrix switch menu
        // ------------------------------------------------------------------------------------------------------------
        if (menu_column_selection==0) {
          // --------------------------------------------
          // draw highlighted
          // --------------------------------------------
          if (interaction_updateui==true) {
            interaction_updateui=false;
            display.setColor(systemData.color_menu_border);
            menuMatrixSwitchSelect.showMenuBorder(display);
            display.setColor(systemData.color_menu_content);
            menuMatrixSwitchSelect.showMenuContent(display);
          }
        }
        else {
          // --------------------------------------------
          // draw unhighlighted
          // --------------------------------------------
          memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
          strcpy(TMP_UI_DATA_0, "");
          strcat(TMP_UI_DATA_0, menuMatrixSwitchSelectItems[menuMatrixSwitchSelect.selection()]);
          canvas19x8.clear();
          display.setColor(systemData.color_menu_content);
          canvas19x8.printFixed(1, 1, TMP_UI_DATA_0, STYLE_BOLD);
          display.drawCanvas(10, 21, canvas19x8);
        }

        // ------------------------------------------------------------------------------------------------------------
        // matrix switch function menu
        // ------------------------------------------------------------------------------------------------------------
        if (menu_column_selection==4) {
          // --------------------------------------------
          // draw highlighted
          // --------------------------------------------
          if (interaction_updateui==true) {
            interaction_updateui=false;
            display.setColor(systemData.color_menu_border);
            menuMatrixFunctionSelect.showMenuBorder(display);
            display.setColor(systemData.color_menu_content);
            menuMatrixFunctionSelect.showMenuContent(display);
          }
        }
        else {
          // --------------------------------------------
          // draw unhighlighted
          // --------------------------------------------
          memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
          strcpy(TMP_UI_DATA_0, "");
          strcat(TMP_UI_DATA_0, menuMatrixFunctionSelectItems[menuMatrixFunctionSelect.selection()]);
          canvas19x8.clear();
          display.setColor(systemData.color_menu_content);
          canvas19x8.printFixed(5, 1, TMP_UI_DATA_0, STYLE_BOLD);
          display.drawCanvas(91+7, 21, canvas19x8);
        }
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                        OVERVIEW MATRIX SWITCHING
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_overview_matrix_switching) {
      // --------------------------------------------------
      // static data
      // --------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page;
        display.clear();
        drawMainBorder();
        drawGeneralTitle("MATRIX", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawRect(0, 12, 127, 26);
        display.drawVLine(64, 13, 25);

        display.drawHLine(1, 51, 127);
        display.drawHLine(1, 77, 127);
        display.drawHLine(1, 102, 127);

        display.drawVLine(25, 26, 127);
        display.drawVLine(51, 26, 127);
        display.drawVLine(76, 26, 127);
        display.drawVLine(102, 26, 127);
      }
      // --------------------------------------------------
      // dynamic data
      // --------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      DisplaySignal(3, 3);
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      int size=23;
      int start=1;
      for (int i=0; i<5; i++) {
        // ------------------------------------------------
        // enabled/disabled
        // ------------------------------------------------
        canvas60x8.clear();
        display.setColor(systemData.color_content);
        canvas60x8.printFixed((60/2)-((strlen(String("E" + String(matrixData.matrix_enabled_i) + " D" + String(matrixData.matrix_disabled_i)).c_str())/2)*6), 1, String("E" + String(matrixData.matrix_enabled_i) + " D" + String(matrixData.matrix_disabled_i)).c_str(), STYLE_BOLD);
        display.drawCanvas(1, 15, canvas60x8);
        // ------------------------------------------------
        // on/off
        // ------------------------------------------------
        canvas60x8.clear();
        display.setColor(systemData.color_content);
        canvas60x8.printFixed((60/2)-((strlen(String("A" + String(matrixData.matrix_active_i) + " I" + String(matrixData.matrix_inactive_i)).c_str())/2)*6), 1, String("A" + String(matrixData.matrix_active_i) + " I" + String(matrixData.matrix_inactive_i)).c_str(), STYLE_BOLD);
        display.drawCanvas(65, 15, canvas60x8);
        // ------------------------------------------------
        // 0-4 switch number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_enabled[0][i]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String("S" + String(i)).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 30, canvas21x8);
        // ------------------------------------------------
        // 0-4 port number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_state[0][i]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String(matrixData.matrix_port_map[0][i]).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 40, canvas21x8);
        // ------------------------------------------------
        // 5-9 switch number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_enabled[0][i+5]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String("S" + String(i+5)).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 56, canvas21x8);
        // ------------------------------------------------
        // 5-9 port number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_state[0][i+5]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String(matrixData.matrix_port_map[0][i+5]).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 66, canvas21x8);
        // ------------------------------------------------
        // 10-14 switch number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_enabled[0][i+10]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String("S" + String(i+10)).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 82, canvas21x8);
        // ------------------------------------------------
        // 10-14 port number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_state[0][i+10]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String(matrixData.matrix_port_map[0][i+10]).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 92, canvas21x8);
        // ------------------------------------------------
        // 15-19 switch number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_enabled[0][i+15]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String("S" + String(i+15)).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 107, canvas21x8);
        // ------------------------------------------------
        // 15-19 port number
        // ------------------------------------------------
        canvas21x8.clear();
        display.setColor(RGB_COLOR16(64,64,64));
        if (matrixData.matrix_switch_state[0][i+15]==true) {display.setColor(RGB_COLOR16(0,255,0));}
        canvas21x8.printFixed(0, 0, String(matrixData.matrix_port_map[0][i+15]).c_str(), STYLE_BOLD );
        display.drawCanvas(start+1, 117, canvas21x8);
        // ------------------------------------------------
        // adjust
        // ------------------------------------------------
        start=start+26;
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                ENTER DIGITS PAGE
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_input_data) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if (enter_digits_key==1) {
        if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
          previous_menu_page=menu_page; display.clear();
          drawMainBorder();
          drawGeneralTitle("ENTER PORT", RGB_COLOR16(255,0,0), systemData.color_border);
          display.setColor(systemData.color_border);
          display.drawHLine(1, 24, 127); // below mfp
          display.drawVLine(64, 25, ui_content_2+4); // seperate enabled from active
          display.drawHLine(1, ui_content_2+5, 127); // below enabled and active
          display.drawHLine(1, 108, 127); // input
          // ------------------------------------------------
          // matrix switch number
          // ------------------------------------------------
          display.setColor(systemData.color_subtitle);
          memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
          strcpy(TMP_UI_DATA_0, "M");
          strcat(TMP_UI_DATA_0, String(menuMatrixFunctionSelect.selection()).c_str());
          strcat(TMP_UI_DATA_0, "   P");
          strcat(TMP_UI_DATA_0, String(matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]).c_str());
          canvas120x8.clear();
          canvas120x8.printFixed((125/2)-((strlen(TMP_UI_DATA_0)/2)*6), 1, TMP_UI_DATA_0, STYLE_BOLD);
          display.drawCanvas(1, ui_content_0-2, canvas120x8);
        }
        // ------------------------------------------------
        // dynamic data
        // ------------------------------------------------
        // ------------------------------------------------
        // load
        // ------------------------------------------------
        DisplayDiscreteLoadPercentage(115, 3, 10);
        // ------------------------------------------------
        // satellites & sync
        // ------------------------------------------------
        if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
        else {DisplaySignal(3, 3);}
        DisplayDebugSymbol(18, 3);
        // ------------------------------------------------
        // matrix switch enabled
        // ------------------------------------------------
        canvas54x8.clear();
        if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(0,0,255));
          canvas54x8.printFixed(1, 1, " ENABLED", STYLE_BOLD);
          display.drawCanvas(4, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch disabled
        // ------------------------------------------------
        else {
          display.setColor(RGB_COLOR16(64,64,64));
          canvas54x8.printFixed(1, 1, "DISABLED", STYLE_BOLD);
          display.drawCanvas(7, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch state high
        // ------------------------------------------------
        canvas54x8.clear();
        if (matrixData.matrix_switch_state[0][menuMatrixSwitchSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(0,255,0));
          canvas54x8.printFixed(1, 1, " ACTIVE", STYLE_BOLD);
          display.drawCanvas(70, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch state low
        // ------------------------------------------------
        else {
          display.setColor(RGB_COLOR16(64,64,64));
          canvas54x8.printFixed(1, 1, "INACTIVE", STYLE_BOLD);
          display.drawCanvas(70, ui_content_1+2, canvas54x8);
        }
      }
      
      // ------------------------------------------------
      // enter function x,y,z
      // ------------------------------------------------
      else if ((enter_digits_key==2) || (enter_digits_key==3) || (enter_digits_key==4)) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
        if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
          previous_menu_page=menu_page; display.clear();
          drawMainBorder();
          if (enter_digits_key==2)      {drawGeneralTitle("ENTER X", systemData.color_title, systemData.color_border);;}
          else if (enter_digits_key==3) {drawGeneralTitle("ENTER Y", systemData.color_title, systemData.color_border);;}
          else if (enter_digits_key==4) {drawGeneralTitle("ENTER Z", systemData.color_title, systemData.color_border);;}
          display.setColor(systemData.color_border);
          display.drawHLine(1, 24, 127); // below mfp
          display.drawVLine(64, 25, ui_content_2+4); // seperate enabled from active
          display.drawHLine(1, ui_content_2+5, 127); // above xyz
          display.drawVLine(14, ui_content_2+6, 107); // seperate subtitles from values
          display.drawHLine(1, ui_content_7-1, 127); // seperate xyz from real xy
          display.drawHLine(1, 108, 127); // input
          // ------------------------------------------------
          // matrix switch number
          // ------------------------------------------------
          display.setColor(systemData.color_subtitle);
          memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
          strcpy(TMP_UI_DATA_0, "M");
          strcat(TMP_UI_DATA_0, String(menuMatrixSwitchSelect.selection()).c_str());
          strcat(TMP_UI_DATA_0, "   F");
          strcat(TMP_UI_DATA_0, String(menuMatrixFunctionSelect.selection()).c_str());
          strcat(TMP_UI_DATA_0, "   P");
          strcat(TMP_UI_DATA_0, String(matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]).c_str());
          canvas120x8.clear();
          canvas120x8.printFixed((125/2)-((strlen(TMP_UI_DATA_0)/2)*6), 1, TMP_UI_DATA_0, STYLE_BOLD);
          display.drawCanvas(1, ui_content_0-2, canvas120x8);
          // ------------------------------------------------
          // matrix switch function name
          // ------------------------------------------------
          canvas8x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas8x8.printFixed(1, 1, "F", STYLE_BOLD);
          display.drawCanvas(3, ui_content_2+8, canvas8x8);
          // ------------------------------------------------
          // matrix switch function x
          // ------------------------------------------------
          canvas8x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas8x8.printFixed(1, 1, "X", STYLE_BOLD);
          display.drawCanvas(3, ui_content_3+8, canvas8x8);
          // ------------------------------------------------
          // matrix switch function y
          // ------------------------------------------------
          canvas8x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas8x8.printFixed(1, 1, "Y", STYLE_BOLD);
          display.drawCanvas(3, ui_content_4+8, canvas8x8);
          // ------------------------------------------------
          // matrix switch function z
          // ------------------------------------------------
          canvas8x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas8x8.printFixed(1, 1, "Z", STYLE_BOLD);
          display.drawCanvas(3, ui_content_5+8, canvas8x8);
          // ------------------------------------------------
          // matrix switch function real x
          // ------------------------------------------------
          canvas8x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas8x8.printFixed(1, 1, "X", STYLE_BOLD);
          display.drawCanvas(3, ui_content_7+1, canvas8x8);
          // ------------------------------------------------
          // matrix switch function real y
          // ------------------------------------------------
          canvas8x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas8x8.printFixed(1, 1, "Y", STYLE_BOLD);
          display.drawCanvas(3, ui_content_8+1, canvas8x8);
        }
        // ------------------------------------------------
        // dynamic data
        // ------------------------------------------------
        // ------------------------------------------------
        // load
        // ------------------------------------------------
        DisplayDiscreteLoadPercentage(115, 3, 10);
        // ------------------------------------------------
        // satellites & sync
        // ------------------------------------------------
        if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
        else {DisplaySignal(3, 3);}
        DisplayDebugSymbol(18, 3);
        // ------------------------------------------------
        // matrix switch enabled
        // ------------------------------------------------
        canvas54x8.clear();
        if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(0,0,255));
          canvas54x8.printFixed(1, 1, " ENABLED", STYLE_BOLD);
          display.drawCanvas(4, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch disabled
        // ------------------------------------------------
        else {
          display.setColor(RGB_COLOR16(64,64,64));
          canvas54x8.printFixed(1, 1, "DISABLED", STYLE_BOLD);
          display.drawCanvas(7, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch state high
        // ------------------------------------------------
        canvas54x8.clear();
        if (matrixData.matrix_switch_state[0][menuMatrixSwitchSelect.selection()]==true) {
          display.setColor(RGB_COLOR16(0,255,0));
          canvas54x8.printFixed(1, 1, " ACTIVE", STYLE_BOLD);
          display.drawCanvas(70, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch state low
        // ------------------------------------------------
        else {
          display.setColor(RGB_COLOR16(64,64,64));
          canvas54x8.printFixed(1, 1, "INACTIVE", STYLE_BOLD);
          display.drawCanvas(70, ui_content_1+2, canvas54x8);
        }
        // ------------------------------------------------
        // matrix switch function name
        // ------------------------------------------------
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], STYLE_BOLD);
        display.drawCanvas(17, ui_content_2+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function x
        // ------------------------------------------------
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][0], 10).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_3+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function y
        // ------------------------------------------------
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][1], 10).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_4+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function z
        // ------------------------------------------------
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][2], 10).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_5+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function real x
        // ------------------------------------------------
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, getRelatedX(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_7+1, canvas108x8);
        // ------------------------------------------------
        // matrix switch function real y
        // ------------------------------------------------
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, getRelatedY(matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()]).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_8+1, canvas108x8);
      }
      
      // --------------------------------------------------
      // enter utc offset
      // --------------------------------------------------
      else if (enter_digits_key==5) {
        // ------------------------------------------------
        // static data
        // ------------------------------------------------
        if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
          previous_menu_page=menu_page; display.clear();
          drawMainBorder();
          drawGeneralTitle("ENTER OFFSET", systemData.color_title, systemData.color_border);
          display.setColor(systemData.color_border);
          display.drawHLine(1, 28, 127);
          display.drawHLine(1, 108, 127);
          display.drawVLine(25, 13, 27);
        }
        // ------------------------------------------------
        // dynamic data
        // ------------------------------------------------
        // ------------------------------------------------
        // load
        // ------------------------------------------------
        DisplayDiscreteLoadPercentage(115, 3, 10);
        // ------------------------------------------------
        // satellites & sync
        // ------------------------------------------------
        if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
        else {DisplaySignal(3, 3);}
        DisplayDebugSymbol(18, 3);
        // ------------------------------------------------
        // utc second offset
        // ------------------------------------------------
        canvas19x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas19x8.printFixed(1, 1, "SEC", STYLE_BOLD);
        display.drawCanvas(3, ui_content_0, canvas19x8);
        display.setColor(systemData.color_content);
        canvas92x8.clear();
        canvas92x8.printFixed(1, 1, String(satData.utc_second_offset).c_str(), STYLE_BOLD);
        display.drawCanvas(28, ui_content_0, canvas92x8);
      }

      // --------------------------------------------------
      // enter meteor key
      // --------------------------------------------------
      else if (enter_digits_key==6) {
        // ------------------------------------------------
        // static data
        // ------------------------------------------------
        if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
          previous_menu_page=menu_page; display.clear();
          drawMainBorder();
          drawGeneralTitle("METEORS", systemData.color_title, systemData.color_border);
          display.setColor(systemData.color_border);
          display.drawHLine(1, 28, 127);  // below index
          display.drawHLine(1, 46, 127);  // below name
          display.drawHLine(1, 108, 127); // above input
          display.drawVLine(36, 46, 107); // between data
          display.drawHLine(1,  ui_content_4+19, 127); // below data

          canvas32x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas32x8.printFixed(0, 0, String("RANGE").c_str(), STYLE_BOLD);
          display.drawCanvas(3, ui_content_3+7, canvas32x8);

          canvas32x8.clear();
          display.setColor(systemData.color_subtitle);
          canvas32x8.printFixed(0, 0, String("PEAK").c_str(), STYLE_BOLD);
          display.drawCanvas(3, ui_content_4+7, canvas32x8);
          // static info
          // canvas32x8.clear();
          // display.setColor(systemData.color_content);
          // canvas32x8.printFixed(0, 0, String("Meteros per hour: 60-150.").c_str(), STYLE_BOLD);
          // display.drawCanvas(3, ui_content_7+1, canvas32x8);
        }
        // ------------------------------------------------
        // dynamic data
        // ------------------------------------------------
        // ------------------------------------------------
        // load
        // ------------------------------------------------
        DisplayDiscreteLoadPercentage(115, 3, 10);
        // ------------------------------------------------
        // satellites & sync
        // ------------------------------------------------
        if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
        else {DisplaySignal(3, 3);}
        DisplayDebugSymbol(18, 3);
        // ------------------------------------------------
        // meteor index
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas120x8.printFixed((125/2)-((strlen(String( String(meteor_index_key) + "/" + String(max_meteor_showers-1) ).c_str())/2)*6), 0, String( String(meteor_index_key) + "/" + String(max_meteor_showers-1) ).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_0+1, canvas120x8);
        // ------------------------------------------------
        // meteor name
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas120x8.printFixed((125/2)-((strlen(String(meteor_shower_names[meteor_index_key]).c_str())/2)*6), 0, String(meteor_shower_names[meteor_index_key]).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1+8, canvas120x8);
        // ------------------------------------------------
        // range: day/month -> day/month
        // ------------------------------------------------
        canvas80x8.clear();
        display.setColor(systemData.color_content);
        canvas80x8.printFixed(0, 0, String( String(meteor_shower_datetime[meteor_index_key][0][0]) + "/" + String(meteor_shower_datetime[meteor_index_key][0][1]) + " > " +
                                            String(meteor_shower_datetime[meteor_index_key][1][0]) + "/" + String(meteor_shower_datetime[meteor_index_key][1][1]) ).c_str(), STYLE_BOLD);
        display.drawCanvas(40, ui_content_3+7, canvas80x8);
        // ------------------------------------------------
        // peak range: day -> day
        // ------------------------------------------------
        canvas80x8.clear();
        display.setColor(systemData.color_content);
        // canvas80x8.printFixed(0, 0, String( String(meteor_shower_peaks[meteor_index_key][0][0]) + " > " + String(meteor_shower_peaks[meteor_index_key][1]) ).c_str(), STYLE_BOLD);
        canvas80x8.printFixed(0, 0, String( String(meteor_shower_peaks[meteor_index_key][0][0]) + "/" + String(meteor_shower_peaks[meteor_index_key][0][1]) + " > " +
                                    String(meteor_shower_peaks[meteor_index_key][1][0]) + "/" + String(meteor_shower_peaks[meteor_index_key][1][1]) ).c_str(), STYLE_BOLD);
        display.drawCanvas(40, ui_content_4+7, canvas80x8);
        // -----------------------------------------------------------------
        // warning: grey: out of datetiem range. yellow: in datetime range
        // -----------------------------------------------------------------
        if (meteor_shower_warning_system[meteor_index_key][0]==false && meteor_shower_warning_system[meteor_index_key][1]==false) {display.drawBitmap16(11, ui_content_7-3, 15, 15, image_data_meteor_15x15_grey);}
        else {
          if (meteor_shower_warning_system[meteor_index_key][0]==true) {display.drawBitmap16(11, ui_content_7-3, 15, 15, image_data_meteor_15x15_yellow);}
          if (meteor_shower_warning_system[meteor_index_key][1]==true) {display.drawBitmap16(11, ui_content_7-3, 15, 15, image_data_meteor_15x15_red);}
        }
        // canvas8x8.clear();
        // display.setColor(RGB_COLOR16(92,92,92));
        // tft.drawRect(12, ui_content_7-1, 12, 12, RGB_COLOR16(92,92,92));
        // if (meteor_shower_warning_system[meteor_index_key][0]==true) {display.setColor(RGB_COLOR16(156,156,0)); tft.drawRect(12, ui_content_7-1, 12, 12, RGB_COLOR16(156,156,0));}
        // if (meteor_shower_warning_system[meteor_index_key][1]==true) {display.setColor(RGB_COLOR16(156,0,0)); tft.drawRect(12, ui_content_7-1, 12, 12, RGB_COLOR16(156,0,0));}
        // canvas8x8.printFixed(0, 0, "M", STYLE_BOLD);
        // display.drawCanvas(14, ui_content_7+1, canvas8x8);
      }

      // --------------------------------------------------
      // enter volcano key
      // --------------------------------------------------
      else if (enter_digits_key==7) {
        // ------------------------------------------------
        // static data
        // ------------------------------------------------
        if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
          previous_menu_page=menu_page; display.clear();
          drawMainBorder();
          drawGeneralTitle("VOLCANOS", systemData.color_title, systemData.color_border);
          display.setColor(systemData.color_border);
          // display.drawHLine(1, 25, 127);  // below index
          // display.drawHLine(1, 46, 127);  // below name
          display.drawHLine(1, 108, 127); // above input
        }
        // ------------------------------------------------
        // dynamic data
        // ------------------------------------------------
        // ------------------------------------------------
        // load
        // ------------------------------------------------
        DisplayDiscreteLoadPercentage(115, 3, 10);
        // ------------------------------------------------
        // satellites & sync
        // ------------------------------------------------
        if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
        else {DisplaySignal(3, 3);}
        DisplayDebugSymbol(18, 3);

        // ------------------------------------------------
        // volcano index
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas120x8.printFixed((125/2)-((strlen(String( String(volcano_index_key) + "/" + String(max_volcanos-1) ).c_str())/2)*6), 0, String( String(volcano_index_key) + "/" + String(max_volcanos-1) ).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_0, canvas120x8);
        // ------------------------------------------------
        // volcano name
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_content);
        // canvas120x8.printFixed((125/2)-((strlen(String(getVolcanoName(volcano_index_key)).c_str())/2)*6), 0, String(getVolcanoName(volcano_index_key)).c_str(), STYLE_BOLD);
        canvas120x8.printFixed(0, 0, String(getVolcanoName(volcano_index_key)).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1+1, canvas120x8);
        // ------------------------------------------------
        // volcano location name
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_content);
        canvas120x8.printFixed(0, 0, String(volcano_loaction[volcano_index[volcano_index_key][0]]).c_str());
        display.drawCanvas(3, ui_content_2+1, canvas120x8);
        // ------------------------------------------------
        // volcano type
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_content);
        canvas120x8.printFixed(0, 0, String("T: " + String(volcano_type[volcano_index[volcano_index_key][1]])).c_str());
        display.drawCanvas(3, ui_content_3+1, canvas120x8);
        // ------------------------------------------------
        // volcano elevation
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_content);
        if (volcano_elevation[volcano_index_key]>=0) {canvas120x8.printFixed(0, 0, String("E: " + String(volcano_elevation[volcano_index_key]) + String(" AMSL")).c_str());}
        else {canvas120x8.printFixed(0, 0, String("E: " + String(volcano_elevation[volcano_index_key]) + String(" BMSL")).c_str());}
        display.drawCanvas(3, ui_content_4+1, canvas120x8);
        // ------------------------------------------------
        // volcano latitude
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_content);
        canvas120x8.printFixed(0, 0, String("Lat: " + String(volcano_lat_long[volcano_index_key][volcano_index[volcano_index_key][0]])).c_str());
        display.drawCanvas(3, ui_content_5+1, canvas120x8);
        // ------------------------------------------------
        // volcano longitude
        // ------------------------------------------------
        canvas120x8.clear();
        display.setColor(systemData.color_content);
        canvas120x8.printFixed(0, 0, String("Lon: " + String(volcano_lat_long[volcano_index_key][volcano_index[volcano_index_key][1]])).c_str());
        display.drawCanvas(3, ui_content_6+1, canvas120x8);
      }

      // --------------------------------------------------
      // draw input data
      // --------------------------------------------------
      display.setColor(RGB_COLOR16(0,255,0));
      canvas120x8.clear();
      canvas120x8.printFixed((125/2)-((strlen(String(input_data, 10).c_str())/2)*6), 1, String(input_data, 10).c_str(), STYLE_BOLD);
      display.drawCanvas(2, 112, canvas120x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                              MATRIX SWITCH SETUP
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_matrix_logic_select_setup) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();  
        drawMainBorder();
        drawGeneralTitle("SETUP", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127); // below mfp
        display.drawVLine(64, 25, ui_content_2+4); // seperate enabled from active
        display.drawHLine(1, ui_content_2+5, 127); // above xyz
        display.drawVLine(14, ui_content_2+6, ui_content_6+8); // seperate subtitles from values
        display.drawHLine(1, ui_content_6+9, 127); // menu
        // ------------------------------------------------
        // matrix switch number
        // ------------------------------------------------
        display.setColor(systemData.color_subtitle);
        memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
        strcpy(TMP_UI_DATA_0, "M");
        strcat(TMP_UI_DATA_0, String(menuMatrixSwitchSelect.selection()).c_str());
        strcat(TMP_UI_DATA_0, "   F");
        strcat(TMP_UI_DATA_0, String(menuMatrixFunctionSelect.selection()).c_str());
        strcat(TMP_UI_DATA_0, "   P");
        strcat(TMP_UI_DATA_0, String(matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]).c_str());
        canvas120x8.clear();
        canvas120x8.printFixed((125/2)-((strlen(TMP_UI_DATA_0)/2)*6), 1, TMP_UI_DATA_0, STYLE_BOLD);
        display.drawCanvas(1, ui_content_0-2, canvas120x8);
        // ------------------------------------------------
        // matrix switch function name
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "F", STYLE_BOLD);
        display.drawCanvas(3, ui_content_2+8, canvas8x8);
        // ------------------------------------------------
        // matrix switch function x
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "X", STYLE_BOLD);
        display.drawCanvas(3, ui_content_3+8, canvas8x8);
        // ------------------------------------------------
        // matrix switch function y
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Y", STYLE_BOLD);
        display.drawCanvas(3, ui_content_4+8, canvas8x8);
        // ------------------------------------------------
        // matrix switch function z
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Z", STYLE_BOLD);
        display.drawCanvas(3, ui_content_5+8, canvas8x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix switch enabled
      // ------------------------------------------------
      canvas54x8.clear();
      if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
        display.setColor(RGB_COLOR16(0,0,255));
        canvas54x8.printFixed(1, 1, " ENABLED", STYLE_BOLD);
        display.drawCanvas(4, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch disabled
      // ------------------------------------------------
      else {
        display.setColor(RGB_COLOR16(64,64,64));
        canvas54x8.printFixed(1, 1, "DISABLED", STYLE_BOLD);
        display.drawCanvas(7, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch state high
      // ------------------------------------------------
      canvas54x8.clear();
      if (matrixData.matrix_switch_state[0][menuMatrixSwitchSelect.selection()]==true) {
        display.setColor(RGB_COLOR16(0,255,0));
        canvas54x8.printFixed(1, 1, " ACTIVE", STYLE_BOLD);
        display.drawCanvas(70, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch state low
      // ------------------------------------------------
      else {
        display.setColor(RGB_COLOR16(64,64,64));
        canvas54x8.printFixed(1, 1, "INACTIVE", STYLE_BOLD);
        display.drawCanvas(70, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch function name
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], STYLE_BOLD);
      display.drawCanvas(17, ui_content_2+8, canvas108x8);
      // ------------------------------------------------
      // matrix switch function x
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][0], 10).c_str(), STYLE_BOLD);
      display.drawCanvas(17, ui_content_3+8, canvas108x8);
      // ------------------------------------------------
      // matrix switch function y
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][1], 10).c_str(), STYLE_BOLD);
      display.drawCanvas(17, ui_content_4+8, canvas108x8);
      // ------------------------------------------------
      // matrix switch function z
      // ------------------------------------------------
      canvas108x8.clear();
      display.setColor(systemData.color_content);
      canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][2], 10).c_str(), STYLE_BOLD);
      display.drawCanvas(17, ui_content_5+8, canvas108x8);
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuMatrixConfigureFunction.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuMatrixConfigureFunction.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                        SELECT FUNCTION NAME PAGE
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_matrix_logic_setup_function) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SELECT", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127); // below mfp
        display.drawVLine(64, 25, ui_content_2+4); // seperate enabled from active
        display.drawHLine(1, ui_content_2+5, 127); // above xyz
        display.drawVLine(14, ui_content_2+6, ui_content_6+8); // seperate subtitles from values
        display.drawHLine(1, ui_content_6+9, 127); // menu
        // ------------------------------------------------
        // matrix switch number
        // ------------------------------------------------
        display.setColor(systemData.color_subtitle);
        memset(TMP_UI_DATA_0, 0, sizeof(TMP_UI_DATA_0));
        strcpy(TMP_UI_DATA_0, "M");
        strcat(TMP_UI_DATA_0, String(menuMatrixSwitchSelect.selection()).c_str());
        strcat(TMP_UI_DATA_0, "   F");
        strcat(TMP_UI_DATA_0, String(menuMatrixFunctionSelect.selection()).c_str());
        strcat(TMP_UI_DATA_0, "   P");
        strcat(TMP_UI_DATA_0, String(matrixData.matrix_port_map[0][menuMatrixSwitchSelect.selection()]).c_str());
        canvas120x8.clear();
        canvas120x8.printFixed((125/2)-((strlen(TMP_UI_DATA_0)/2)*6), 1, TMP_UI_DATA_0, STYLE_BOLD);
        display.drawCanvas(1, ui_content_0-2, canvas120x8);
        // ------------------------------------------------
        // matrix switch function name
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "F", STYLE_BOLD);
        display.drawCanvas(3, ui_content_2+8, canvas8x8);
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, matrixData.matrix_function[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()], STYLE_BOLD);
        display.drawCanvas(17, ui_content_2+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function x
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "X", STYLE_BOLD);
        display.drawCanvas(3, ui_content_3+8, canvas8x8);
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][0]).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_3+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function y
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Y", STYLE_BOLD);
        display.drawCanvas(3, ui_content_4+8, canvas8x8);
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][1]).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_4+8, canvas108x8);
        // ------------------------------------------------
        // matrix switch function z
        // ------------------------------------------------
        canvas8x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas8x8.printFixed(1, 1, "Z", STYLE_BOLD);
        display.drawCanvas(3, ui_content_5+8, canvas8x8);
        canvas108x8.clear();
        display.setColor(systemData.color_content);
        canvas108x8.printFixed(1, 1, String(matrixData.matrix_function_xyz[menuMatrixSwitchSelect.selection()][menuMatrixFunctionSelect.selection()][2]).c_str(), STYLE_BOLD);
        display.drawCanvas(17, ui_content_5+8, canvas108x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix switch enabled
      // ------------------------------------------------
      canvas54x8.clear();
      if (matrixData.matrix_switch_enabled[0][menuMatrixSwitchSelect.selection()]==true) {
        display.setColor(RGB_COLOR16(0,0,255));
        canvas54x8.printFixed(1, 1, " ENABLED", STYLE_BOLD);
        display.drawCanvas(4, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch disabled
      // ------------------------------------------------
      else {
        display.setColor(RGB_COLOR16(64,64,64));
        canvas54x8.printFixed(1, 1, "DISABLED", STYLE_BOLD);
        display.drawCanvas(7, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch state high
      // ------------------------------------------------
      canvas54x8.clear();
      if (matrixData.matrix_switch_state[0][menuMatrixSwitchSelect.selection()]==true) {
        display.setColor(RGB_COLOR16(0,255,0));
        canvas54x8.printFixed(1, 1, " ACTIVE", STYLE_BOLD);
        display.drawCanvas(70, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // matrix switch state low
      // ------------------------------------------------
      else {
        display.setColor(RGB_COLOR16(64,64,64));
        canvas54x8.printFixed(1, 1, "INACTIVE", STYLE_BOLD);
        display.drawCanvas(70, ui_content_1+2, canvas54x8);
      }
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuMatrixSetFunctionName.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuMatrixSetFunctionName.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                        FILE MENU
    // ----------------------------------------------------------------------------------------------------------------    
    else if (menu_page==page_file_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("FILE", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 28, 127);
        display.drawVLine(46, 13, 26);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix filename
      // ------------------------------------------------
      canvas42x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas42x8.printFixed(1, 1, "MATRIX", STYLE_BOLD);
      display.drawCanvas(3, ui_content_0, canvas42x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sdcardData.matrix_filename).c_str(), STYLE_BOLD);
      display.drawCanvas(50, ui_content_0, canvas60x8);
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuFile.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuFile.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                 SAVE MATRIX MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_file_save_matrix) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SAVE", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 28, 127);
        display.drawVLine(46, 13, 26);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix filename
      // ------------------------------------------------
      canvas42x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas42x8.printFixed(1, 1, "MATRIX", STYLE_BOLD);
      display.drawCanvas(3, ui_content_0, canvas42x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sdcardData.matrix_filename).c_str(), STYLE_BOLD);
      display.drawCanvas(50, ui_content_0, canvas60x8);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      setMenuMatrixFilePathItems();
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuMatrixFilepath.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuMatrixFilepath.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                 LOAD MATRIX MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_file_load_matrix) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("LOAD", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 28, 127);
        display.drawVLine(46, 13, 26);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix filename
      // ------------------------------------------------
      canvas42x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas42x8.printFixed(1, 1, "MATRIX", STYLE_BOLD);
      display.drawCanvas(3, ui_content_0, canvas42x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sdcardData.matrix_filename).c_str(), STYLE_BOLD);
      display.drawCanvas(50, ui_content_0, canvas60x8);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      setMenuMatrixFilePathItems();
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuMatrixFilepath.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuMatrixFilepath.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                               DELETE MATRIX MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_file_delete_matrix) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("DELETE", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 28, 127);
        display.drawVLine(46, 13, 26);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // matrix filename
      // ------------------------------------------------
      canvas42x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas42x8.printFixed(1, 1, "MATRIX", STYLE_BOLD);
      display.drawCanvas(3, ui_content_0, canvas42x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sdcardData.matrix_filename).c_str(), STYLE_BOLD);
      display.drawCanvas(50, ui_content_0, canvas60x8);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      setMenuMatrixFilePathItems();
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuMatrixFilepath.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuMatrixFilepath.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                         GPS MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_gps_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
          previous_menu_page=menu_page; display.clear();
          drawMainBorder();
          drawGeneralTitle("GPS", systemData.color_title, systemData.color_border);
          display.setColor(systemData.color_border);
          display.drawHLine(1, 38, 127);
          display.drawVLine(68, 13, 37);
          display.setColor(systemData.color_subtitle);
          canvas64x8.clear();
          canvas64x8.printFixed(1, 1, String("SATELLITES").c_str(), STYLE_BOLD);
          display.drawCanvas(3, ui_content_0, canvas64x8);
          canvas64x8.clear();
          canvas64x8.printFixed(1, 1, String("PRECISION").c_str(), STYLE_BOLD);
          display.drawCanvas(3, ui_content_1, canvas64x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // satellite count
      // ------------------------------------------------
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(gnggaData.satellite_count_gngga).c_str(), STYLE_BOLD);
      display.drawCanvas(72, ui_content_0, canvas42x8);
      // ------------------------------------------------
      // hdop precision factor
      // ------------------------------------------------
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(gnggaData.hdop_precision_factor).c_str(), STYLE_BOLD);
      display.drawCanvas(72, ui_content_1, canvas42x8);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      if (systemData.satio_enabled==true) {menuGPSItems[0 ]                             ="SATIO   ENABLED";}
      else {menuGPSItems[0]                                                             ="SATIO   DISABLED";}
      if (systemData.gngga_enabled==true) {menuGPSItems[1]                              ="GNGGA   ENABLED";}
      else {menuGPSItems[1]                                                             ="GNGGA   DISABLED";}
      if (systemData.gnrmc_enabled==true) {menuGPSItems[2]                              ="GNRMC   ENABLED";}
      else {menuGPSItems[2]                                                             ="GNRMC   DISABLED";}
      if (systemData.gpatt_enabled==true) {menuGPSItems[3]                              ="GPATT   ENABLED";}
      else {menuGPSItems[3]                                                             ="GPATT   DISABLED";}
      if (strcmp(satData.coordinate_conversion_mode, "GNGGA")==0) {menuGPSItems[4]      ="CONVERT GNGGA";}
      else if (strcmp(satData.coordinate_conversion_mode, "GNRMC")==0) {menuGPSItems[4] ="CONVERT GNRMC";}
      menuGPSItems[5]                                                                   ="VIEW    GNGGA";
      menuGPSItems[6]                                                                   ="VIEW    GNRMC";
      menuGPSItems[7]                                                                   ="VIEW    GPATT";
      menuGPSItems[8]                                                                   ="VIEW    SATIO";
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuGPS.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuGPS.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                       GNGGA MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_gps_view_gngga) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("GNGGA", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawVLine(25, 13, 127);
        display.drawVLine(64, 13, ui_content_1-3);
        display.drawVLine(89, 13, ui_content_1-3);
        display.drawHLine(1, ui_content_1-2, 127);
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("CKS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_0-2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("CKD").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_0-2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("UTC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("PF").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("GEO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DD").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10+1, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // count invalid checksum
      // ------------------------------------------------
      canvas32x8.clear();
      display.setColor(systemData.color_content);
      canvas32x8.printFixed(1, 1, String(gnggaData.bad_checksum_validity).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_0-2, canvas32x8);
      // ------------------------------------------------
      // count invalid data
      // ------------------------------------------------
      canvas32x8.clear();
      display.setColor(systemData.color_content);
      canvas32x8.printFixed(1, 1, String(gnggaData.total_invalid_elements).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_0-2, canvas32x8);
      // ------------------------------------------------
      // utc time
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.utc_time).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2+1, canvas92x8);
      // ------------------------------------------------
      // latitude hemisphere
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas19x8.printFixed(1, 1, String(gnggaData.latitude_hemisphere).c_str(), STYLE_BOLD);
      display.drawCanvas(3, ui_content_3+1, canvas19x8);
      // ------------------------------------------------
      // latitude
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.latitude).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3+1, canvas92x8);
      // ------------------------------------------------
      // longitude hemisphere
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas19x8.printFixed(1, 1, String(gnggaData.longitude_hemisphere).c_str(), STYLE_BOLD);
      display.drawCanvas(3, ui_content_4+1, canvas19x8);
      // ------------------------------------------------
      // longitude
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.longitude).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4+1, canvas92x8);
      // ------------------------------------------------
      // solution status
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.solution_status).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5+1, canvas92x8);
      // ------------------------------------------------
      // satellite count
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.satellite_count_gngga).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6+1, canvas92x8);
      // ------------------------------------------------
      // hdop precision factor
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.hdop_precision_factor).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7+1, canvas92x8);
      // ------------------------------------------------
      // altitude
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(String(gnggaData.altitude) + " " + String(gnggaData.altitude_units)).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8+1, canvas92x8);
      // ------------------------------------------------
      // geoidal
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(String(gnggaData.geoidal) + " " + String(gnggaData.geoidal_units)).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9+1, canvas92x8);
      // ------------------------------------------------
      // differential delay
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnggaData.differential_delay).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10+1, canvas92x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                       GNRMC MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_gps_view_gnrmc) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("GNRMC", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawVLine(25, 13, 127);
        display.drawVLine(64, 13, ui_content_1-3);
        display.drawVLine(89, 13, ui_content_1-3);
        display.drawHLine(1, ui_content_1-2, 127);
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("CKS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_0-2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("CKD").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_0-2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("UTC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("PS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("GS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("GH").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("UTC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("IA").c_str(), STYLE_BOLD);
        display.drawCanvas(2, ui_content_8+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("IAD").c_str(), STYLE_BOLD);
        display.drawCanvas(2, ui_content_9+1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("MI").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10+1, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // count invalid checksum
      // ------------------------------------------------
      canvas32x8.clear();
      display.setColor(systemData.color_content);
      canvas32x8.printFixed(1, 1, String(gnrmcData.bad_checksum_validity).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_0-2, canvas32x8);
      // ------------------------------------------------
      // count invalid data
      // ------------------------------------------------
      canvas32x8.clear();
      display.setColor(systemData.color_content);
      canvas32x8.printFixed(1, 1, String(gnrmcData.total_invalid_elements).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_0-2, canvas32x8);
      // ------------------------------------------------
      // utc time
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnrmcData.utc_time).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1+1, canvas92x8);
      // ------------------------------------------------
      // positioning status
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnrmcData.positioning_status).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2+1, canvas92x8);
      // ------------------------------------------------
      // latitude hemisphere
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas19x8.printFixed(1, 1, String(gnrmcData.latitude_hemisphere).c_str(), STYLE_BOLD);
      display.drawCanvas(3, ui_content_3+1, canvas19x8);
      canvas92x8.clear();
      // ------------------------------------------------
      // latitude
      // ------------------------------------------------
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnrmcData.latitude).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3+1, canvas92x8);
      // ------------------------------------------------
      // longitude hemisphere
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas19x8.printFixed(1, 1, String(gnrmcData.longitude_hemisphere).c_str(), STYLE_BOLD);
      display.drawCanvas(3, ui_content_4+1, canvas19x8);
      // ------------------------------------------------
      // longitude
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gnrmcData.longitude).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4+1, canvas92x8);
      // ------------------------------------------------
      // ground speed
      // ------------------------------------------------
      canvas92x8.clear();
      canvas92x8.printFixed(1, 1, String(gnrmcData.ground_speed).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5+1, canvas92x8);
      // ------------------------------------------------
      // ground heading
      // ------------------------------------------------
      canvas92x8.clear();
      canvas92x8.printFixed(1, 1, String(gnrmcData.ground_heading).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6+1, canvas92x8);
      // ------------------------------------------------
      // utc date
      // ------------------------------------------------
      canvas92x8.clear();
      canvas92x8.printFixed(1, 1, String(gnrmcData.utc_date).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7+1, canvas92x8);
      // ------------------------------------------------
      // installation angle
      // ------------------------------------------------
      canvas92x8.clear();
      canvas92x8.printFixed(1, 1, String(gnrmcData.installation_angle).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8+1, canvas92x8);
      // ------------------------------------------------
      // angle direction
      // ------------------------------------------------
      canvas92x8.clear();
      canvas92x8.printFixed(1, 1, String(gnrmcData.installation_angle_direction).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9+1, canvas92x8);
      // ------------------------------------------------
      // mode indication
      // ------------------------------------------------
      canvas92x8.clear();
      canvas92x8.printFixed(1, 1, String(gnrmcData.mode_indication).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10+1, canvas92x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                       GPATT MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_gps_view_gpatt) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("GPATT", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, ui_content_1-2, 127);  // checksum divider
        display.drawVLine(25, 13, 127);             // left data divider
        display.drawVLine(64, 13, ui_content_1-3);  // invalid data mid
        display.drawVLine(89, 13, ui_content_1-3);  // invalid data divider
        display.drawVLine(64, ui_content_5+1, 127); // right data mid
        display.drawVLine(89, ui_content_5+1, 127); // right data divider
        display.drawHLine(64, ui_content_5, 127);
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("CKS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_0-2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("CKD").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_0-2, canvas19x8);
        // ------------------------------------------------
        // user code
        // ------------------------------------------------
        // canvas19x8.clear();
        // canvas19x8.printFixed(1, 1, String("UC").c_str(), STYLE_BOLD);
        // display.drawCanvas(3, ui_content_0-2, canvas19x8);
        // ------------------------------------------------
        // pitch
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("P").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        // ------------------------------------------------
        // roll
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("R").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        // ------------------------------------------------
        // yaw
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("Y").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        // ------------------------------------------------
        // mileage
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("M").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        // ------------------------------------------------
        // speed enable
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SE").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5+1, canvas19x8);
        // ------------------------------------------------
        // speed num
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SN").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_5+1, canvas19x8);
        // ------------------------------------------------
        // imu kind
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("IMU").c_str(), STYLE_BOLD);
        display.drawCanvas(2, ui_content_6+1, canvas19x8);
        // ------------------------------------------------
        // ubi car kind
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("UBI").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_6+1, canvas19x8);
        // ------------------------------------------------
        // mis angle num
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("MAN").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7+1, canvas19x8);
        // ------------------------------------------------
        // mis att flag
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("MAF").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_7+1, canvas19x8);
        // ------------------------------------------------
        // INS
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("INS").c_str(), STYLE_BOLD);
        display.drawCanvas(2, ui_content_8+1, canvas19x8);
        // ------------------------------------------------
        // run state flag
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RSF").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_8+1, canvas19x8);
        // ------------------------------------------------
        // run inetial flag
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RIF").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9+1, canvas19x8);
        // ------------------------------------------------
        // static flag
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SF").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_9+1, canvas19x8);
        // ------------------------------------------------
        // gst data
        // ------------------------------------------------
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("GST").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10+1, canvas19x8);
        canvas19x8.clear();
        // ------------------------------------------------
        // line flag
        // ------------------------------------------------
        canvas19x8.printFixed(1, 1, String("LF").c_str(), STYLE_BOLD);
        display.drawCanvas(67, ui_content_10+1, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // count invalid checksum
      // ------------------------------------------------
      canvas32x8.clear();
      display.setColor(systemData.color_content);
      canvas32x8.printFixed(1, 1, String(gpattData.bad_checksum_validity).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_0-2, canvas32x8);
      // ------------------------------------------------
      // count invalid data
      // ------------------------------------------------
      canvas32x8.clear();
      display.setColor(systemData.color_content);
      canvas32x8.printFixed(1, 1, String(gpattData.total_invalid_elements).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_0-2, canvas32x8);
      // ------------------------------------------------
      // user code
      // ------------------------------------------------
      // canvas92x8.clear();
      // display.setColor(systemData.color_content);
      // canvas92x8.printFixed(1, 1, String(gpattData.user_code).c_str());
      // display.drawCanvas(28, ui_content_0-2, canvas92x8);
      // ------------------------------------------------
      // pitch
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gpattData.pitch).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas92x8);
      // ------------------------------------------------
      // roll
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gpattData.roll).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas92x8);
      // ------------------------------------------------
      // yaw
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gpattData.yaw).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas92x8);
      // ------------------------------------------------
      // mileage
      // ------------------------------------------------
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(gpattData.mileage).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas92x8);
      // ------------------------------------------------
      // speed enable
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.speed_enable).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5+1, canvas19x8);
      // ------------------------------------------------
      // speed num
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.speed_num).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_5+1, canvas19x8);
      // ------------------------------------------------
      // imu kind
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.imu_kind).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6+1, canvas19x8);
      // ------------------------------------------------
      // ubi car kind
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.ubi_car_kind).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_6+1, canvas19x8);
      // ------------------------------------------------
      // mis angle num
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.mis_angle_num).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7+1, canvas19x8);
      // ------------------------------------------------
      // mis att flag
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.mis_att_flag).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_7+1, canvas19x8);
      // ------------------------------------------------
      // INS
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.ins).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8+1, canvas19x8);
      // ------------------------------------------------
      // run state flag
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.run_state_flag).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_8+1, canvas19x8);
      // ------------------------------------------------
      // run inetial flag
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.run_inetial_flag).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9+1, canvas19x8);
      // ------------------------------------------------
      // static flag
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.static_flag).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_9+1, canvas19x8);
      // ------------------------------------------------
      // gst data
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.gst_data).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10+1, canvas19x8);
      // ------------------------------------------------
      // line flag
      // ------------------------------------------------
      canvas19x8.clear();
      display.setColor(systemData.color_content);
      canvas19x8.printFixed(1, 1, String(gpattData.line_flag).c_str(), STYLE_BOLD);
      display.drawCanvas(92, ui_content_10+1, canvas19x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                       SATIO MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_gps_view_satio) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SATIO", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawVLine(25, 13, 127);
        display.drawHLine(1, ui_content_2+2, 127);
        display.drawHLine(1, ui_content_4+6, 127);
        display.drawHLine(1, ui_content_7+10, 127);
        // display.drawHLine(1, ui_content_9-2, 127);
        // display.drawHLine(1, ui_content_10-2, 127);
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RTC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_0, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RTC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SYN").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2+5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("SYN").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3+5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("LOC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4+9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("LOC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5+9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("LOC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6+9, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // rtc time (utc)
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, satData.formatted_rtc_time.c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_0, canvas80x8);
      // ------------------------------------------------
      // rtc date (utc)
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, satData.formatted_rtc_date.c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas80x8);

      // ------------------------------------------------
      // rtc sync time (utc)
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, satData.formatted_rtc_sync_time.c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2+5, canvas80x8);
      // ------------------------------------------------
      // rtc sync date (utc)
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, satData.formatted_rtc_sync_date.c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3+5, canvas80x8);

      // ------------------------------------------------
      // local time
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, String(satData.formatted_local_time).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4+9, canvas80x8);
      // ------------------------------------------------
      // local date
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, String(satData.formatted_local_date).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5+9, canvas80x8);
      // ------------------------------------------------
      // local day
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, String(satData.local_weekday).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6+9, canvas80x8);

      // ------------------------------------------------
      // latitude hemisphere
      // ------------------------------------------------
      if (strcmp(satData.coordinate_conversion_mode, "GNGGA")==0) {
        canvas19x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas19x8.printFixed(1, 1, String(gnggaData.latitude_hemisphere).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9+1, canvas19x8);
      }
      else if (strcmp(satData.coordinate_conversion_mode, "GNRMC")==0) {
        canvas19x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas19x8.printFixed(1, 1, String(gnrmcData.latitude_hemisphere).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9+1, canvas19x8);
      }
      // ------------------------------------------------
      // latitude degrees
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, String(satData.degrees_latitude, 7).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9+1, canvas80x8);
      // ------------------------------------------------
      // longitude hemisphere
      // ------------------------------------------------
      if (strcmp(satData.coordinate_conversion_mode, "GNGGA")==0) {
        canvas19x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas19x8.printFixed(1, 1, String(gnggaData.longitude_hemisphere).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10+1, canvas19x8);
      }
      else if (strcmp(satData.coordinate_conversion_mode, "GNRMC")==0) {
        canvas19x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas19x8.printFixed(1, 1, String(gnrmcData.longitude_hemisphere).c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1+10, canvas19x8);
      }
      // ------------------------------------------------
      // longitude hemisphere
      // ------------------------------------------------
      canvas80x8.clear();
      display.setColor(systemData.color_content);
      canvas80x8.printFixed(1, 1, String(satData.degrees_longitude, 7).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10+1, canvas80x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                      SERIAL MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_serial_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SERIAL", systemData.color_title, systemData.color_border);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      if (systemData.output_satio_enabled==true) {menuSerialItems[0]    ="SATIO   ENABLED";}
      else {menuSerialItems[0]                                          ="SATIO   DISABLED";}
      if (systemData.output_gngga_enabled==true) {menuSerialItems[1]    ="GNGGA   ENABLED";}
      else {menuSerialItems[1]                                          ="GNGGA   DISABLED";}
      if (systemData.output_gnrmc_enabled==true) {menuSerialItems[2]    ="GNRMC   ENABLED";}
      else {menuSerialItems[2]                                          ="GNRMC   DISABLED";}
      if (systemData.output_gpatt_enabled==true) {menuSerialItems[3]    ="GPATT   ENABLED";}
      else {menuSerialItems[3]                                          ="GPATT   DISABLED";}
      if (systemData.output_matrix_enabled==true) {menuSerialItems[4]   ="MATRIX  ENABLED";}
      else {menuSerialItems[4]                                          ="MATRIX  DISABLED";}
      if (systemData.output_sensors_enabled==true) {menuSerialItems[5]  ="SENSORS ENABLED";}
      else {menuSerialItems[5]                                          ="SENSORS DISABLED";}
      if (systemData.output_sun_enabled==true) {menuSerialItems[6]      ="SUN     ENABLED";}
      else {menuSerialItems[6]                                          ="SUN     DISABLED";}
      if (systemData.output_moon_enabled==true) {menuSerialItems[7]     ="MOON    ENABLED";}
      else {menuSerialItems[7]                                          ="MOON    DISABLED";}
      if (systemData.output_mercury_enabled==true) {menuSerialItems[8]  ="MERCURY ENABLED";}
      else {menuSerialItems[8]                                          ="MERCURY DISABLED";}
      if (systemData.output_venus_enabled==true) {menuSerialItems[9]    ="VENUS   ENABLED";}
      else {menuSerialItems[9]                                          ="VENUS   DISABLED";}
      if (systemData.output_mars_enabled==true) {menuSerialItems[10]    ="MARS    ENABLED";}
      else {menuSerialItems[10]                                         ="MARS    DISABLED";}
      if (systemData.output_jupiter_enabled==true) {menuSerialItems[11] ="JUPITER ENABLED";}
      else {menuSerialItems[11]                                         ="JUPITER DISABLED";}
      if (systemData.output_saturn_enabled==true) {menuSerialItems[12]   ="SATURN  ENABLED";}
      else {menuSerialItems[12]                                         ="SATURN  DISABLED";}
      if (systemData.output_uranus_enabled==true) {menuSerialItems[13]   ="URANUS  ENABLED";}
      else {menuSerialItems[13]                                         ="URANUS  DISABLED";}
      if (systemData.output_neptune_enabled) {menuSerialItems[14]       ="NEPTUNE ENABLED";}
      else {menuSerialItems[14]                                         ="NEPTUNE DISABLED";}
      if (systemData.output_meteors_enabled==true) {menuSerialItems[15] ="METEORS ENABLED";}
      else {menuSerialItems[15]                                         ="METEORS DISABLED";}
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuSerial.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuSerial.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                         UNIVERSE
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("UNIVERSE", systemData.color_title, systemData.color_border);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      menuUniverseItems[0]                                                ="VIEW    SUN";
      menuUniverseItems[1]                                                ="VIEW    MOON";
      menuUniverseItems[2]                                                ="VIEW    MERCURY";
      menuUniverseItems[3]                                                ="VIEW    VENUS";
      menuUniverseItems[4]                                                ="VIEW    MARS";
      menuUniverseItems[5]                                                ="VIEW    JUPITER";
      menuUniverseItems[6]                                                ="VIEW    SATURN";
      menuUniverseItems[7]                                                ="VIEW    URANUS";
      menuUniverseItems[8]                                                ="VIEW    NEPTUNE";
      if (systemData.sidereal_track_sun==true) {menuUniverseItems[9]      ="SUN     ENABLED";} 
      else {menuUniverseItems[9]                                          ="SUN     DISABLED";}
      if (systemData.sidereal_track_mercury==true) {menuUniverseItems[10] ="MERCURY ENABLED";}
      else {menuUniverseItems[10]                                         ="MERCURY DISABLED";}
      if (systemData.sidereal_track_moon==true) {menuUniverseItems[11]    ="MOON    ENABLED";}
      else {menuUniverseItems[11]                                         ="MOON    DISABLED";}
      if (systemData.sidereal_track_venus==true) {menuUniverseItems[12]   ="VENUS   ENABLED";}
      else {menuUniverseItems[12]                                         ="VENUS   DISABLED";}
      if (systemData.sidereal_track_mars==true) {menuUniverseItems[13]    ="MARS    ENABLED";}
      else {menuUniverseItems[13]                                         ="MARS    DISABLED";}
      if (systemData.sidereal_track_jupiter==true) {menuUniverseItems[14] ="JUPITER ENABLED";}
      else {menuUniverseItems[14]                                         ="JUPITER DISABLED";}
      if (systemData.sidereal_track_saturn==true) {menuUniverseItems[15]  ="SATURN  ENABLED";}
      else {menuUniverseItems[15]                                         ="SATURN  DISABLED";}
      if (systemData.sidereal_track_uranus==true) {menuUniverseItems[16]  ="URANUS  ENABLED";}
      else {menuUniverseItems[16]                                         ="URANUS  DISABLED";}
      if (systemData.sidereal_track_neptune==true) {menuUniverseItems[17] ="NEPTUNE ENABLED";}
      else {menuUniverseItems[17]                                         ="NEPTUNE DISABLED";}
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuUniverse.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuUniverse.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                     DISPLAY MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_display_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("DISPLAY", systemData.color_title, systemData.color_border);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      if (systemData.display_auto_off==true) {menuDisplayItems[0] ="AUTO-OFF  ENABLED";}
      else {menuDisplayItems[0]                                   ="AUTO-OFF  DISABLED";}
      menuDisplayItems[1]=systemData.char_display_autooff_times[systemData.index_display_autooff_times];
      menuDisplayItems[2]=systemData.char_display_border_color[systemData.index_display_border_color];
      menuDisplayItems[3]=systemData.char_display_content_color[systemData.index_display_content_color];
      menuDisplayItems[4]=systemData.char_display_menu_border_color[systemData.index_display_menu_border_color];
      menuDisplayItems[5]=systemData.char_display_menu_content_color[systemData.index_display_menu_content_color];
      menuDisplayItems[6]=systemData.char_display_title_color[systemData.index_display_title_color];
      menuDisplayItems[7]=systemData.char_display_subtitle_color[systemData.index_display_color_subtitle];
      menuDisplayItems[8]=systemData.char_home_page_feature[systemData.index_home_page_feature];
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuDisplay.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuDisplay.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                      SYSTEM MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_system_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SYSTEM", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, ui_content_4+3, 127);
        display.drawVLine(44, 13, ui_content_4+2);
        // ------------------------------------------------
        // speed
        // ------------------------------------------------
        canvas38x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas38x8.printFixed(1, 1, "SPEED", STYLE_BOLD);
        display.drawCanvas(3, ui_content_0, canvas38x8);
        // ------------------------------------------------
        // uptime 
        // ------------------------------------------------
        canvas38x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas38x8.printFixed(1, 1, "UPTIME", STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas38x8);
        // ------------------------------------------------
        // overload 
        // ------------------------------------------------
        canvas38x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas38x8.printFixed(1, 1, "OLOAD", STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas38x8);
        // ------------------------------------------------
        // loops a second
        // ------------------------------------------------
        canvas38x8.clear();
        display.setColor(systemData.color_subtitle);
        canvas38x8.printFixed(1, 1, "LOOPS", STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas38x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // speed
      // ------------------------------------------------
      canvas74x8.clear();
      display.setColor(systemData.color_content);
      canvas74x8.printFixed(1, 1, String((double)timeData.mainLoopTimeTaken/1000000, 7).c_str(), STYLE_BOLD);
      display.drawCanvas(47, ui_content_0, canvas74x8);
      // ------------------------------------------------
      // uptime 
      // ------------------------------------------------
      canvas74x8.clear();
      display.setColor(systemData.color_content);
      canvas74x8.printFixed(1, 1, String(String(timeData.uptime_seconds).c_str(), 11).c_str(), STYLE_BOLD);
      display.drawCanvas(47, ui_content_1, canvas74x8);
      // ------------------------------------------------
      // overload 
      // ------------------------------------------------
      canvas74x8.clear();
      display.setColor(systemData.color_content);
      if (systemData.overload==true) {display.setColor(RGB_COLOR16(255,255,0)); canvas74x8.printFixed(1, 1, String("TRUE (" + String(systemData.i_overload) + ")").c_str(), STYLE_BOLD);}
      else {canvas74x8.printFixed(1, 1, String("FALSE (" + String(systemData.i_overload) + ")").c_str(), STYLE_BOLD);}
      display.drawCanvas(47, ui_content_2, canvas74x8);
      // ------------------------------------------------
      // loops a second
      // ------------------------------------------------
      canvas74x8.clear();
      display.setColor(systemData.color_content);
      canvas74x8.printFixed(1, 1, String(systemData.total_loops_a_second).c_str(), STYLE_BOLD);
      display.drawCanvas(47, ui_content_3, canvas74x8);
      // ------------------------------------------------
      // set run matrix on startup
      // ------------------------------------------------
      if (systemData.matrix_run_on_startup==true) {menuSystemItems[0]="AUTO MATRIX ON";}
      else {menuSystemItems[0]="AUTO MATRIX OFF";}
      // ------------------------------------------------
      // set overload time
      // ------------------------------------------------
      menuSystemItems[1]=systemData.char_overload_times[systemData.index_overload_times];
      // ------------------------------------------------
      // enable/disable matrix
      // ------------------------------------------------
      if (systemData.matrix_enabled==true) {menuSystemItems[2]="MATRIX ENABLED";}
      else {menuSystemItems[2]="MATRIX DISABLED";}
      // ------------------------------------------------
      // enable/disable port controller
      // ------------------------------------------------
      if (systemData.matrix_io_enabled==true) {menuSystemItems[3]="IO ENABLED";}
      else {menuSystemItems[3]="IO DISABLED";}
      // ------------------------------------------------
      // enable/disable serial command
      // ------------------------------------------------
      if (systemData.serial_command==true) {menuSystemItems[4]="S.CMD ENABLED";}
      else {menuSystemItems[4]="S.CMD DISABLED";}
      // ------------------------------------------------
      // enable/disable wt901
      // ------------------------------------------------
      if (systemData.wt901_enabled==true) {menuSystemItems[5]="WT901 ENABLED";}
      else {menuSystemItems[5]="WT901 DISABLED";}
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuSystem.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuSystem.showMenuContent(display);
        // ----------------------------------------------
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                  CD74HC4067 MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_CD74HC4067_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("CD74HC4067", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 40, 127);
        display.drawVLine(64, 41, 127);
        display.setColor(systemData.color_subtitle);
        // ------------------------------------------------
        // sensor value column 0
        // ------------------------------------------------
        // canvas60x8.clear();
        // canvas60x8.printFixed((60/2)-((strlen("0-7")/2)*6), 1, "0-7", STYLE_BOLD);
        // display.drawCanvas(1, 32, canvas60x8);
        // ------------------------------------------------
        // sensor value column 1
        // ------------------------------------------------
        // canvas60x8.clear();
        // canvas60x8.printFixed((60/2)-((strlen("8-15")/2)*6), 1, "8-15", STYLE_BOLD);
        // display.drawCanvas(66, 32, canvas60x8);
        // ------------------------------------------------
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // sensor value column 0
      // ------------------------------------------------
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_0, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 42, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_1, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 52, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_2, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 62, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_3, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 72, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_4, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 82, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_5, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 92, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_6, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 102, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_7, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(3, 112, canvas60x8);
      // ------------------------------------------------
      // sensor value column 1
      // ------------------------------------------------
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_8, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 42, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_9, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 52, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_10, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 62, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_11, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 72, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_12, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 82, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_13, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 92, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_14, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 102, canvas60x8);
      canvas60x8.clear();
      display.setColor(systemData.color_content);
      canvas60x8.printFixed(1, 1, String(sensorData.sensor_15, 4).c_str(), STYLE_BOLD);
      display.drawCanvas(67, 112, canvas60x8);

      // ------------------------------------------------
      // enable disable CD74HC4067 channel
      // ------------------------------------------------
      if (systemData.CD74HC4067_channel_enabled[0]==true) {menuCD74HC4067Items[0]="CH_0 ENABLED";}
      else {menuCD74HC4067Items[0]="CH_0 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[1]==true) {menuCD74HC4067Items[1]="CH_1 ENABLED";}
      else {menuCD74HC4067Items[1]="CH_1 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[2]==true) {menuCD74HC4067Items[2]="CH_2 ENABLED";}
      else {menuCD74HC4067Items[2]="CH_2 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[3]==true) {menuCD74HC4067Items[3]="CH_3 ENABLED";}
      else {menuCD74HC4067Items[3]="CH_3 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[4]==true) {menuCD74HC4067Items[4]="CH_4 ENABLED";}
      else {menuCD74HC4067Items[4]="CH_4 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[5]==true) {menuCD74HC4067Items[5]="CH_5 ENABLED";}
      else {menuCD74HC4067Items[5]="CH_5 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[6]==true) {menuCD74HC4067Items[6]="CH_6 ENABLED";}
      else {menuCD74HC4067Items[6]="CH_6 DISABLED";}
      
      if (systemData.CD74HC4067_channel_enabled[7]==true) {menuCD74HC4067Items[7]="CH_7 ENABLED";}
      else {menuCD74HC4067Items[7]="CH_7 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[8]==true) {menuCD74HC4067Items[8]="CH_8 ENABLED";}
      else {menuCD74HC4067Items[8]="CH_8 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[9]==true) {menuCD74HC4067Items[9]="CH_9 ENABLED";}
      else {menuCD74HC4067Items[9]="CH_9 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[10]==true) {menuCD74HC4067Items[10]="CH_10 ENABLED";}
      else {menuCD74HC4067Items[10]="CH_10 DISABLED";}
      
      if (systemData.CD74HC4067_channel_enabled[11]==true) {menuCD74HC4067Items[11]="CH_11 ENABLED";}
      else {menuCD74HC4067Items[11]="CH_11 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[12]==true) {menuCD74HC4067Items[12]="CH_12 ENABLED";}
      else {menuCD74HC4067Items[12]="CH_12 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[13]==true) {menuCD74HC4067Items[13]="CH_13 ENABLED";}
      else {menuCD74HC4067Items[13]="CH_13 DISABLED";}

      if (systemData.CD74HC4067_channel_enabled[14]==true) {menuCD74HC4067Items[14]="CH_14 ENABLED";}
      else {menuCD74HC4067Items[14]="CH_14 DISABLED";}
      
      if (systemData.CD74HC4067_channel_enabled[15]==true) {menuCD74HC4067Items[15]="CH_15 ENABLED";}
      else {menuCD74HC4067Items[15]="CH_15 DISABLED";}

      if (systemData.CD74HC4067_enabled==true) {menuCD74HC4067Items[16]="ALL ENABLED";}
      else {menuCD74HC4067Items[16]="ALL DISABLED";}
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuCD74HC4067.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuCD74HC4067.showMenuContent(display);
        // ----------------------------------------------
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                    TCA9548A MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_TCA9548A_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("TCA9548A", systemData.color_title, systemData.color_border);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // enable disable TCA9548A channel
      // ------------------------------------------------
      if (systemData.TCA9548A_channel_enabled[0]==true) {menuTCA9548AItems[0]="CH_0 ENABLED";}
      else {menuTCA9548AItems[0]="CH_0 DISABLED";}

      if (systemData.TCA9548A_channel_enabled[1]==true) {menuTCA9548AItems[1]="CH_1 ENABLED";}
      else {menuTCA9548AItems[1]="CH_1 DISABLED";}

      if (systemData.TCA9548A_channel_enabled[2]==true) {menuTCA9548AItems[2]="CH_2 ENABLED";}
      else {menuTCA9548AItems[2]="CH_2 DISABLED";}

      if (systemData.TCA9548A_channel_enabled[3]==true) {menuTCA9548AItems[3]="CH_3 ENABLED";}
      else {menuTCA9548AItems[3]="CH_3 DISABLED";}

      if (systemData.TCA9548A_channel_enabled[4]==true) {menuTCA9548AItems[4]="CH_4 ENABLED";}
      else {menuTCA9548AItems[4]="CH_4 DISABLED";}

      if (systemData.TCA9548A_channel_enabled[5]==true) {menuTCA9548AItems[5]="CH_5 ENABLED";}
      else {menuTCA9548AItems[5]="CH_5 DISABLED";}

      if (systemData.TCA9548A_channel_enabled[6]==true) {menuTCA9548AItems[6]="CH_6 ENABLED";}
      else {menuTCA9548AItems[6]="CH_6 DISABLED";}
      
      if (systemData.TCA9548A_channel_enabled[7]==true) {menuTCA9548AItems[7]="CH_7 ENABLED";}
      else {menuTCA9548AItems[7]="CH_7 DISABLED";}

      if (systemData.TCA9548A_enabled==true) {menuTCA9548AItems[8]="ALL ENABLED";}
      else {menuTCA9548AItems[8]="ALL DISABLED";}
      
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuTCA9548A.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuTCA9548A.showMenuContent(display);
        // ----------------------------------------------
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                 TIME & DATE MENU
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_timeanddate_main) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("DATETIME", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 38, 127);
        display.drawVLine(34, 13, 35);
        display.setColor(systemData.color_subtitle);
        canvas28x8.clear();
        canvas28x8.printFixed(1, 1, "TIME", STYLE_BOLD);
        display.drawCanvas(3, ui_content_0, canvas28x8);
        canvas28x8.clear();
        canvas28x8.printFixed(1, 1, "DATE", STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas28x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      // local datetime
      // ------------------------------------------------
      if (crunching_time_data==false) {
        // ----------------------------------------------
        // local time
        // ----------------------------------------------
        canvas76x8.clear();
        display.setColor(systemData.color_content);
        canvas76x8.printFixed(1, 1, String(satData.formatted_local_time).c_str(), STYLE_BOLD);
        display.drawCanvas(37, ui_content_0, canvas76x8);
        // ----------------------------------------------
        // local date
        // ----------------------------------------------
        canvas76x8.clear();
        display.setColor(systemData.color_content);
        canvas76x8.printFixed(1, 1, String(satData.formatted_local_date).c_str(), STYLE_BOLD);
        display.drawCanvas(37, ui_content_1, canvas76x8);
      }
      // ------------------------------------------------
      // set menu items
      // ------------------------------------------------
      menuTimeAndDateItems[0]=                                         "ENTER UTC OFFSET";
      if (satData.utc_auto_offset_flag==true) {menuTimeAndDateItems[1]="UTC OFFSET AUTO";}
      else {menuTimeAndDateItems[1]=                                   "UTC OFFSET MANUAL";}
      // ------------------------------------------------
      // menu
      // ------------------------------------------------
      if (interaction_updateui==true) {
        interaction_updateui=false;
        display.setColor(systemData.color_menu_border);
        menuTimeAndDate.showMenuBorder(display);
        display.setColor(systemData.color_menu_content);
        menuTimeAndDate.showMenuContent(display);
      }
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                              UNIVERSE VIEWS: SUN
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_sun) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SUN", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.sun_r) + String("  SET " + String(siderealPlanetData.sun_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.sun_r) + String("  SET " + String(siderealPlanetData.sun_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.sun_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.sun_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.sun_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.sun_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                             UNIVERSE VIEWS: MOON
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_moon) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("MOON", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("PH").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("LUM").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.moon_r) + String("  SET " + String(siderealPlanetData.moon_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.moon_r) + String("  SET " + String(siderealPlanetData.moon_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.moon_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.moon_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.moon_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.moon_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas92x8.clear();
      display.setColor(systemData.color_content);
      canvas92x8.printFixed(1, 1, String(siderealPlanetData.moon_p_name[(int)siderealPlanetData.moon_p]).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas92x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.moon_lum).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                          UNIVERSE VIEWS: MERCURY
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_mercury) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("MERCURY", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.mercury_r) + String("  SET " + String(siderealPlanetData.mercury_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.mercury_r) + String("  SET " + String(siderealPlanetData.mercury_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mercury_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                            UNIVERSE VIEWS: VENUS
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_venus) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("VENUS", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.venus_r) + String("  SET " + String(siderealPlanetData.venus_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.venus_r) + String("  SET " + String(siderealPlanetData.venus_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.venus_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                             UNIVERSE VIEWS: MARS
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_mars) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("MARS", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.mars_r) + String("  SET " + String(siderealPlanetData.mars_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.mars_r) + String("  SET " + String(siderealPlanetData.mars_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.mars_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                          UNIVERSE VIEWS: JUPITER
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_jupiter) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("JUPITER", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.jupiter_r) + String("  SET " + String(siderealPlanetData.jupiter_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.jupiter_r) + String("  SET " + String(siderealPlanetData.jupiter_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.jupiter_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                           UNIVERSE VIEWS: SATURN
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_saturn) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("SATURN", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.saturn_r) + String("  SET " + String(siderealPlanetData.saturn_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.saturn_r) + String("  SET " + String(siderealPlanetData.saturn_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(3, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.saturn_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                           UNIVERSE VIEWS: URANUS
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_uranus) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("URANUS", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.uranus_r) + String("  SET " + String(siderealPlanetData.uranus_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.uranus_r) + String("  SET " + String(siderealPlanetData.uranus_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.uranus_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                          UNIVERSE VIEWS: NEPTUNE
    // ----------------------------------------------------------------------------------------------------------------
    else if (menu_page==page_universe_view_neptune) {
      // ------------------------------------------------
      // static data
      // ------------------------------------------------
      if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
        previous_menu_page=menu_page; display.clear();
        drawMainBorder();
        drawGeneralTitle("NEPTUNE", systemData.color_title, systemData.color_border);
        display.setColor(systemData.color_border);
        display.drawHLine(1, 24, 127);  // seperate rise and set from rest of content
        display.drawVLine(25, 24, 127); // vertical seperator 0
        // display.drawVLine(84, 24, 127); // vertical seperator 1
        display.setColor(systemData.color_subtitle);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("RA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_1, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DEC").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_2, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("AZ").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_3, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ALT").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_4, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("HLA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_5, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("HLO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_6, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("RAV").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_7, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("DIS").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_8, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1, String("ELA").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_9, canvas19x8);
        canvas19x8.clear();
        canvas19x8.printFixed(1, 1,String("ELO").c_str(), STYLE_BOLD);
        display.drawCanvas(3, ui_content_10, canvas19x8);
      }
      // ------------------------------------------------
      // dynamic data
      // ------------------------------------------------
      // ------------------------------------------------
      // load
      // ------------------------------------------------
      DisplayDiscreteLoadPercentage(115, 3, 10);
      // ------------------------------------------------
      // satellites & sync
      // ------------------------------------------------
      if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
      else {DisplaySignal(3, 3);}
      DisplayDebugSymbol(18, 3);
      // ------------------------------------------------
      canvas120x8.clear();
      display.setColor(systemData.color_subtitle);
      canvas120x8.printFixed((120/2)-((strlen(String("RISE " + String(siderealPlanetData.neptune_r) + String("  SET " + String(siderealPlanetData.neptune_s))).c_str())/2)*6), 1, String("RISE " + String(siderealPlanetData.neptune_r) + String("  SET " + String(siderealPlanetData.neptune_s))).c_str(), STYLE_BOLD);
      display.drawCanvas(4, ui_content_0-2, canvas120x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_ra).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_1, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_dec).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_2, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_az).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_3, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_alt).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_4, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_helio_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_5, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_helio_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_6, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_radius_vector).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_7, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_distance).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_8, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_ecliptic_lat).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_9, canvas42x8);
      canvas42x8.clear();
      display.setColor(systemData.color_content);
      canvas42x8.printFixed(1, 1, String(siderealPlanetData.neptune_ecliptic_long).c_str(), STYLE_BOLD);
      display.drawCanvas(28, ui_content_10, canvas42x8);
    }

    // ----------------------------------------------------------------------------------------------------------------
    //                                                                                                     UAP ATTITUDE
    // ----------------------------------------------------------------------------------------------------------------
    // this page will provide a view of vehicle/device attitude (roll, pitch yaw etc) provided by multi axis gyros and INS.
    // may also provide sensory information relating to area/environment around vehicle/device.
    // sketch below may not reflect actual HUD.
    // ----------------------------------------------------------------------------------------------------------------
    /*                         
                             (heading)
                              N/S/E/W
                gyro -o-   |           | -> altitude (GPS)
               (primary)   |           |                  
                           | ----o---- | -> roll/pitch/yaw (INS)
                           |           |   
                           |___________| -> joystick input

    Joystick input will be:
      1: mappable for different joysticks (+-precision across different hardware).
      2: output through port controller.
      3: available in matrix for optional programmable joystick events.
    */
   else if (menu_page==page_attitude) {
    // ------------------------------------------------
    // static data
    // ------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page;
      display.clear();
      // drawMainBorder();
    }
    // ------------------------------------------------
    // dynamic data
    // ------------------------------------------------
    // ------------------------------------------------
    // local time
    // ------------------------------------------------
    canvas76x8.clear();
    display.setColor(systemData.color_title);
    canvas76x8.printFixed(0, 0, String(" " + String(satData.formatted_local_time)).c_str(), STYLE_BOLD);
    display.drawCanvas(34, 0, canvas76x8);
    // ------------------------------------------------
    // load
    // ------------------------------------------------
    DisplayDiscreteLoadPercentage(118, 0, 10);
    // ------------------------------------------------
    // satellites & sync
    // ------------------------------------------------
    if (rtc_sync_flag==true) {DisplayRTCSync(0, 0);}
    else {DisplaySignal(0, 0);}
    DisplayDebugSymbol(15, 0);
    // ------------------------------------------------
    // perf mon: uncomment to test frame performance
    // ------------------------------------------------
    // DisplayLoopsASecond(88, 0);
    // ------------------------------------------------
    // pitch scale
    // ------------------------------------------------
    display.setColor(RGB_COLOR16(0,255,0));
    display.drawVLine(127, 64-54, 64+54); // axis
    display.drawHLine(123, 64-54, 127); // 90
    display.drawHLine(123, 64-53, 127); // 90
    display.drawHLine(123, 64-52, 127); // 90
    display.drawHLine(125, 64-38, 127); // 67.5
    display.drawHLine(125, 64-37, 127); // 67.5
    display.drawHLine(123, 64-25, 127); // 45
    display.drawHLine(125, 64-13, 127); // 22.5
    display.drawHLine(125, 64-12, 127); // 22.5
    display.drawHLine(123, 64, 127); // 0
    display.drawHLine(125, 64+13, 127); // -22.5
    display.drawHLine(125, 64+12, 127); // -22.5
    display.drawHLine(123, 64+25, 127); // -45
    display.drawHLine(125, 64+38, 127); // -67.5
    display.drawHLine(125, 64+39, 127); // -67.5
    display.drawHLine(123, 64+52, 127); // -90
    display.drawHLine(123, 64+53, 127); // -90
    display.drawHLine(123, 64+54, 127); // -90
    // ------------------------------------------------
    // pitch slider clear position
    // ------------------------------------------------
    hud.createSprite(5, 5);
    hud.fillRect(0, 0, 4, 4, TFT_BLACK);
    hud.pushSprite(121, (int)mapped_pitch, TFT_TRANSPARENT);
    yield();
    hud.deleteSprite();
    // ------------------------------------------------
    // pitch slider new position
    // ------------------------------------------------
    hud.createSprite(5, 5);
    hud.fillRect(0, 0, 4, 4, TFT_BLUE);
    mapped_pitch = map(sensorData.wt901_ang_y, 90, -90, 64-52, 64+50);
    hud.pushSprite(121, (int)mapped_pitch, TFT_TRANSPARENT);
    yield();
    hud.deleteSprite();
    // ------------------------------------------------
    // pitch warning
    // ------------------------------------------------
    canvas8x8.clear();
    display.setColor(RGB_COLOR16(255,255,0));
    if (sensorData.wt901_ang_y<-45 || sensorData.wt901_ang_y>45) {canvas8x8.printFixed(2, 0, "!", STYLE_BOLD);}
    display.drawCanvas(120, 121, canvas8x8);
    
    // ------------------------------------------------
    // yaw scale
    // ------------------------------------------------
    display.setColor(RGB_COLOR16(0,0,255));
    display.drawHLine(64-52, 127, 64+54); // axis
    display.drawVLine(64-54, 123, 127); // -180
    display.drawVLine(64-53, 123, 127); // -180
    display.drawVLine(64-52, 123, 127); // -180
    display.drawVLine(64-38, 125, 127); // -135
    display.drawVLine(64-37, 125, 127); // -135
    display.drawVLine(64-25, 123, 127); // -90
    display.drawVLine(64-13, 125, 127); // -45
    display.drawVLine(64-12, 125, 127); // -45
    display.drawVLine(64, 123, 127); // 0
    display.drawVLine(64+12, 125, 127); // 45
    display.drawVLine(64+13, 125, 127); // 45
    display.drawVLine(64+25, 123, 127); // 90
    display.drawVLine(64+37, 125, 127); // 135
    display.drawVLine(64+38, 125, 127); // 135
    display.drawVLine(64+52, 123, 127); // 180
    display.drawVLine(64+53, 123, 127); // 180
    display.drawVLine(64+54, 123, 127); // 180
    // ------------------------------------------------
    // yaw slider clear position
    // ------------------------------------------------
    hud.createSprite(5, 5);
    hud.fillRect(0, 0, 4, 4, TFT_BLACK);
    hud.pushSprite((int)mapped_yaw, 121, TFT_TRANSPARENT);
    yield();
    hud.deleteSprite();
    // ------------------------------------------------
    // yaw slider new position (temporarily gyro z as 'holding the line')
    // ------------------------------------------------
    hud.createSprite(5, 5);
    hud.fillRect(0, 0, 4, 4, TFT_GREEN);
    mapped_yaw = map(sensorData.wt901_gyr_z, -180, 180, 64-52, 64+50);
    hud.pushSprite((int)mapped_yaw, 121, TFT_TRANSPARENT);
    yield();
    hud.deleteSprite();
    // ------------------------------------------------
    // yaw warning (temporarily gyro z as 'holding the line')
    // ------------------------------------------------
    canvas8x8.clear();
    display.setColor(RGB_COLOR16(255,255,0));
    if (sensorData.wt901_gyr_z<-90 || sensorData.wt901_gyr_z>90) {canvas8x8.printFixed(2, 0, "!", STYLE_BOLD);}
    display.drawCanvas(0, 121, canvas8x8);

    // ------------------------------------------------
    // dev
    // ------------------------------------------------
    // gpattData.line_flag;
    // gpattData.static_flag;
    // gpattData.run_state_flag;
    // gpattData.run_inetial_flag;
    // gpattData.ins;

    // ------------------------------------------------
    // heading degrees
    // ------------------------------------------------
    canvas42x8.clear();
    display.setColor(systemData.color_content);
    canvas42x8.printFixed(0, 0, String(gnrmcData.ground_heading).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 10, canvas42x8);
    // ------------------------------------------------
    // heading
    // ------------------------------------------------
    canvas28x8.clear();
    display.setColor(systemData.color_content);
    canvas28x8.printFixed((int)(28/2)-((int)(strlen(String(satData.ground_heading).c_str())/2)*6), 0, String(satData.ground_heading).c_str(), STYLE_BOLD);
    display.drawCanvas(47, 10, canvas28x8);

    // ------------------------------------------------
    // degrees latitude
    // ------------------------------------------------
    canvas74x8.clear();
    display.setColor(systemData.color_content);
    canvas74x8.printFixed(0, 0, String(satData.degrees_latitude, 7).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 20, canvas74x8);
    // ------------------------------------------------
    // degrees longitude
    // ------------------------------------------------
    canvas74x8.clear();
    display.setColor(systemData.color_content);
    canvas74x8.printFixed(0, 0, String(satData.degrees_longitude, 7).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 30, canvas74x8);

    // ------------------------------------------------
    // angle x
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content); // positive high
    if (sensorData.wt901_ang_x<0) {display.setColor(RGB_COLOR16(0,0,255));} // negative low
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_ang_x)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 50, canvas19x8);
    // ------------------------------------------------
    // acceleration x
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_acc_x<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_acc_x)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 60, canvas19x8);
    // ------------------------------------------------
    // gyro x
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_gyr_x<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_gyr_x)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 70, canvas19x8);

    // ------------------------------------------------
    // angle y
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_ang_y<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_ang_y)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 10, canvas19x8);
    // ------------------------------------------------
    // acceleration y
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_acc_y<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_acc_y)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 20, canvas19x8);
    // ------------------------------------------------
    // gyro y
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_gyr_y<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_gyr_y)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 30, canvas19x8);

    // ------------------------------------------------
    // angle z
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_ang_z<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_ang_z)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 90, canvas19x8);
    // ------------------------------------------------
    // acceleration z
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_acc_z<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_acc_z)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 100, canvas19x8);
    // ------------------------------------------------
    // gyro z
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    if (sensorData.wt901_gyr_z<0) {display.setColor(RGB_COLOR16(0,0,255));}
    canvas19x8.printFixed(0, 0, String((int)abs(sensorData.wt901_gyr_z)).c_str(), STYLE_BOLD);
    display.drawCanvas(100, 110, canvas19x8);

    // ------------------------------------------------
    // altitude (full width)
    // ------------------------------------------------
    canvas60x8.clear();
    display.setColor(systemData.color_content);
    canvas60x8.printFixed(0, 0, String(atoi(gnggaData.altitude)).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 90, canvas60x8);
    // ------------------------------------------------
    // ground speed
    // ------------------------------------------------
    canvas60x8.clear();
    display.setColor(systemData.color_content);
    canvas60x8.printFixed(0, 0, String(atoi(gnrmcData.ground_speed)).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 100, canvas60x8);
    // ------------------------------------------------
    // mileage (full width)
    // ------------------------------------------------
    canvas60x8.clear();
    display.setColor(systemData.color_content);
    canvas60x8.printFixed(0, 0, String(atoi(gpattData.mileage)).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 110, canvas60x8);
    // ------------------------------------------------
    // joy stick 0: up
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_0_u).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 40, canvas19x8);
    // ------------------------------------------------
    // joy stick 0: down
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_0_d).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 50, canvas19x8);
    // ------------------------------------------------
    // joy stick 0: left
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_0_l).c_str(), STYLE_BOLD);
    display.drawCanvas(21, 40, canvas19x8);
    // ------------------------------------------------
    // joy stick 0: right
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_0_r).c_str(), STYLE_BOLD);
    display.drawCanvas(21, 50, canvas19x8);
    // ------------------------------------------------
    // joy stick 1: up
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_1_u).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 60, canvas19x8);
    // ------------------------------------------------
    // joy stick 1: down
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_1_d).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 70, canvas19x8);
    // ------------------------------------------------
    // joy stick 1: left
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_1_l).c_str(), STYLE_BOLD);
    display.drawCanvas(21, 60, canvas19x8);
    // ------------------------------------------------
    // joy stick 1: right
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_1_r).c_str(), STYLE_BOLD);
    display.drawCanvas(21, 70, canvas19x8);
    // ------------------------------------------------
    // joy stick 0: click
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_0_c).c_str(), STYLE_BOLD);
    display.drawCanvas(0, 80, canvas19x8);
    // ------------------------------------------------
    // joy stick 1: click
    // ------------------------------------------------
    canvas19x8.clear();
    display.setColor(systemData.color_content);
    canvas19x8.printFixed(0, 0, String(sensorData.as_1_c).c_str(), STYLE_BOLD);
    display.drawCanvas(21, 80, canvas19x8);
    // ------------------------------------------------
    // UAP
    // ------------------------------------------------
    DisplayUAP();
    // delay(20); // uncomment to temporarily fix if overloading only on uap frame
  }

  // ----------------------------------------------------------------------------------------------------------------
  //                                                                                                   MAGNETIC FIELD
  // ----------------------------------------------------------------------------------------------------------------
  else if (menu_page==page_view_magnetic_field) {
    // ------------------------------------------------
    // static data
    // ------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      drawMainBorder();
      drawGeneralTitle("MAG FIELD", systemData.color_title, systemData.color_border);
      display.setColor(systemData.color_border);
      display.drawHLine(1, 50, 127);
      display.drawHLine(1, 89, 127);
      display.setColor(systemData.color_subtitle);
      canvas19x8.clear();
      canvas19x8.printFixed(1, 1, "MFX", STYLE_BOLD);
      display.drawCanvas(3, 14, canvas19x8);
      canvas19x8.clear();
      canvas19x8.printFixed(1, 1, "MFY", STYLE_BOLD);
      display.drawCanvas(3, 52, canvas19x8);
      canvas19x8.clear();
      canvas19x8.printFixed(1, 1, "MFZ", STYLE_BOLD);
      display.drawCanvas(3, 91, canvas19x8);
    }
    // ------------------------------------------------
    // dynamic data
    // ------------------------------------------------
    // ------------------------------------------------
    // load
    // ------------------------------------------------
    DisplayDiscreteLoadPercentage(115, 3, 10);
    // ------------------------------------------------
    // satellites & sync
    // ------------------------------------------------
    if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
    else {DisplaySignal(3, 3);}
    DisplayDebugSymbol(18, 3);
    // ------------------------------------------------
    // magnetic field xyz
    // ------------------------------------------------
    canvas92x8.clear();
    display.setColor(systemData.color_content);
    canvas92x8.printFixed(1, 1, String(sensorData.wt901_mag_x).c_str(), STYLE_BOLD);
    display.drawCanvas(28, 14, canvas92x8);
    canvas92x8.clear();
    display.setColor(systemData.color_content);
    canvas92x8.printFixed(1, 1, String(sensorData.wt901_mag_y).c_str(), STYLE_BOLD);
    display.drawCanvas(28, 52, canvas92x8);
    canvas92x8.clear();
    display.setColor(systemData.color_content);
    canvas92x8.printFixed(1, 1, String(sensorData.wt901_mag_z).c_str(), STYLE_BOLD);
    display.drawCanvas(28, 91, canvas92x8);
    // ------------------------------------------------
    // magnetic field x axis graph
    // ------------------------------------------------
    // ------------------------------------------------
    // magnetic field y axis graph
    // ------------------------------------------------
    // ------------------------------------------------
    // magnetic field z axis graph
    // ------------------------------------------------
  }

  // ----------------------------------------------------------------------------------------------------------------
  //                                                                                                   LED INDICATORS
  // ----------------------------------------------------------------------------------------------------------------
  else if (menu_page==page_indicators) {
    // ------------------------------------------------
    // static data
    // ------------------------------------------------
    if ((menu_page != previous_menu_page) || (ui_cleared==true)) {
      previous_menu_page=menu_page; display.clear();
      drawMainBorder();
      drawGeneralTitle("INDICATORS", systemData.color_title, systemData.color_border);


    }
    // ------------------------------------------------
    // dynamic data
    // ------------------------------------------------
    // ------------------------------------------------
    // load
    // ------------------------------------------------
    DisplayDiscreteLoadPercentage(115, 3, 10);
    // ------------------------------------------------
    // satellites & sync
    // ------------------------------------------------
    if (rtc_sync_flag==true) {DisplayRTCSync(3, 3);}
    else {DisplaySignal(3, 3);}
    DisplayDebugSymbol(18, 3);
    // ------------------------------------------------
    // iter matrix indicator colors
    // ------------------------------------------------
    menuIndicatorsItems[0]=systemData.char_indicator_colors_m0[matrixData.matrix_indicator_colors[0][0]];
    menuIndicatorsItems[1]=systemData.char_indicator_colors_m1[matrixData.matrix_indicator_colors[0][1]];
    menuIndicatorsItems[2]=systemData.char_indicator_colors_m2[matrixData.matrix_indicator_colors[0][2]];
    menuIndicatorsItems[3]=systemData.char_indicator_colors_m3[matrixData.matrix_indicator_colors[0][3]];
    menuIndicatorsItems[4]=systemData.char_indicator_colors_m4[matrixData.matrix_indicator_colors[0][4]];
    menuIndicatorsItems[5]=systemData.char_indicator_colors_m5[matrixData.matrix_indicator_colors[0][5]];
    menuIndicatorsItems[6]=systemData.char_indicator_colors_m6[matrixData.matrix_indicator_colors[0][6]];
    menuIndicatorsItems[7]=systemData.char_indicator_colors_m7[matrixData.matrix_indicator_colors[0][7]];
    menuIndicatorsItems[8]=systemData.char_indicator_colors_m8[matrixData.matrix_indicator_colors[0][8]];
    menuIndicatorsItems[9]=systemData.char_indicator_colors_m9[matrixData.matrix_indicator_colors[0][9]];
    menuIndicatorsItems[10]=systemData.char_indicator_colors_m10[matrixData.matrix_indicator_colors[0][10]];
    menuIndicatorsItems[11]=systemData.char_indicator_colors_m11[matrixData.matrix_indicator_colors[0][11]];
    menuIndicatorsItems[12]=systemData.char_indicator_colors_m12[matrixData.matrix_indicator_colors[0][12]];
    menuIndicatorsItems[13]=systemData.char_indicator_colors_m13[matrixData.matrix_indicator_colors[0][13]];
    menuIndicatorsItems[14]=systemData.char_indicator_colors_m14[matrixData.matrix_indicator_colors[0][14]];
    menuIndicatorsItems[15]=systemData.char_indicator_colors_m15[matrixData.matrix_indicator_colors[0][15]];
    menuIndicatorsItems[16]=systemData.char_indicator_colors_m16[matrixData.matrix_indicator_colors[0][16]];
    menuIndicatorsItems[17]=systemData.char_indicator_colors_m17[matrixData.matrix_indicator_colors[0][17]];
    menuIndicatorsItems[18]=systemData.char_indicator_colors_m18[matrixData.matrix_indicator_colors[0][18]];
    menuIndicatorsItems[19]=systemData.char_indicator_colors_m19[matrixData.matrix_indicator_colors[0][19]];
    // ------------------------------------------------
    // menu
    // ------------------------------------------------
    if (interaction_updateui==true) {
      interaction_updateui=false;
      display.setColor(systemData.color_content);
      display.setColor(systemData.color_menu_border);
      menuIndicators.showMenuBorder(display);
      display.setColor(systemData.color_menu_content);
      menuIndicators.showMenuContent(display);
    }
  }

  // -------------------------------------------------------
  // set flag last
  // -------------------------------------------------------
  ui_cleared=false;
  }

  // ---------------------------------------------------------
  //                                           OLED PROTECTION
  // ---------------------------------------------------------
  if ((ui_cleared==false) && (update_ui==false)) {
    // uncomment if issues occur using faster option
    // display.clear();
    // display.clear();
    // display.clear();
    // faster
    canvas128x128.clear();
    display.drawCanvas(0, 0, canvas128x128);
    ui_cleared=true;
  }
  
  // ---------------------------------------------------------
  // set flag
  // ---------------------------------------------------------
  update_ui_complete=true;
  // ---------------------------------------------------------
  // delay next iteration of task
  // ---------------------------------------------------------
  delay(20);
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                       I2C DATA
// ------------------------------------------------------------------------------------------------------------------------------

#define I2C_ADDR_CONTROL_PAD 8
#define I2C_ADDR_PORTCONTROLLER_0 9
#define I2C_ADDR_WT901_0 16

struct I2CLinkStruct {
  char * token;
  int i_token=0;
  byte OUTPUT_BUFFER[32]; // bytes to be sent
  char INPUT_BUFFER[32];  // chars received
  char TMP_BUFFER_0[32];  // chars of bytes to be sent
  char TMP_BUFFER_1[32];  // some space for type conversions
  int I2CADDRESSINDEX=0;
  int I2CADDRESSRANGEMIN=0;   // for performance this should be modifiable, can be min zero
  int I2CADDRESSRANGEMAX=50; // for performance this should be modifiable, can be max 127
  String TMP_BUFFER_STRING;
};
I2CLinkStruct I2CLink;

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                  I2C INTERRUPT
// ------------------------------------------------------------------------------------------------------------------------------

/*
[this setup is for custom i2c peripherals]

1: Master is interrupted.
2: Master sweeps address range.
3: Response is parsed from slaves (strongly recommended to design custom slaves to clear their message buffers after sending message buffer).

Pros:
1: no need for slaves and masters to switch between master/slave mode.
2: no need to poll slaves in case they have a message (which they often may not).
3: requests are made when they need to be (because a slave has a messaage and so interrupted).
4: allows at least 127 custom sensor slaves for all kinds of things that can return data to the master.

Cons:
1: requires 3 wires (over 2 I2C wires) per slave (SDA, SCL, interrupt).

Note:
1: resistors would be required for multiple slaves interrupting on the same pin.
2: care should be taken so that slave messages do not conflict (slaves having the same messages). use of acronym names may be used in message content. 
3: scanning may be preferrable during development but in production may prefer explicitly addressing devices (scanning takes time).
   reducing scanner address range may also be more preferrable as a production solution, so that slaves can still share one interrupt pin and
   scan time is also reduced.
4: consideration should be payed to weather a slave should be on the general I2C extension bus (these devices should be able to interrupt), or
   on the I2C multilpexer (devices that can be polled satisfactorily), in which it is recommended to poll the I2C device on a channel in getSensorData.
*/

void ISR_I2C_PERIPHERAL() {
  make_i2c_request=true;
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      I2C WRITE
// ------------------------------------------------------------------------------------------------------------------------------

void writeI2C(int I2C_Address) {
  // --------------------
  // compile bytes array
  // --------------------
  memset(I2CLink.OUTPUT_BUFFER, 0, sizeof(I2CLink.OUTPUT_BUFFER));
  for (byte i=0;i<sizeof(I2CLink.OUTPUT_BUFFER);i++) {I2CLink.OUTPUT_BUFFER[i]=(byte)I2CLink.TMP_BUFFER_0[i];}
  // --------------------
  // begin
  // --------------------
  Wire.beginTransmission(I2C_Address);
  // --------------------
  // write bytes array
  // --------------------
  Wire.write(I2CLink.OUTPUT_BUFFER, sizeof(I2CLink.OUTPUT_BUFFER));
  // --------------------
  // end
  // --------------------
  Wire.endTransmission();
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                         I2C REQUEST FROM WT901
// ------------------------------------------------------------------------------------------------------------------------------

bool init_wt901=true;

void requestWT901() {

  // wtt0 = millis(); // total time

  // --------------------------------------------------
  // Make 4 requests, collect and sort the data.
  // --------------------------------------------------
  for (int i=0; i<4; i++) {
    // ----------------------------------------------
    // request
    // ----------------------------------------------
    memset(I2CLink.INPUT_BUFFER, 0, sizeof(I2CLink.INPUT_BUFFER));
    Wire.requestFrom(I2C_ADDR_WT901_0, sizeof(I2CLink.INPUT_BUFFER));
    Wire.readBytesUntil('\n', I2CLink.INPUT_BUFFER, sizeof(I2CLink.INPUT_BUFFER));
    // Serial.println("[I2CLink.INPUT_BUFFER]" + String(I2CLink.INPUT_BUFFER));
    // ----------------------------------------------
    // tokenize
    // ----------------------------------------------
    I2CLink.token = strtok(I2CLink.INPUT_BUFFER, ",");
    I2CLink.token=strtok(NULL, ",");
    I2CLink.i_token=0;
    if (strncmp(I2CLink.INPUT_BUFFER, "$A,", 2)==0) {
      while (I2CLink.token != NULL) {
        // Serial.println("[token " + String(I2CLink.i_token) + "] " + String(I2CLink.token));
        if (I2CLink.i_token==0) {sensorData.wt901_acc_x=atof(I2CLink.token);}
        if (I2CLink.i_token==1) {sensorData.wt901_acc_y=atof(I2CLink.token);}
        if (I2CLink.i_token==2) {sensorData.wt901_acc_z=atof(I2CLink.token);}
        I2CLink.token=strtok(NULL, ",");
        I2CLink.i_token++;
      }
      break; // uncomment to stop collecting until next time requestWT901 is called
    }
    else if (strncmp(I2CLink.INPUT_BUFFER, "$B,", 2)==0) {
      while (I2CLink.token != NULL) {
        // Serial.println("[token " + String(I2CLink.i_token) + "] " + String(I2CLink.token));
        if (I2CLink.i_token==0) {sensorData.wt901_ang_x=atof(I2CLink.token);}
        if (I2CLink.i_token==1) {sensorData.wt901_ang_y=atof(I2CLink.token);}
        if (I2CLink.i_token==2) {sensorData.wt901_ang_z=atof(I2CLink.token);}
        I2CLink.token=strtok(NULL, ",");
        I2CLink.i_token++;
      }
      break; // uncomment to stop collecting until next time requestWT901 is called
    }
    else if (strncmp(I2CLink.INPUT_BUFFER, "$C,", 2)==0) {
      while (I2CLink.token != NULL) {
        // Serial.println("[token " + String(I2CLink.i_token) + "] " + String(I2CLink.token));
        if (I2CLink.i_token==0) {sensorData.wt901_gyr_x=atof(I2CLink.token);}
        if (I2CLink.i_token==1) {sensorData.wt901_gyr_y=atof(I2CLink.token);}
        if (I2CLink.i_token==2) {sensorData.wt901_gyr_z=atof(I2CLink.token);}
        I2CLink.token=strtok(NULL, ",");
        I2CLink.i_token++;
      }
      break; // uncomment to stop collecting until next time requestWT901 is called
    }
    else if (strncmp(I2CLink.INPUT_BUFFER, "$D,", 2)==0) {
      while (I2CLink.token != NULL) {
        // Serial.println("[token " + String(I2CLink.i_token) + "] " + String(I2CLink.token));
        if (I2CLink.i_token==0) {sensorData.wt901_mag_x=atof(I2CLink.token);}
        if (I2CLink.i_token==1) {sensorData.wt901_mag_y=atof(I2CLink.token);}
        if (I2CLink.i_token==2) {sensorData.wt901_mag_z=atof(I2CLink.token);}
        I2CLink.token=strtok(NULL, ",");
        I2CLink.i_token++;
      }
      break; // uncomment to stop collecting until next time requestWT901 is called
    }
  }
  // Serial.println("[requestWT901] total: " + String(millis()-wtt0));
}

void joyStick() {
  // ----------------------------------------------
  // tokenize
  // ----------------------------------------------
  // Serial.println("[joyStick] " + String(I2CLink.INPUT_BUFFER));
  I2CLink.token = strtok(I2CLink.INPUT_BUFFER, ",");
  I2CLink.token=strtok(NULL, ",");
  I2CLink.token=strtok(NULL, ",");
  I2CLink.i_token=0;
  while (I2CLink.token != NULL) {
    // Serial.println("[token " + String(I2CLink.i_token) + "] " + String(I2CLink.token));
    if (I2CLink.i_token==0) {sensorData.as_0_u=atoi(I2CLink.token);}
    else if (I2CLink.i_token==1) {sensorData.as_0_d=atoi(I2CLink.token);}
    else if (I2CLink.i_token==2) {sensorData.as_0_l=atoi(I2CLink.token);}
    else if (I2CLink.i_token==3) {sensorData.as_0_r=atoi(I2CLink.token);}
    else if (I2CLink.i_token==4) {sensorData.as_0_c=atoi(I2CLink.token);}
    else if (I2CLink.i_token==5) {sensorData.as_1_u=atoi(I2CLink.token);}
    else if (I2CLink.i_token==6) {sensorData.as_1_d=atoi(I2CLink.token);}
    else if (I2CLink.i_token==7) {sensorData.as_1_l=atoi(I2CLink.token);}
    else if (I2CLink.i_token==8) {sensorData.as_1_r=atoi(I2CLink.token);}
    else if (I2CLink.i_token==9) {sensorData.as_1_c=atoi(I2CLink.token);}
    I2CLink.token=strtok(NULL, ",");
    I2CLink.i_token++;
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                   I2C REQUEST FROM CONTROL PAD
// ------------------------------------------------------------------------------------------------------------------------------

void requestControlPad() {
  // Serial.println("[requestControlPad] checking for a request.");
  // ----------------------------------------------
  // make request
  // ----------------------------------------------
  memset(I2CLink.INPUT_BUFFER, 0, sizeof(I2CLink.INPUT_BUFFER));
  Wire.requestFrom(I2C_ADDR_CONTROL_PAD, sizeof(I2CLink.INPUT_BUFFER));
  // ----------------------------------------------
  // receive from found device
  // ----------------------------------------------
  Wire.readBytesUntil('\n', I2CLink.INPUT_BUFFER, sizeof(I2CLink.INPUT_BUFFER));
  // Serial.println("[received] " + String(I2CLink.INPUT_BUFFER));

  // ---------------------------------------------------------------------------------------
  // skip if message or keep scanning if message empty (and dont parse the message in loop)
  // ---------------------------------------------------------------------------------------
  if (!strcmp(I2CLink.INPUT_BUFFER, "")==0) {
    // ------------------------------------------------------------------------------------------------------------------------------
    // READ RESPONSE
    // ------------------------------------------------------------------------------------------------------------------------------
    // ------------------------------------------------
    // record activity time
    // ------------------------------------------------
    unixtime_i2C_reponse=satData.rtc_unixtime;
    // Serial.println("[unixtime_i2C_reponse] " + String(unixtime_i2C_reponse));
    // ------------------------------------------------
    // blind button press protection
    // ------------------------------------------------
    if (update_ui==true) {
      // ------------------------------------------------
      // parse special interrupt buttons
      // ------------------------------------------------
      if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,I0")==0) {Serial.println("[button] ISR0");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,I1")==0) {Serial.println("[button] ISR1");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,I2")==0) {Serial.println("[button] ISR2");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,I3")==0) {Serial.println("[button] ISR3");}
      // ------------------------------------------------
      // parse numpad buttons
      // ------------------------------------------------
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,0")==0) {Serial.println("[button] 0"); inputChar(digit_0);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,1")==0) {Serial.println("[button] 1"); inputChar(digit_1);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,2")==0) {Serial.println("[button] 2"); inputChar(digit_2);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,3")==0) {Serial.println("[button] 3"); inputChar(digit_3);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,4")==0) {Serial.println("[button] 4"); inputChar(digit_4);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,5")==0) {Serial.println("[button] 5"); inputChar(digit_5);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,6")==0) {Serial.println("[button] 6"); inputChar(digit_6);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,7")==0) {Serial.println("[button] 7"); inputChar(digit_7);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,8")==0) {Serial.println("[button] 8"); inputChar(digit_8);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,9")==0) {Serial.println("[button] 9"); inputChar(digit_9);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,10")==0) {Serial.println("[button] 10: ."); inputChar(period_char);}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,11")==0) {Serial.println("[button] 11: -"); inputChar(hyphen_char);}
      // ------------------------------------------------
      // parse navigation buttons
      // ------------------------------------------------
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,12")==0) {Serial.println("[button] 12: home"); menu_page=page_home; astroclock_key=0;}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,13")==0) {Serial.println("[button] 13: up"); menuUp();}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,14")==0) {Serial.println("[button] 14: right"); menuRight();}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,15")==0) {Serial.println("[button] 15: down"); menuDown();}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,16")==0) {Serial.println("[button] 16: left"); menuLeft();}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,17")==0) {Serial.println("[button] 17: enter"); menuEnter();}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,18")==0) {Serial.println("[button] 18: delete"); if (allow_input_data==true) {input_data[strlen(input_data)-1]='\0';}}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,19")==0) {Serial.println("[button] 19: back"); menuBack();}
      // ------------------------------------------------
      // current spares
      // ------------------------------------------------
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,20")==0) {Serial.println("[button] 20");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,21")==0) {Serial.println("[button] 21");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,22")==0) {Serial.println("[button] 22");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,23")==0) {Serial.println("[button] 23");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,24")==0) {Serial.println("[button] 24");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,25")==0) {Serial.println("[button] 25");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,26")==0) {Serial.println("[button] 26");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,27")==0) {Serial.println("[button] 27");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,28")==0) {Serial.println("[button] 28");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,29")==0) {Serial.println("[button] 29");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,30")==0) {Serial.println("[button] 30");}
      else if (strcmp(I2CLink.INPUT_BUFFER, "$CP,B,31")==0) {Serial.println("[button] 31");}

      // else if (strncmp(I2CLink.INPUT_BUFFER, "$CP,A,", 6)==0) {Serial.println("[analog_stick_0_1] " + String(I2CLink.INPUT_BUFFER)); joyStick();}
      else if (strncmp(I2CLink.INPUT_BUFFER, "$CP,A,", 6)==0) {joyStick();}
    }
    // ---------------------------------------------------------------------
    // trip interaction_updateui flag once writing to display has completed.
    // ---------------------------------------------------------------------
    if (systemData.DISPLAY_ENABLED==true) {WaitToUpdateUI();}
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                PORT CONTROLLER
// ------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------
// Write Port Map
// ------------------------------------------------
void writePortControllerPortMap() {
  for (int i=0; i < 20; i++) {
    // debug("[matrix_port_map] " + String(matrixData.matrix_port_map[0][i]) + " [tmp_matrix_port_map] " + String(matrixData.tmp_matrix_port_map[0][i]));
    // -----------------------
    // check for change
    // -----------------------
    if (matrixData.matrix_port_map[0][i] != matrixData.tmp_matrix_port_map[0][i]) {
      // -----------------------
      // tag
      // -----------------------
      memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
      strcpy(I2CLink.TMP_BUFFER_0, "$P,");
      // -----------------------
      // matrix switch index
      // -----------------------
      memset(I2CLink.TMP_BUFFER_1, 0, sizeof(I2CLink.TMP_BUFFER_1));
      itoa(i, I2CLink.TMP_BUFFER_1, 10);
      strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_1);
      strcat(I2CLink.TMP_BUFFER_0, ",");
      // -----------------------
      // data
      // -----------------------
      itoa(matrixData.matrix_port_map[0][i], I2CLink.TMP_BUFFER_1, 10);
      strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_1);
      // -----------------------
      // write instruction
      // -----------------------
      writeI2C(I2C_ADDR_PORTCONTROLLER_0);
      // -----------------------
      // update
      // -----------------------
      matrixData.tmp_matrix_port_map[0][i]=matrixData.matrix_port_map[0][i];
      // -----------------------
      // debug
      // -----------------------
      // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
    }
  }
}

// ------------------------------------------------
// Write Switch State
// ------------------------------------------------
void writePortControllerSwitchState() {
  for (int i=0; i < 20; i++) {
    // debug("[matrix_switch_state] " + String(matrixData.matrix_switch_state[0][i]) + " [tmp_matrix_switch_state] " + String(matrixData.tmp_matrix_switch_state[0][i]));
    // -----------------------
    // check for change
    // -----------------------
    if (matrixData.matrix_switch_state[0][i] != matrixData.tmp_matrix_switch_state[0][i]) {
      // -----------------------
      // tag
      // -----------------------
      memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
      strcpy(I2CLink.TMP_BUFFER_0, "$M,");
      // -----------------------
      // matrix switch index
      // -----------------------
      memset(I2CLink.TMP_BUFFER_1, 0, sizeof(I2CLink.TMP_BUFFER_1));
      itoa(i, I2CLink.TMP_BUFFER_1, 10);
      strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_1);
      strcat(I2CLink.TMP_BUFFER_0, ",");
      // -----------------------
      // data
      // -----------------------
      itoa(matrixData.matrix_switch_state[0][i], I2CLink.TMP_BUFFER_1, 10);
      strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_1);
      // -----------------------
      // write instruction
      // -----------------------
      writeI2C(I2C_ADDR_PORTCONTROLLER_0);
      // -----------------------
      // update
      // -----------------------
      matrixData.tmp_matrix_switch_state[0][i]=matrixData.matrix_switch_state[0][i];
      // -----------------------
      // debug
      // -----------------------
      // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
    }
  }
}

// ------------------------------------------------
// Write Matrix Indicator Colors
// ------------------------------------------------
void writePortControllerMatrixIndicatorColors() {
  for (int i=0; i < 20; i++) {
    // -----------------------
    // check for change
    // -----------------------
    if (matrixData.matrix_indicator_colors[0][i] != matrixData.tmp_matrix_indicator_colors[0][i]) {
      // -----------------------
      // tag
      // -----------------------
      memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
      strcpy(I2CLink.TMP_BUFFER_0, "$I,");
      // -----------------------
      // matrix switch index
      // -----------------------
      memset(I2CLink.TMP_BUFFER_1, 0, sizeof(I2CLink.TMP_BUFFER_1));
      itoa(i, I2CLink.TMP_BUFFER_1, 10);
      strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_1);
      strcat(I2CLink.TMP_BUFFER_0, ",");
      // -----------------------
      // data
      // -----------------------
      itoa(matrixData.matrix_indicator_colors[0][i], I2CLink.TMP_BUFFER_1, 10);
      strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_1);
      // -----------------------
      // write instruction
      // -----------------------
      writeI2C(I2C_ADDR_PORTCONTROLLER_0);
      // -----------------------
      // update
      // -----------------------
      matrixData.tmp_matrix_indicator_colors[0][i]=matrixData.matrix_indicator_colors[0][i];
      // -----------------------
      // debug
      // -----------------------
      // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
    }
  }
}

// ------------------------------------------------
// Write GPS Signal LED
// ------------------------------------------------

void writePortControllerGPSSignalLED() {
    memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
    // -----------------------
    // tag
    // -----------------------
    strcpy(I2CLink.TMP_BUFFER_0, "$GPSSIG,");
    // -----------------------
    // data
    // -----------------------
    if (gps_signal==0) {strcat(I2CLink.TMP_BUFFER_0, "0");}
    else if (gps_signal==1) {strcat(I2CLink.TMP_BUFFER_0, "1");}
    else if (gps_signal==2) {strcat(I2CLink.TMP_BUFFER_0, "2");}
    // -----------------------
    // write instruction
    // -----------------------
    writeI2C(I2C_ADDR_PORTCONTROLLER_0);
    // -----------------------
    // debug
    // -----------------------
    // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
}

// ------------------------------------------------
// Write Overload Value
// ------------------------------------------------
void writePortControllerOverloadValue() {
    // -----------------------
    // tag
    // -----------------------
    memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
    strcpy(I2CLink.TMP_BUFFER_0, "$OLOAD,");
    // -----------------------
    // data
    // -----------------------
    if (systemData.overload==false) {strcat(I2CLink.TMP_BUFFER_0, "0");}
    else {strcat(I2CLink.TMP_BUFFER_0, "1");}
    // -----------------------
    // write instruction
    // -----------------------
    writeI2C(I2C_ADDR_PORTCONTROLLER_0);
    // -----------------------
    // debug
    // -----------------------
    // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
}

// ------------------------------------------------
// Write Matrix Enabled/Disabled
// ------------------------------------------------
void writePortControllerIOEnabled() {
  // -----------------------
  // tag
  // -----------------------
  memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
  strcpy(I2CLink.TMP_BUFFER_0, "$MENABLED,");
  // -----------------------
  // data
  // -----------------------
  if (systemData.matrix_io_enabled==false) {strcat(I2CLink.TMP_BUFFER_0, "0");}
  else {strcat(I2CLink.TMP_BUFFER_0, "1");}
  // -----------------------
  // write instruction
  // -----------------------
  writeI2C(I2C_ADDR_PORTCONTROLLER_0);
  // -----------------------
  // debug
  // -----------------------
  // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
}

// ------------------------------------------------
// Write Joy Stick Data
// ------------------------------------------------
void writePortControllerJoyStickData() {
  // -----------------------
  // data
  // -----------------------
  I2CLink.TMP_BUFFER_STRING = String("$JOY,") +
  String(sensorData.as_0_u) + String(",") +
  String(sensorData.as_0_d) + String(",") +
  String(sensorData.as_0_l) + String(",") +
  String(sensorData.as_0_r) + String(",") +
  String(sensorData.as_0_c) + String(",") +
  String(sensorData.as_1_u) + String(",") +
  String(sensorData.as_1_d) + String(",") +
  String(sensorData.as_1_l) + String(",") +
  String(sensorData.as_1_r) + String(",") +
  String(sensorData.as_1_c)
  ;
  // Serial.println("[sizeof(I2CLink.TMP_BUFFER_0)]" + String(sizeof(I2CLink.TMP_BUFFER_0)));
  // Serial.println("[sizeof(I2CLink.TMP_BUFFER_STRING)]" + String(sizeof(I2CLink.TMP_BUFFER_STRING)));
  memset(I2CLink.TMP_BUFFER_0, 0, sizeof(I2CLink.TMP_BUFFER_0));
  strcat(I2CLink.TMP_BUFFER_0, I2CLink.TMP_BUFFER_STRING.c_str());
  // -----------------------
  // write instruction
  // -----------------------
  writeI2C(I2C_ADDR_PORTCONTROLLER_0);
  // -----------------------
  // debug
  // -----------------------
  // debug("[portcontroller] instruction:" + String(I2CLink.TMP_BUFFER_0));
}

// ------------------------------------------------
// Write To Enabled Port Controller
// ------------------------------------------------
void writeToEnabledPortController() {
  writePortControllerIOEnabled();
  writePortControllerPortMap();
  writePortControllerSwitchState();
  writePortControllerJoyStickData();
  // ------------------------------------------------
  // (uncomment to enable leds)
  // ------------------------------------------------
  // writePortControllerMatrixIndicatorColors();
  // writePortControllerGPSSignalLED();
  // writePortControllerOverloadValue();
}

// ---------------------------------------------------------------
// Write To Semi-Disabled Port Controller (No Matrix Instructions)
// ---------------------------------------------------------------
void writeToSemiDisabledPortController() {
  writePortControllerJoyStickData();
  writePortControllerIOEnabled();
  // writePortControllerGPSSignalLED();
  // writePortControllerOverloadValue();
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                       READ GPS
// ------------------------------------------------------------------------------------------------------------------------------

int gps_done_t0;
int gps_done_t1;

void readGPS(void * pvParameters) {
  while (1) {
    // ------------------------------------------------------------
    // lock to avoid potential race conditions when using gps data
    // ------------------------------------------------------------
    if (gps_done==false) {
      gps_done_t0=micros();
      // --------
      // defaults
      // --------
      serial1Data.gngga_bool=false;
      serial1Data.gnrmc_bool=false;
      serial1Data.gpatt_bool=false;
      // --------
      // override
      // --------
      if (systemData.gngga_enabled==false) {serial1Data.gngga_bool=true;}
      if (systemData.gnrmc_enabled==false) {serial1Data.gnrmc_bool=true;}
      if (systemData.gpatt_enabled==false) {serial1Data.gpatt_bool=true;}
      // --------
      // clear
      // --------
      memset(gnggaData.sentence, 0, sizeof(gnggaData.sentence));
      memset(gnrmcData.sentence, 0, sizeof(gnrmcData.sentence));
      memset(gpattData.sentence, 0, sizeof(gpattData.sentence));
      // --------------------------------------------------------------------------
      // read sentences coming from the WTGPS300P. (WTGPS300P outputs every 100ms).
      // --------------------------------------------------------------------------
      while (1) {
        if (Serial2.available()) {
          // ----------------------------------------------------------------------
          // leave immediately if everything of interest has been collected
          // ----------------------------------------------------------------------
          if (serial1Data.gngga_bool==true && serial1Data.gnrmc_bool==true && serial1Data.gpatt_bool==true) {break;}
          // ----------------------------------------------------------------------
          // read serial into buffer until buffer max or special char
          // ----------------------------------------------------------------------
          memset(SerialLink.BUFFER, 0, sizeof(SerialLink.BUFFER));
          SerialLink.nbytes=Serial2.readBytesUntil('\n', SerialLink.BUFFER, sizeof(SerialLink.BUFFER));
          // ----------------------------------------------------------------------
          // exclude partial reads
          // ----------------------------------------------------------------------
          if (SerialLink.nbytes>10) {
            // -------------------------------------------------
            // read GNGGA
            // -------------------------------------------------   
            if (serial1Data.gngga_bool==false) {
              if (strncmp(SerialLink.BUFFER, "$GNGGA", 6)==0) {
                if (systemData.gngga_enabled==true){
                  strcpy(gnggaData.sentence, SerialLink.BUFFER);
                  serial1Data.gngga_bool=true;
                  if (serial1Data.gngga_bool==true && serial1Data.gnrmc_bool==true && serial1Data.gpatt_bool==true) {break;}
                }
              }
            }
            // -------------------------------------------------
            // read GNRMC
            // -------------------------------------------------   
            else if (serial1Data.gnrmc_bool==false) {
              if (strncmp(SerialLink.BUFFER, "$GNRMC", 6)==0) {
                if (systemData.gnrmc_enabled==true){
                  strcpy(gnrmcData.sentence, SerialLink.BUFFER);
                  serial1Data.gnrmc_bool=true;
                  if (serial1Data.gngga_bool==true && serial1Data.gnrmc_bool==true && serial1Data.gpatt_bool==true) {break;}
                }
              }
            }
            // -------------------------------------------------
            // read GPATT
            // -------------------------------------------------   
            else if (serial1Data.gpatt_bool==false) {
              if (strncmp(SerialLink.BUFFER, "$GPATT", 6)==0) {
                if (systemData.gpatt_enabled==true){
                  strcpy(gpattData.sentence, SerialLink.BUFFER);
                  serial1Data.gpatt_bool=true;
                  if (serial1Data.gngga_bool==true && serial1Data.gnrmc_bool==true && serial1Data.gpatt_bool==true) {break;}
                }
              }
            }
          }
        }
      }
      // --------------------------------------------------------------------------
      // parse data if all sentences have been collected
      // --------------------------------------------------------------------------
      if (serial1Data.gngga_bool==true && serial1Data.gnrmc_bool==true && serial1Data.gpatt_bool==true) {
        // -------------------------------------------------
        // check GNGGA
        // -------------------------------------------------
        if (systemData.gngga_enabled==true){
          if (systemData.output_gngga_enabled==true) {
            memset(gnggaData.outsentence, 0, sizeof(gnggaData.outsentence));
            strcpy(gnggaData.outsentence, gnggaData.sentence);
          }
          gnggaData.valid_checksum=validateChecksum(gnggaData.sentence);
          if (gnggaData.valid_checksum==true) {clearGNGGA(); GNGGA();}
          else {gnggaData.bad_checksum_validity++; if (gnggaData.bad_checksum_validity>99) {gnggaData.bad_checksum_validity=0;}}
        }
        // -------------------------------------------------
        // read GNRMC
        // -------------------------------------------------
        if (systemData.gnrmc_enabled==true) {
          if (systemData.output_gnrmc_enabled==true) {
            memset(gnrmcData.outsentence, 0, sizeof(gnrmcData.outsentence));
            strcpy(gnrmcData.outsentence, gnrmcData.sentence);
          }
          gnrmcData.valid_checksum=validateChecksum(gnrmcData.sentence);
          if (gnrmcData.valid_checksum==true) {clearGNRMC(); GNRMC();}
          else {gnrmcData.bad_checksum_validity++; if (gnrmcData.bad_checksum_validity>99) {gnrmcData.bad_checksum_validity=0;}}
        }
        // -------------------------------------------------
        // read GPATT
        // -------------------------------------------------
        if (systemData.gpatt_enabled==true) {
          if (systemData.output_gpatt_enabled==true) {
            memset(gpattData.outsentence, 0, sizeof(gpattData.outsentence));
            strcpy(gpattData.outsentence, gpattData.sentence);
          }
          gpattData.valid_checksum=validateChecksum(gpattData.sentence);
          if (gpattData.valid_checksum==true) {clearGPATT(); GPATT();}
          else {gpattData.bad_checksum_validity++; if (gpattData.bad_checksum_validity>99) {gpattData.bad_checksum_validity=0;}}
        }
        // ------------------------------------------------------------------------
        // set completion flag
        // ------------------------------------------------------------------------
        if ((gnggaData.valid_checksum=true) && (gnrmcData.valid_checksum=true) && (gpattData.valid_checksum=true)) {
          gps_done_t1=micros();
          gps_done=true;
        }
      }
    }
    // ------------------------------------------------
    // delay next iteration of task
    // ------------------------------------------------
    delay(1);
  }
}

// ----------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                         CmdProcess
// ----------------------------------------------------------------------------------------------------------------------------------

String TMP_CMD_STRING_0;
String TMP_CMD_STRING_1;
String TMP_CMD_STRING_2;
String TMP_CMD_STRING_3;
String TMP_CMD_STRING_4;
String TMP_CMD_STRING_5;
String TMP_CMD_STRING_6;
String TMP_CMD_STRING_7;
String TMP_CMD_STRING_8;
String TMP_CMD_STRING_9;
char *TMP_CMD_TOKEN;
int ITER_TMP_CMD_TOKEN;
int COMMAND_PASS=0;

static void PrintHelp() {
  
  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                               SATIO                                               ");
  Serial.println("---------------------------------------------------------------------------------------------------");
  
  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                            INFORMATION (SENTENCES)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch output satio                       Return SatIO Sentence With Checksum.");
  Serial.println("switch output gngga                       Return GNGGA Sentence With Checksum.");
  Serial.println("switch output gnrmc                       Return GNRMC Sentence With Checksum.");
  Serial.println("switch output gpatt                       Return GPATT Sentence With Checksum.");
  Serial.println("switch output matrix                      Return Matrix Sentence With Checksum.");
  Serial.println("switch output sensors                     Return Sensor Sentence With Checksum.");
  Serial.println("switch output sun                         Return Sun Sentence With Checksum.");
  Serial.println("switch output moon                        Return Moon Sentence With Checksum.");
  Serial.println("switch output mercury                     Return Mercury Sentence With Checksum.");
  Serial.println("switch output venus                       Return Venus Sentence With Checksum.");
  Serial.println("switch output mars                        Return Mars Sentence With Checksum.");
  Serial.println("switch output jupiter                     Return Jupiter Sentence With Checksum.");
  Serial.println("switch output saturn                      Return Saturn Sentence With Checksum.");
  Serial.println("switch output uranus                      Return Uranus Sentence With Checksum.");
  Serial.println("switch output neptune                     Return Neptune Sentence With Checksum.");
  Serial.println("switch output meteors                     Return Meteors Sentence With Checksum.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                INFORMATION (SATIO)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print satio degrees_latitude              Return SATIO Degrees Latitude.");
  Serial.println("print satio degrees_longitude             Return SATIO Degrees Longitude.");
  Serial.println("print satio ground_heading                Return SATIO Ground Heading.");
  Serial.println("print satio formatted_local_time          Return SATIO Formatted Local Time.");
  Serial.println("print satio formatted_local_date          Return SATIO Formatted Local Date.");
  Serial.println("print satio formatted_rtc_sync_time       Return SATIO Formatted RTC Sync Time.");
  Serial.println("print satio formatted_rtc_sync_date       Return SATIO Formatted RTC Sync Date.");
  Serial.println("print satio formatted_rtc_time            Return SATIO Formatted RTC Time.");
  Serial.println("print satio formatted_rtc_date            Return SATIO Formatted RTC Date.");
  Serial.println("print satio utc_second_offset             Return SATIO UTC Second Offset.");
  Serial.println("print satio utc_auto_offset_flag          Return SATIO UTC Second Offset Flag.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                               INFORMATION (MATRIX)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print matrix -v                           Return all matrix data.");
  Serial.println("print matrix n                            Return matrix data for specified n.");
  Serial.println("print matrix enabled                      Return all enabled matrix switches.");
  Serial.println("print matrix disabled                     Return all disabled matrix switches.");
  Serial.println("print matrix active                       Return all active matrix switches.");
  Serial.println("print matrix inactive                     Return all inactive matrix switches.");
  Serial.println("print matrix enabled -v                   Return verbose all enabled matrix switches.");
  Serial.println("print matrix active -v                    Return verbose all active matrix switches.");
  Serial.println("print matrix inverted -v                  Return verbose all inverted matrix switch functions.");
  Serial.println("print matrix timers -v                    Return verbose all matrix switch timer values.");
  Serial.println("print matrix ports -v                     Return verbose all matrix switch ports.");
  Serial.println("print matrix functions -v                 Return verbose all matrix switch functions.");
  Serial.println("print matrix functions xyz -v             Return verbose all matrix switch function values.");
  Serial.println("print matrix expressions -v               Return verbose all matrix switch expressions.");
  Serial.println("print matrix available functions -v       Return verbose all available matrix switch functions.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                INFORMATION (GNGGA)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print gngga utc_time                      Return GNGGA UTC Time.");
  Serial.println("print gngga latitude                      Return GNGGA Latitude.");
  Serial.println("print gngga latitude_hemisphere           Return GNGGA Latitude Hemisphere.");
  Serial.println("print gngga longitude                     Return GNGGA Longitude.");
  Serial.println("print gngga longitude_hemisphere          Return GNGGA Longitude Hemisphere.");
  Serial.println("print gngga solution_status               Return GNGGA Solution Status.");
  Serial.println("print gngga satellite_count_gngga         Return GNGGA Satellite Count.");
  Serial.println("print gngga hdop_precision_factor         Return GNGGA HDOP Precision Factor.");
  Serial.println("print gngga altitude                      Return GNGGA Altitude.");
  Serial.println("print gngga altitude_units                Return GNGGA Altitude Units.");
  Serial.println("print gngga geoidal                       Return GNGGA Geoidal.");
  Serial.println("print gngga geoidal_units                 Return GNGGA Geoidal Units.");
  Serial.println("print gngga differential_delay            Return GNGGA Differential Delay.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                INFORMATION (GNRMC)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print gnrmc utc_time                      Return GNRMC UTC Time.");
  Serial.println("print gnrmc positioning_status            Return GNRMC Positioning Status.");
  Serial.println("print gnrmc latitude                      Return GNRMC Latitude.");
  Serial.println("print gnrmc latitude_hemisphere           Return GNRMC Latitude Hemisphere.");
  Serial.println("print gnrmc longitude                     Return GNRMC Longitude.");
  Serial.println("print gnrmc longitude_hemisphere          Return GNRMC Longitude Hemisphere.");
  Serial.println("print gnrmc ground_speed                  Return GNRMC Ground Speed.");
  Serial.println("print gnrmc ground_heading                Return GNRMC Ground Heading.");
  Serial.println("print gnrmc utc_date                      Return GNRMC UTC Date.");
  Serial.println("print gnrmc installation_angle            Return GNRMC Installation Angle.");
  Serial.println("print gnrmc installation_angle_direction  Return GNRMC Installation Angle Direction.");
  Serial.println("print gnrmc mode_indication               Return GNRMC Mode Indication.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                 INFORMATION(GPATT)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print gpatt pitch                         Return GPATT Pitch.");
  Serial.println("print gpatt roll                          Return GPATT Roll.");
  Serial.println("print gpatt yaw                           Return GPATT Yaw.");
  Serial.println("print gpatt software_version              Return GPATT Software Version.");
  Serial.println("print gpatt product_id                    Return GPATT Product ID.");
  Serial.println("print gpatt ins                           Return GPATT INS.");
  Serial.println("print gpatt hardware_version              Return GPATT Hardware Version.");
  Serial.println("print gpatt run_state_flag                Return GPATT Run State Flag.");
  Serial.println("print gpatt mis_angle_num                 Return GPATT Mis Angle Num.");
  Serial.println("print gpatt static_flag                   Return GPATT Static Flag.");
  Serial.println("print gpatt user_code                     Return GPATT User Code.");
  Serial.println("print gpatt gst_data                      Return GPATT GST Data.");
  Serial.println("print gpatt line_flag                     Return GPATT Line Flag.");
  Serial.println("print gpatt mis_att_flag                  Return GPATT Mis Att Flag.");
  Serial.println("print gpatt imu_kind                      Return GPATT IMU Kind.");
  Serial.println("print gpatt ubi_car_kind                  Return GPATT UBI Car Kind.");
  Serial.println("print gpatt mileage                       Return GPATT Mileage.");
  Serial.println("print gpatt run_inetial_flag              Return GPATT Run Inetial Flag.");
  Serial.println("print gpatt speed_enable                  Return GPATT Speed Enable.");
  Serial.println("print gpatt speed_num                     Return GPATT Speed Num.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                              INFORMATION (SENSORS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print dht11_h_0                           Return DHT11_0 Humidity.");
  Serial.println("print dht11_c_0                           Return DHT11_0 Celsius.");
  Serial.println("print dht11_f_0                           Return DHT11_0 Fahrenheit.");
  Serial.println("print dht11_hic_0                         Return DHT11_0 Heat Index Celsius.");
  Serial.println("print dht11_hif_0                         Return DHT11_0 Heat Index Fahrenheit.");
  Serial.println();
  Serial.println("print sensor_0                            Return Sensor 0 Value.");
  Serial.println("print sensor_1                            Return Sensor 1 Value.");
  Serial.println("print sensor_2                            Return Sensor 2 Value.");
  Serial.println("print sensor_3                            Return Sensor 3 Value.");
  Serial.println("print sensor_4                            Return Sensor 4 Value.");
  Serial.println("print sensor_5                            Return Sensor 5 Value.");
  Serial.println("print sensor_6                            Return Sensor 6 Value.");
  Serial.println("print sensor_7                            Return Sensor 7 Value.");
  Serial.println("print sensor_8                            Return Sensor 8 Value.");
  Serial.println("print sensor_9                            Return Sensor 9 Value.");
  Serial.println("print sensor_10                           Return Sensor 10 Value.");
  Serial.println("print sensor_11                           Return Sensor 11 Value.");
  Serial.println("print sensor_12                           Return Sensor 12 Value.");
  Serial.println("print sensor_13                           Return Sensor 13 Value.");
  Serial.println("print sensor_14                           Return Sensor 14 Value.");
  Serial.println("print sensor_15                           Return Sensor 15 Value.");
  
  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                INFORMATION (WT901)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print wt901_ang_x                         Return WT901 Angle X.");
  Serial.println("print wt901_ang_y                         Return WT901 Angle Y.");
  Serial.println("print wt901_ang_z                         Return WT901 Angle Z.");
  Serial.println("print wt901_mag_x                         Return WT901 Magnetic Field X.");
  Serial.println("print wt901_mag_y                         Return WT901 Magnetic Field Y.");
  Serial.println("print wt901_mag_z                         Return WT901 Magnetic Field Z.");
  Serial.println("print wt901_acc_x                         Return WT901 Acceleration X.");
  Serial.println("print wt901_acc_y                         Return WT901 Acceleration Y.");
  Serial.println("print wt901_acc_z                         Return WT901 Acceleration Z.");
  Serial.println("print wt901_gyr_x                         Return WT901 Gyro X.");
  Serial.println("print wt901_gyr_y                         Return WT901 Gyro Y.");
  Serial.println("print wt901_gyr_z                         Return WT901 Gyro Z.");

  Serial.println("");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                  INFORMATION (SUN)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print sun ra                              Return Sun Right Ascension.");
  Serial.println("print sun dec                             Return Sun Declination.");
  Serial.println("print sun az                              Return Sun Azimuth.");
  Serial.println("print sun alt                             Return Sun Altitude.");
  Serial.println("print sun r                               Return Sunrise.");
  Serial.println("print sun s                               Return Sunset.");
  Serial.println("print sun helat                           Return Sun Helioecliptic Latitude.");
  Serial.println("print sun helon                           Return Sun Helioecliptic Longitude.");
  Serial.println("print sun rv                              Return Sun Radius Vector.");
  Serial.println("print sun dis                             Return Sun Distance.");
  Serial.println("print sun elat                            Return Sun Ecliptic Latitude");
  Serial.println("print sun elon                            Return Sun Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                              INFORMATION (MERCURY)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print mercury ra                          Return Mercury Right Ascension.");
  Serial.println("print mercury dec                         Return Mercury Declination.");
  Serial.println("print mercury az                          Return Mercury Azimuth");
  Serial.println("print mercury alt                         Return Mercury Altitude.");
  Serial.println("print mercury r                           Return Mercury Rise.");
  Serial.println("print mercury s                           Return Mercury Set.");
  Serial.println("print mercury hlat                        Return Mercury Helioecliptic Latitude.");
  Serial.println("print mercury hlon                        Return Mercury Helioecliptic Longitude.");
  Serial.println("print mercury rv                          Return Mercury Radius Vector.");
  Serial.println("print mercury dis                         Return Mercury Distance.");
  Serial.println("print mercury elat                        Return Mercury Ecliptic Latitude.");
  Serial.println("print mercury elon                        Return Mercury Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                INFORMATION (VENUS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print venus ra                            Return Venus Right Ascension.");
  Serial.println("print venus dec                           Return Venus Declination.");
  Serial.println("print venus az                            Return Venus Azimuth");
  Serial.println("print venus alt                           Return Venus Altitude.");
  Serial.println("print venus r                             Return Venus Rise.");
  Serial.println("print venus s                             Return Venus Set.");
  Serial.println("print venus hlat                          Return Venus Helioecliptic Latitude.");
  Serial.println("print venus hlon                          Return Venus Helioecliptic Longitude.");
  Serial.println("print venus rv                            Return Venus Radius Vector.");
  Serial.println("print venus dis                           Return Venus Distance.");
  Serial.println("print venus elat                          Return Venus Ecliptic Latitude.");
  Serial.println("print venus elon                          Return Venus Ecliptic Longitude.");

  Serial.println("");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                INFORMATION (EARTH)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print earth el                            Return Earth Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                 INFORMATION (MOON)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print moon ra                             Return Moon Right Ascension.");
  Serial.println("print moon dec                            Return Moon Declination.");
  Serial.println("print moon az                             Return Moon Azimuth.");
  Serial.println("print moon alt                            Return Moon Altitude.");
  Serial.println("print moon r                              Return Moon Rise.");
  Serial.println("print moon s                              Return Moon Set.");
  Serial.println("print moon p                              Return Moon Phase.");
  Serial.println("print moon l                              Return Moon Luminosity.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                 INFORMATION (MARS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print mars ra                             Return Mars Right Ascension.");
  Serial.println("print mars dec                            Return Mars Declination.");
  Serial.println("print mars az                             Return Mars Azimuth");
  Serial.println("print mars alt                            Return Mars Altitude.");
  Serial.println("print mars r                              Return Mars Rise.");
  Serial.println("print mars s                              Return Mars Set.");
  Serial.println("print mars hlat                           Return Mars Helioecliptic Latitude.");
  Serial.println("print mars hlon                           Return Mars Helioecliptic Longitude.");
  Serial.println("print mars rv                             Return Mars Radius Vector.");
  Serial.println("print mars dis                            Return Mars Distance.");
  Serial.println("print mars elat                           Return Mars Ecliptic Latitude.");
  Serial.println("print mars elon                           Return Mars Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                              INFORMATION (JUPITER)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print jupiter ra                          Return Juptier Right Ascension.");
  Serial.println("print jupiter dec                         Return Juptier Declination.");
  Serial.println("print jupiter az                          Return Juptier Azimuth");
  Serial.println("print jupiter alt                         Return Juptier Altitude.");
  Serial.println("print jupiter r                           Return Juptier Rise.");
  Serial.println("print jupiter s                           Return Juptier Set.");
  Serial.println("print jupiter hlat                        Return Juptier Helioecliptic Latitude.");
  Serial.println("print jupiter hlon                        Return Juptier Helioecliptic Longitude.");
  Serial.println("print jupiter rv                          Return Juptier Radius Vector.");
  Serial.println("print jupiter dis                         Return Juptier Distance.");
  Serial.println("print jupiter elat                        Return Juptier Ecliptic Latitude.");
  Serial.println("print jupiter elon                        Return Juptier Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                               INFORMATION (SATURN)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print saturn ra                           Return Saturn Right Ascension.");
  Serial.println("print saturn dec                          Return Saturn Declination.");
  Serial.println("print saturn az                           Return Saturn Azimuth");
  Serial.println("print saturn alt                          Return Saturn Altitude.");
  Serial.println("print saturn r                            Return Saturn Rise.");
  Serial.println("print saturn s                            Return Saturn Set.");
  Serial.println("print saturn hlat                         Return Saturn Helioecliptic Latitude.");
  Serial.println("print saturn hlon                         Return Saturn Helioecliptic Longitude.");
  Serial.println("print saturn rv                           Return Saturn Radius Vector.");
  Serial.println("print saturn dis                          Return Saturn Distance.");
  Serial.println("print saturn elat                         Return Saturn Ecliptic Latitude.");
  Serial.println("print saturn elon                         Return Saturn Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                               INFORMATION (URANUS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print uranus ra                           Return Uranus Right Ascension.");
  Serial.println("print uranus dec                          Return Uranus Declination.");
  Serial.println("print uranus az                           Return Uranus Azimuth");
  Serial.println("print uranus alt                          Return Uranus Altitude.");
  Serial.println("print uranus r                            Return Uranus Rise.");
  Serial.println("print uranus s                            Return Uranus Set.");
  Serial.println("print uranus hlat                         Return Uranus Helioecliptic Latitude.");
  Serial.println("print uranus hlon                         Return Uranus Helioecliptic Longitude.");
  Serial.println("print uranus rv                           Return Uranus Radius Vector.");
  Serial.println("print uranus dis                          Return Uranus Distance.");
  Serial.println("print uranus elat                         Return Uranus Ecliptic Latitude.");
  Serial.println("print uranus elon                         Return Uranus Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                              INFORMATION (NEPTUNE)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("print neptune ra                          Return Neptune Right Ascension.");
  Serial.println("print neptune dec                         Return Neptune Declination.");
  Serial.println("print neptune az                          Return Neptune Azimuth");
  Serial.println("print neptune alt                         Return Neptune Altitude.");
  Serial.println("print neptune r                           Return Neptune Rise.");
  Serial.println("print neptune s                           Return Neptune Set.");
  Serial.println("print neptune hlat                        Return Neptune Helioecliptic Latitude.");
  Serial.println("print neptune hlon                        Return Neptune Helioecliptic Longitude.");
  Serial.println("print neptune rv                          Return Neptune Radius Vector.");
  Serial.println("print neptune dis                         Return Neptune Distance.");
  Serial.println("print neptune elat                        Return Neptune Ecliptic Latitude.");
  Serial.println("print neptune elon                        Return Neptune Ecliptic Longitude.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("[ CONTROL ] Requires Serial Commands enabled.");
  Serial.println("---------------------------------------------------------------------------------------------------");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                   CONTROL (NAVIGATION & KEY INPUT)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("menu left                                 Navigate UI Menu.");
  Serial.println("menu right                                Navigate UI Menu.");
  Serial.println("menu back                                 Navigate UI Menu.");
  Serial.println("menu enter                                Navigate UI Menu.");
  Serial.println("menu home                                 Navigate UI Menu.");
  Serial.println("enter digits n                            Specify digits (n) to enter.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                  CONTROL (DISPLAY)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch display timeout                    Enables/Disables Display Timeout.");
  Serial.println("set display timeout 0                     Set Display Timeout 3 seconds.");
  Serial.println("set display timeout 1                     Set Display Timeout 5 seconds.");
  Serial.println("set display timeout 2                     Set Display Timeout 10 seconds.");
  Serial.println("set display timeout 3                     Set Display Timeout 15 seconds.");
  Serial.println("set display timeout 4                     Set Display Timeout 30 seconds.");
  Serial.println("set display timeout 5                     Set Display Timeout 1 minute.");
  
  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                 CONTROL (OVERLOAD)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("set overload 0                            Set Overload Threshold 1 microsecond.");
  Serial.println("set overload 1                            Set Overload Threshold 2 microsecond.");
  Serial.println("set overload 2                            Set Overload Threshold 3 microsecond.");
  Serial.println("set overload 3                            Set Overload Threshold 4 microsecond.");
  Serial.println("set overload 4                            Set Overload Threshold 5 microsecond.");
  Serial.println("set overload 5                            Set Overload Threshold 10 microsecond.");
  Serial.println("set overload 6                            Set Overload Threshold 50 microsecond.");
  Serial.println("set overload 7                            Set Overload Threshold 1 millisecond.");
  Serial.println("set overload 8                            Set Overload Threshold 10 millisecond.");
  Serial.println("set overload 9                            Set Overload Threshold 100 millisecond.");
  Serial.println("set overload 10                           Set Overload Threshold 1 second.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                     CONTROL (FILE)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("new matrix                                Clears any current matrix value.");
  Serial.println("save matrix n                             Saves current matrix to save slot specified by n.");
  Serial.println("load matrix n                             Loads matrix from save slot specified by n.");
  Serial.println("delete matrix n                           Deletes matrix in save slot specified by n.");
  Serial.println("save system                               Saves current system configuration.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                   CONTROL (SYSTEM)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch matrix enabled                     Enables/Disables Running Matrix Switch.");
  Serial.println("set matrix enabled 0                      Disables Running Matrix Switch.");
  Serial.println("set matrix enabled 1                      Enables Running Matrix Switch.");
  Serial.println("switch matrix startup enabled             Enables/Disables Running Matrix Switch On Startup.");
  Serial.println("switch matrix io enabled                  Enables/Disables Matrix Switch Output via Port Controller.");
  Serial.println("switch wt901 enabled                      Enables/Disables WT901 requests.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                  CONTROL (SENSORS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch dht11_0_display_hic                Enables/Disables DHT11 Heat Index Celsius/Fahrenheit.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                              CONTROL (MULIPLEXERS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch ad-plex chan n                     Enables/Disables Analog/Digital Multiplexer Channel (0-15) specified by n.");
  Serial.println("switch iic-plex chan n                    Enables/Disables IIC Multiplexer Channel (0-7) specified by n.");
  Serial.println("switch iic-plex chan all                  Enables/Disables all IIC Multiplexer Channels.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                   CONTROL (MATRIX)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("set matrix switch enabled n 0             Disables specific matrix switch specified by n.");
  Serial.println("set matrix switch enabled n 1             Enables specific matrix switch specified by n.");
  Serial.println();
  Serial.println("set matrix port n                         Set output port number specified by n (-1=None).");
  Serial.println();
  Serial.println("set matrix inverted n n 0                 Invert matrix (n) function(n) logic.");
  Serial.println("set matrix inverted n n 1                 Standard matrix (n) function(n) logic.");
  Serial.println();
  Serial.println("set matrix expression n n 0-4             Specify matrix n & function n. Set expression 0-4.");
  Serial.println("                                          0=None  1=Under  2=Over  3=Equal  4=Range");
  Serial.println();
  Serial.println("set matrix entry n n function_name x y z inverted expression port enabled/disabled");
  Serial.println("                                          Specify matrix n.");
  Serial.println("                                          Specify function n.");
  Serial.println("                                          Set function name.");
  Serial.println("                                          Set function values x y z.");
  Serial.println("                                          Set standard/inverted (0-1).");
  Serial.println("                                          Set expression (0-4). 0=None  1=Under  2=Over  3=Equal  4=Range");
  Serial.println("                                          Set output port (-1=None).");
  Serial.println("                                          Set disabled/enabled (0-1).");
  Serial.println();
  Serial.println("set matrix xyz n n x y z                  Specify matrix n, function n and matrix function values.");
  Serial.println("set matrix entry n n function_name        Specify a function name for specified matrix n, function n.");
  Serial.println();
  Serial.println("set pcio n 0                              Set matrix n output low (overridden by matrix logic).");
  Serial.println("set pcio n 1                              Set matrix n output high (overridden by matrix logic).");
  Serial.println();
  Serial.println("set pcioi n 0-7                           Set indicator color (0-7) for matrix switch n.");
  Serial.println("                                          0=Black");
  Serial.println("                                          1=Red");
  Serial.println("                                          2=Yellow");
  Serial.println("                                          3=Green");
  Serial.println("                                          4=Blue");
  Serial.println("                                          5=Cyan");
  Serial.println("                                          6=Purple");
  Serial.println("                                          7=White");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                      CONTROL (GPS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch satio                              Enables/Disables SatIO features.");
  Serial.println("switch gngga                              Enables/Disables Parsing GNGGA Data.");
  Serial.println("switch gnrmc                              Enables/Disables Parsing GNRMC Data.");
  Serial.println("switch gpatt                              Enables/Disables Parsing GPATT Data.");
  Serial.println("switch convert coordinates                Enables/Disables SatIO Coordinate Degrees Conversions.");
  Serial.println("set convert coordinates GNGGA             Set Coordinate Degrees Conversions From GNGGA Data.");
  Serial.println("set convert coordinates GNRMC             Set Coordinate Degrees Conversions From GNRMC Data.");
  
  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                         CONTROL (SIDEREAL PLANETS)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("switch track sun                          Enables/Disables Tracking Sun.");
  Serial.println("switch track moon                         Enables/Disables Tracking Moon.");
  Serial.println("switch track mercury                      Enables/Disables Tracking Mercury.");
  Serial.println("switch track venus                        Enables/Disables Tracking Venus.");
  Serial.println("switch track mars                         Enables/Disables Tracking Mars.");
  Serial.println("switch track jupiter                      Enables/Disables Tracking Jupiter.");
  Serial.println("switch track saturn                       Enables/Disables Tracking Saturn.");
  Serial.println("switch track uranus                       Enables/Disables Tracking Uranus.");
  Serial.println("switch track neptune                      Enables/Disables Tracking Neptune.");
  Serial.println();
  Serial.println("run track planets                         Run Track PLanets Once.");
  Serial.println("run track sun                             Run Track Sun Once.");
  Serial.println("run track moon                            Run Track Moon Once.");
  Serial.println("run track mercury                         Run Track Mercury Once.");
  Serial.println("run track venus                           Run Track Venus Once.");
  Serial.println("run track mars                            Run Track Mars Once.");
  Serial.println("run track jupiter                         Run Track Jupiter Once.");
  Serial.println("run track saturn                          Run Track Saturn Once.");
  Serial.println("run track uranus                          Run Track Uranus Once.");
  Serial.println("run track neptune                         Run Track Neptune Once.");

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                 CONTROL (DATETIME)");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("set utc_second_offset                     Set UTC Second Offset.");
  // Serial.println("set utc_auto_offset_flag              "); // currently manual only

  Serial.println();
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("                                                                                               HELP");
  Serial.println("---------------------------------------------------------------------------------------------------");
  Serial.println("h                                         Display this help message.");
  Serial.println("");
  Serial.println("---------------------------------------------------------------------------------------------------");
}

void PrintMatrixData() {
  for (int Mi=0; Mi<matrixData.max_matrices; Mi++) {
    Serial.println("-----------------------------------------------------");
    Serial.println("[matrix switch] " + String(Mi));
    Serial.println("[port] " + String(matrixData.matrix_port_map[0][Mi]));
    Serial.println("[enabled] " + String(matrixData.matrix_switch_enabled[0][Mi]));
    Serial.println("[active] " + String(matrixData.matrix_switch_state[0][Mi]));

    for (int Fi=0; Fi<matrixData.max_matrix_functions; Fi++) {
      Serial.println("[function " + String(Fi) + " name] " + String(matrixData.matrix_function[Mi][Fi]));
      Serial.println("[function " + String(Fi) + " expression] " + String(matrixData.matrix_switch_expression_index[Mi][Fi]));
      Serial.println("[function " + String(Fi) + " inverted] " + String(matrixData.matrix_switch_inverted_logic[Mi][Fi]));
      Serial.println("[function " + String(Fi) + " x] " + String(matrixData.matrix_function_xyz[Mi][Fi][0]));
      Serial.println("[function " + String(Fi) + " y] " + String(matrixData.matrix_function_xyz[Mi][Fi][1]));
      Serial.println("[function " + String(Fi) + " z] " + String(matrixData.matrix_function_xyz[Mi][Fi][2]));
    }
  }
  Serial.println("-----------------------------------------------------");
}

void PrintMatrixNData(int Mi) {
  Serial.println("-----------------------------------------------------");
  Serial.println("[matrix switch] " + String(Mi));
  Serial.println("[port] " + String(matrixData.matrix_port_map[0][Mi]));
  Serial.println("[enabled] " + String(matrixData.matrix_switch_enabled[0][Mi]));
  Serial.println("[active] " + String(matrixData.matrix_switch_state[0][Mi]));

  for (int Fi=0; Fi<matrixData.max_matrix_functions; Fi++) {
    Serial.println("[function " + String(Fi) + " name] " + String(matrixData.matrix_function[Mi][Fi]));
    Serial.println("[function " + String(Fi) + " expression] " + String(matrixData.matrix_switch_expression_index[Mi][Fi]));
    Serial.println("[function " + String(Fi) + " inverted] " + String(matrixData.matrix_switch_inverted_logic[Mi][Fi]));
    Serial.println("[function " + String(Fi) + " x] " + String(matrixData.matrix_function_xyz[Mi][Fi][0]));
    Serial.println("[function " + String(Fi) + " y] " + String(matrixData.matrix_function_xyz[Mi][Fi][1]));
    Serial.println("[function " + String(Fi) + " z] " + String(matrixData.matrix_function_xyz[Mi][Fi][2]));
  }

  Serial.println("-----------------------------------------------------");
}

// ----------------------------------------------------------------------------------------------------------------------------------
/*
  The following commands are intended to allow SatIO to be controlled via other systems, embedded systems, scripts and humans.
  To Do:
    * Ensure all digits are printed for numbers with decimal places.
*/
// ----------------------------------------------------------------------------------------------------------------------------------

static void CmdProcess(void) {
  // --------------------------------------------------
  // process commands conditionally (some efficiency)
  // --------------------------------------------------
  if (strlen(CMD_BUFFER)>=1) {
    // ------------------------------------------------
    // uncomment to debug
    // ------------------------------------------------
    Serial.println("[CmdProcess] " + String(CMD_BUFFER));
    // ------------------------------------------------
    // process commands
    // ------------------------------------------------
    if (strcmp(CMD_BUFFER, "h\r")==0) {PrintHelp();}

    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                                   ENABLE/DISABLE SERIAL OUTPUT
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "switch output satio\r")==0) {systemData.output_satio_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output gngga\r")==0) {systemData.output_gngga_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output gnrmc\r")==0) {systemData.output_gnrmc_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output gpatt\r")==0) {systemData.output_gpatt_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output matrix\r")==0) {systemData.output_matrix_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output sensors\r")==0) {systemData.output_sensors_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output sun\r")==0) {systemData.output_sun_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output moon\r")==0) {systemData.output_moon_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output mercury\r")==0) {systemData.output_mercury_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output venus\r")==0) {systemData.output_venus_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output mars\r")==0) {systemData.output_mars_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output jupiter\r")==0) {systemData.output_jupiter_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output saturn\r")==0) {systemData.output_saturn_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output uranus\r")==0) {systemData.output_uranus_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output neptune\r")==0) {systemData.output_neptune_enabled^=true;}
    else if (strcmp(CMD_BUFFER, "switch output meteors\r")==0) {systemData.output_meteors_enabled^=true;}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                          SPECIFIC REQUEST SERIAL OUTPUT: SATIO
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print satio degrees_latitude\r")==0) {Serial.println("[satData.degrees_latitude] " + String(satData.degrees_latitude, 7));}
    else if (strcmp(CMD_BUFFER, "print satio degrees_longitude\r")==0) {Serial.println("[satData.degrees_longitude] " + String(satData.degrees_longitude, 7));}
    else if (strcmp(CMD_BUFFER, "print satio ground_heading\r")==0) {Serial.println("[satData.ground_heading] " + String(satData.ground_heading));}
    else if (strcmp(CMD_BUFFER, "print satio formatted_local_time\r")==0) {Serial.println("[satData.formatted_local_time] " + String(satData.formatted_local_time));}
    else if (strcmp(CMD_BUFFER, "print satio formatted_local_date\r")==0) {Serial.println("[satData.formatted_local_date] " + String(satData.formatted_local_date));}
    else if (strcmp(CMD_BUFFER, "print satio formatted_rtc_sync_time\r")==0) {Serial.println("[satData.formatted_rtc_sync_time] " + String(satData.formatted_rtc_sync_time));}
    else if (strcmp(CMD_BUFFER, "print satio formatted_rtc_sync_date\r")==0) {Serial.println("[satData.formatted_rtc_sync_date] " + String(satData.formatted_rtc_sync_date));}
    else if (strcmp(CMD_BUFFER, "print satio formatted_rtc_time\r")==0) {Serial.println("[satData.formatted_rtc_time] " + String(satData.formatted_rtc_time));}
    else if (strcmp(CMD_BUFFER, "print satio formatted_rtc_date\r")==0) {Serial.println("[satData.formatted_rtc_date] " + String(satData.formatted_rtc_date));}
    else if (strcmp(CMD_BUFFER, "print satio utc_second_offset\r")==0) {Serial.println("[satData.utc_second_offset] " + String(satData.utc_second_offset));}
    else if (strcmp(CMD_BUFFER, "print satio utc_auto_offset_flag\r")==0) {Serial.println("[satData.utc_auto_offset_flag] " + String(satData.utc_auto_offset_flag));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                 SPECIFIC REQUEST SERIAL OUTPUT: MATRIX VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix -v\r")==0) {
      PrintMatrixData();
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                       SPECIFIC REQUEST SERIAL OUTPUT: MATRIX N
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strncmp(CMD_BUFFER, "print matrix \r", strlen("print matrix "))==0) {
      TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
      ITER_TMP_CMD_TOKEN=0;
      COMMAND_PASS=0;
      while (TMP_CMD_TOKEN!=NULL) {
        if      (ITER_TMP_CMD_TOKEN==2) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;} // sanitize last token
        TMP_CMD_TOKEN=strtok(NULL, " ");
        ITER_TMP_CMD_TOKEN++;
      }
      // --------------------------------------------------------------------
      // uncomment to debug
      // --------------------------------------------------------------------
      Serial.println("[TMP_CMD_STRING_0] " + String(TMP_CMD_STRING_0));
      Serial.println("[COMMAND_PASS] " + String(COMMAND_PASS));
      if (COMMAND_PASS==1) {
        PrintMatrixNData(atoi(TMP_CMD_STRING_0.c_str()));
      }
      else {Serial.println("[command failed]");}
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                        SPECIFIC REQUEST SERIAL OUTPUT: MATRIX ENABLED/DISABLED
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix enabled\r")==0) {Serial.println("[matrix_enabled_i] " + String(matrixData.matrix_enabled_i));}
    else if (strcmp(CMD_BUFFER, "print matrix disabled\r")==0) {Serial.println("[matrix_disabled_i] " + String(matrixData.matrix_disabled_i));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                         SPECIFIC REQUEST SERIAL OUTPUT: MATRIX ACTIVE/INACTIVE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix active\r")==0) {Serial.println("[matrix_active_i] " + String(matrixData.matrix_active_i));}
    else if (strcmp(CMD_BUFFER, "print matrix inactive\r")==0) {Serial.println("[matrix_inactive_i] " + String(matrixData.matrix_inactive_i));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                SPECIFIC REQUEST SERIAL OUTPUT: MATRIX ENABLED/DISABLED VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix enabled -v\r")==0) {
      Serial.println("[Matrix Enabled]");
      for (int i=0; i<matrixData.max_matrices; i++) {
        Serial.println("[switch " + String(i) + "] " + String(matrixData.matrix_switch_enabled[0][i]));
      }
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                 SPECIFIC REQUEST SERIAL OUTPUT: MATRIX ACTIVE/INACTIVE VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix active -v\r")==0) {
      Serial.println("[Matrix Active]");
      for (int i=0; i<matrixData.max_matrices; i++) {
        Serial.println("[switch " + String(i) + "] " + String(matrixData.matrix_switch_state[0][i]));
      }
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                        SPECIFIC REQUEST SERIAL OUTPUT: MATRIX INVERTED VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix inverted -v\r")==0) {
      TMP_CMD_STRING_0=String("");
      for (int i1=0; i1<matrixData.max_matrices; i1++) {
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+"[switch " + String(i1) + "] ";
        for (int i2=0; i2<matrixData.max_matrix_functions; i2++) {TMP_CMD_STRING_0=TMP_CMD_STRING_0+String(matrixData.matrix_switch_inverted_logic[i1][i2])+String(" ");}
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+'\n';
      }
      Serial.println("[Matrix Inverted Function]\n" + String(TMP_CMD_STRING_0));
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                          SPECIFIC REQUEST SERIAL OUTPUT: MATRIX TIMERS VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix timers -v\r")==0) {
      Serial.println("[Matrix Timers]");
      for (int i=0; i<matrixData.max_matrices; i++) {
        Serial.println("[switch " + String(i) + "] " + String(matrixData.matrix_timers[0][i]));
      }
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                           SPECIFIC REQUEST SERIAL OUTPUT: MATRIX PORTS VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix ports -v\r")==0) {
      Serial.println("[Matrix Port Map]");
      for (int i=0; i<matrixData.max_matrices; i++) {
        Serial.println("[switch " + String(i) + "] " + String(matrixData.matrix_port_map[0][i]));
      }
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                       SPECIFIC REQUEST SERIAL OUTPUT: MATRIX FUNCTIONS VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix functions -v\r")==0) {
      TMP_CMD_STRING_0=String("");
      for (int i1=0; i1<matrixData.max_matrices; i1++) {
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+"[switch " + String(i1) + "] ";
        for (int i2=0; i2<matrixData.max_matrix_functions; i2++) {TMP_CMD_STRING_0=TMP_CMD_STRING_0+String(matrixData.matrix_function[i1][i2])+String(", ");}
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+'\n';
      }
      Serial.println("[Matrix Functions]\n" + String(TMP_CMD_STRING_0));
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                   SPECIFIC REQUEST SERIAL OUTPUT: MATRIX FUNCTIONS XYZ VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix functions xyz -v\r")==0) {
      TMP_CMD_STRING_0=String("");
      for (int i1=0; i1<matrixData.max_matrices; i1++) {
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+"[switch " + String(i1) + "]";
        for (int i2=0; i2<matrixData.max_matrix_functions; i2++) {
          TMP_CMD_STRING_0=TMP_CMD_STRING_0+"\n";
          for (int i3=0; i3<3; i3++) {TMP_CMD_STRING_0=TMP_CMD_STRING_0+String(matrixData.matrix_function_xyz[i1][i2][i3])+String(",");}
        }
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+'\n';
      }
      Serial.println("[Matrix Functions XYZ]\n" + String(TMP_CMD_STRING_0));
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                     SPECIFIC REQUEST SERIAL OUTPUT: MATRIX EXPRESSIONS VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix expressions -v\r")==0) {
      TMP_CMD_STRING_0=String("");
      for (int i1=0; i1<matrixData.max_matrices; i1++) {
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+"[switch " + String(i1) + "] ";
        for (int i2=0; i2<matrixData.max_matrix_functions; i2++) {TMP_CMD_STRING_0=TMP_CMD_STRING_0+String(matrixData.matrix_switch_expression_index[i1][i2])+String(",");}
        TMP_CMD_STRING_0=TMP_CMD_STRING_0+'\n';
      }
      Serial.println("[Matrix Expressions]\n" + String(TMP_CMD_STRING_0));
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                             SPECIFIC REQUEST SERIAL OUTPUT: AVAILABLE MATRIX FUNCTIONS VERBOSE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print matrix available functions -v\r")==0) {
      Serial.println("[Available Matrix Functions] ");
      for (int i=0; i<matrixData.max_matrix_function_names; i++) {
        Serial.println("[" + String(i) + "] " + String(matrixData.matrix_function_names[i]));
      }
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                          SPECIFIC REQUEST SERIAL OUTPUT: GNGGA
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print gngga utc_time\r")==0) {Serial.println("[gnggaData.utc_time] " + String(gnggaData.utc_time));}
    else if (strcmp(CMD_BUFFER, "print gngga latitude\r")==0) {Serial.println("[gnggaData.latitude] " + String(gnggaData.latitude));}
    else if (strcmp(CMD_BUFFER, "print gngga latitude_hemisphere\r")==0) {Serial.println("[gnggaData.latitude_hemisphere] " + String(gnggaData.latitude_hemisphere));}
    else if (strcmp(CMD_BUFFER, "print gngga longitude\r")==0) {Serial.println("[gnggaData.longitude] " + String(gnggaData.longitude));}
    else if (strcmp(CMD_BUFFER, "print gngga longitude_hemisphere\r")==0) {Serial.println("[gnggaData.longitude_hemisphere] " + String(gnggaData.longitude_hemisphere));}
    else if (strcmp(CMD_BUFFER, "print gngga solution_status\r")==0) {Serial.println("[gnggaData.solution_status] " + String(gnggaData.solution_status));}
    else if (strcmp(CMD_BUFFER, "print gngga satellite_count_gngga\r")==0) {Serial.println("[gnggaData.satellite_count_gngga] " + String(gnggaData.satellite_count_gngga));}
    else if (strcmp(CMD_BUFFER, "print gngga hdop_precision_factor\r")==0) {Serial.println("[gnggaData.hdop_precision_factor] " + String(gnggaData.hdop_precision_factor));}
    else if (strcmp(CMD_BUFFER, "print gngga altitude\r")==0) {Serial.println("[gnggaData.altitude] " + String(gnggaData.altitude));}
    else if (strcmp(CMD_BUFFER, "print gngga altitude_units\r")==0) {Serial.println("[gnggaData.altitude_units] " + String(gnggaData.altitude_units));}
    else if (strcmp(CMD_BUFFER, "print gngga geoidal\r")==0) {Serial.println("[gnggaData.geoidal] " + String(gnggaData.geoidal));}
    else if (strcmp(CMD_BUFFER, "print gngga geoidal_units\r")==0) {Serial.println("[gnggaData.geoidal_units] " + String(gnggaData.geoidal_units));}
    else if (strcmp(CMD_BUFFER, "print gngga differential_delay\r")==0) {Serial.println("[gnggaData.differential_delay] " + String(gnggaData.differential_delay));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                          SPECIFIC REQUEST SERIAL OUTPUT: GNRMC
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print gnrmc utc_time\r")==0) {Serial.println("[gnrmcData.utc_time] " + String( gnrmcData.utc_time));}
    else if (strcmp(CMD_BUFFER, "print gnrmc positioning_status\r")==0) {Serial.println("[gnrmcData.positioning_status] " + String( gnrmcData.positioning_status));}
    else if (strcmp(CMD_BUFFER, "print gnrmc latitude\r")==0) {Serial.println("[gnrmcData.latitude] " + String( gnrmcData.latitude));}
    else if (strcmp(CMD_BUFFER, "print gnrmc latitude_hemisphere\r")==0) {Serial.println("[gnrmcData.latitude_hemisphere] " + String( gnrmcData.latitude_hemisphere));}
    else if (strcmp(CMD_BUFFER, "print gnrmc longitude\r")==0) {Serial.println("[gnrmcData.longitude] " + String( gnrmcData.longitude));}
    else if (strcmp(CMD_BUFFER, "print gnrmc longitude_hemisphere\r")==0) {Serial.println("[gnrmcData.longitude_hemisphere] " + String( gnrmcData.longitude_hemisphere));}
    else if (strcmp(CMD_BUFFER, "print gnrmc ground_speed\r")==0) {Serial.println("[gnrmcData.ground_speed] " + String( gnrmcData.ground_speed));}
    else if (strcmp(CMD_BUFFER, "print gnrmc ground_heading\r")==0) {Serial.println("[gnrmcData.ground_heading] " + String( gnrmcData.ground_heading));}
    else if (strcmp(CMD_BUFFER, "print gnrmc utc_date\r")==0) {Serial.println("[gnrmcData.utc_date] " + String( gnrmcData.utc_date));}
    else if (strcmp(CMD_BUFFER, "print gnrmc installation_angle\r")==0) {Serial.println("[gnrmcData.installation_angle] " + String( gnrmcData.installation_angle));}
    else if (strcmp(CMD_BUFFER, "print gnrmc installation_angle_direction\r")==0) {Serial.println("[gnrmcData.installation_angle_direction] " + String( gnrmcData.installation_angle_direction));}
    else if (strcmp(CMD_BUFFER, "print gnrmc mode_indication\r")==0) {Serial.println("[gnrmcData.mode_indication] " + String( gnrmcData.mode_indication));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                          SPECIFIC REQUEST SERIAL OUTPUT: GPATT
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print gpatt pitch\r")==0) {Serial.println("[gpattData.pitch] " + String( gpattData.pitch));}
    else if (strcmp(CMD_BUFFER, "print gpatt roll\r")==0) {Serial.println("[gpattData.roll] " + String( gpattData.roll));}
    else if (strcmp(CMD_BUFFER, "print gpatt yaw\r")==0) {Serial.println("[gpattData.yaw] " + String( gpattData.yaw));}
    else if (strcmp(CMD_BUFFER, "print gpatt software_version\r")==0) {Serial.println("[gpattData.software_version] " + String( gpattData.software_version));}
    else if (strcmp(CMD_BUFFER, "print gpatt product_id\r")==0) {Serial.println("[gpattData.product_id] " + String( gpattData.product_id));}
    else if (strcmp(CMD_BUFFER, "print gpatt ins\r")==0) {Serial.println("[gpattData.ins] " + String( gpattData.ins));}
    else if (strcmp(CMD_BUFFER, "print gpatt hardware_version\r")==0) {Serial.println("[gpattData.hardware_version] " + String( gpattData.hardware_version));}
    else if (strcmp(CMD_BUFFER, "print gpatt run_state_flag\r")==0) {Serial.println("[gpattData.run_state_flag] " + String( gpattData.run_state_flag));}
    else if (strcmp(CMD_BUFFER, "print gpatt mis_angle_num\r")==0) {Serial.println("[gpattData.mis_angle_num] " + String( gpattData.mis_angle_num));}
    else if (strcmp(CMD_BUFFER, "print gpatt static_flag\r")==0) {Serial.println("[gpattData.static_flag] " + String( gpattData.static_flag));}
    else if (strcmp(CMD_BUFFER, "print gpatt user_code\r")==0) {Serial.println("[gpattData.user_code] " + String( gpattData.user_code));}
    else if (strcmp(CMD_BUFFER, "print gpatt gst_data\r")==0) {Serial.println("[gpattData.gst_data] " + String( gpattData.gst_data));}
    else if (strcmp(CMD_BUFFER, "print gpatt line_flag\r")==0) {Serial.println("[gpattData.line_flag] " + String( gpattData.line_flag));}
    else if (strcmp(CMD_BUFFER, "print gpatt mis_att_flag\r")==0) {Serial.println("[gpattData.mis_att_flag] " + String( gpattData.mis_att_flag));}
    else if (strcmp(CMD_BUFFER, "print gpatt imu_kind\r")==0) {Serial.println("[gpattData.imu_kind] " + String( gpattData.imu_kind));}
    else if (strcmp(CMD_BUFFER, "print gpatt ubi_car_kind\r")==0) {Serial.println("[gpattData.ubi_car_kind] " + String( gpattData.ubi_car_kind));}
    else if (strcmp(CMD_BUFFER, "print gpatt mileage\r")==0) {Serial.println("[gpattData.mileage] " + String( gpattData.mileage));}
    else if (strcmp(CMD_BUFFER, "print gpatt run_inetial_flag\r")==0) {Serial.println("[gpattData.run_inetial_flag] " + String( gpattData.run_inetial_flag));}
    else if (strcmp(CMD_BUFFER, "print gpatt speed_enable\r")==0) {Serial.println("[gpattData.speed_enable] " + String( gpattData.speed_enable));}
    else if (strcmp(CMD_BUFFER, "print gpatt speed_num\r")==0) {Serial.println("[gpattData.speed_num] " + String( gpattData.speed_num));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                        SPECIFIC REQUEST SERIAL OUTPUT: SENSORS
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print dht11_h_0\r")==0) {Serial.println("[sensorData.dht11_h_0] " + String(sensorData.dht11_h_0));}
    else if (strcmp(CMD_BUFFER, "print dht11_c_0\r")==0) {Serial.println("[sensorData.dht11_c_0] " + String(sensorData.dht11_c_0));}
    else if (strcmp(CMD_BUFFER, "print dht11_f_0\r")==0) {Serial.println("[sensorData.dht11_f_0] " + String(sensorData.dht11_f_0));}
    else if (strcmp(CMD_BUFFER, "print dht11_hic_0\r")==0) {Serial.println("[sensorData.dht11_hic_0] " + String(sensorData.dht11_hic_0));}
    else if (strcmp(CMD_BUFFER, "print dht11_hif_0\r")==0) {Serial.println("[sensorData.dht11_hif_0] " + String(sensorData.dht11_hif_0));}
    else if (strcmp(CMD_BUFFER, "print sensor_0\r")==0) {Serial.println("[sensorData.sensor_0] " + String(sensorData.sensor_0));}
    else if (strcmp(CMD_BUFFER, "print sensor_1\r")==0) {Serial.println("[sensorData.sensor_1] " + String(sensorData.sensor_1));}
    else if (strcmp(CMD_BUFFER, "print sensor_2\r")==0) {Serial.println("[sensorData.sensor_2] " + String(sensorData.sensor_2));}
    else if (strcmp(CMD_BUFFER, "print sensor_3\r")==0) {Serial.println("[sensorData.sensor_3] " + String(sensorData.sensor_3));}
    else if (strcmp(CMD_BUFFER, "print sensor_4\r")==0) {Serial.println("[sensorData.sensor_4] " + String(sensorData.sensor_4));}
    else if (strcmp(CMD_BUFFER, "print sensor_5\r")==0) {Serial.println("[sensorData.sensor_5] " + String(sensorData.sensor_5));}
    else if (strcmp(CMD_BUFFER, "print sensor_6\r")==0) {Serial.println("[sensorData.sensor_6] " + String(sensorData.sensor_6));}
    else if (strcmp(CMD_BUFFER, "print sensor_7\r")==0) {Serial.println("[sensorData.sensor_7] " + String(sensorData.sensor_7));}
    else if (strcmp(CMD_BUFFER, "print sensor_8\r")==0) {Serial.println("[sensorData.sensor_8] " + String(sensorData.sensor_8));}
    else if (strcmp(CMD_BUFFER, "print sensor_9\r")==0) {Serial.println("[sensorData.sensor_9] " + String(sensorData.sensor_9));}
    else if (strcmp(CMD_BUFFER, "print sensor_10\r")==0) {Serial.println("[sensorData.sensor_10] " + String(sensorData.sensor_10));}
    else if (strcmp(CMD_BUFFER, "print sensor_11\r")==0) {Serial.println("[sensorData.sensor_11] " + String(sensorData.sensor_11));}
    else if (strcmp(CMD_BUFFER, "print sensor_12\r")==0) {Serial.println("[sensorData.sensor_12] " + String(sensorData.sensor_12));}
    else if (strcmp(CMD_BUFFER, "print sensor_13\r")==0) {Serial.println("[sensorData.sensor_13] " + String(sensorData.sensor_13));}
    else if (strcmp(CMD_BUFFER, "print sensor_14\r")==0) {Serial.println("[sensorData.sensor_14] " + String(sensorData.sensor_14));}
    else if (strcmp(CMD_BUFFER, "print sensor_15\r")==0) {Serial.println("[sensorData.sensor_15] " + String(sensorData.sensor_15));}
    else if (strcmp(CMD_BUFFER, "print wt901_ang_x\r")==0) {Serial.println("[sensorData.wt901_ang_x] " + String(sensorData.wt901_ang_x));}
    else if (strcmp(CMD_BUFFER, "print wt901_ang_y\r")==0) {Serial.println("[sensorData.wt901_ang_y] " + String(sensorData.wt901_ang_y));}
    else if (strcmp(CMD_BUFFER, "print wt901_ang_z\r")==0) {Serial.println("[sensorData.wt901_ang_z] " + String(sensorData.wt901_ang_z));}
    else if (strcmp(CMD_BUFFER, "print wt901_mag_x\r")==0) {Serial.println("[sensorData.wt901_mag_x] " + String(sensorData.wt901_mag_x));}
    else if (strcmp(CMD_BUFFER, "print wt901_mag_y\r")==0) {Serial.println("[sensorData.wt901_mag_y] " + String(sensorData.wt901_mag_y));}
    else if (strcmp(CMD_BUFFER, "print wt901_mag_z\r")==0) {Serial.println("[sensorData.wt901_mag_z] " + String(sensorData.wt901_mag_z));}
    else if (strcmp(CMD_BUFFER, "print wt901_acc_x\r")==0) {Serial.println("[sensorData.wt901_acc_x] " + String(sensorData.wt901_acc_x));}
    else if (strcmp(CMD_BUFFER, "print wt901_acc_y\r")==0) {Serial.println("[sensorData.wt901_acc_y] " + String(sensorData.wt901_acc_y));}
    else if (strcmp(CMD_BUFFER, "print wt901_acc_z\r")==0) {Serial.println("[sensorData.wt901_acc_z] " + String(sensorData.wt901_acc_z));}
    else if (strcmp(CMD_BUFFER, "print wt901_gyr_x\r")==0) {Serial.println("[sensorData.wt901_gyr_x] " + String(sensorData.wt901_gyr_x));}
    else if (strcmp(CMD_BUFFER, "print wt901_gyr_y\r")==0) {Serial.println("[sensorData.wt901_gyr_y] " + String(sensorData.wt901_gyr_y));}
    else if (strcmp(CMD_BUFFER, "print wt901_gyr_z\r")==0) {Serial.println("[sensorData.wt901_gyr_z] " + String(sensorData.wt901_gyr_z));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                          SPECIFIC REQUEST SERIAL OUTPUT: EARTH
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print earth el\r")==0) {Serial.println("[earth_ecliptic_long] " + String(siderealPlanetData.earth_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                            SPECIFIC REQUEST SERIAL OUTPUT: SUN
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print sun ra\r")==0) {Serial.println("[sun_ra] " + String(siderealPlanetData.sun_ra));}
    else if (strcmp(CMD_BUFFER, "print sun dec\r")==0) {Serial.println("[sun_dec] " + String(siderealPlanetData.sun_dec));}
    else if (strcmp(CMD_BUFFER, "print sun az\r")==0) {Serial.println("[sun_az] " + String(siderealPlanetData.sun_az));}
    else if (strcmp(CMD_BUFFER, "print sun alt\r")==0) {Serial.println("[sun_alt] " + String(siderealPlanetData.sun_alt));}
    else if (strcmp(CMD_BUFFER, "print sun r\r")==0) {Serial.println("[sun_r] " + String(siderealPlanetData.sun_r));}
    else if (strcmp(CMD_BUFFER, "print sun s\r")==0) {Serial.println("[sun_s] " + String(siderealPlanetData.sun_s));}
    else if (strcmp(CMD_BUFFER, "print sun helat\r")==0) {Serial.println("[sun_helio_ecliptic_lat] " + String(siderealPlanetData.sun_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print sun helon\r")==0) {Serial.println("[sun_helio_ecliptic_long] " + String(siderealPlanetData.sun_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print sun rv\r")==0) {Serial.println("[sun_radius_vector] " + String(siderealPlanetData.sun_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print sun dis\r")==0) {Serial.println("[sun_distance] " + String(siderealPlanetData.sun_distance));}
    else if (strcmp(CMD_BUFFER, "print sun elat\r")==0) {Serial.println("[sun_ecliptic_lat] " + String(siderealPlanetData.sun_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print sun elon\r")==0) {Serial.println("[sun_ecliptic_long] " + String(siderealPlanetData.sun_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                           SPECIFIC REQUEST SERIAL OUTPUT: MOON
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print moon ra\r")==0) {Serial.println("[moon_ra] " + String(siderealPlanetData.moon_ra));}
    else if (strcmp(CMD_BUFFER, "print moon dec\r")==0) {Serial.println("[moon_dec] " + String(siderealPlanetData.moon_dec));}
    else if (strcmp(CMD_BUFFER, "print moon az\r")==0) {Serial.println("[moon_az] " + String(siderealPlanetData.moon_az));}
    else if (strcmp(CMD_BUFFER, "print moon alt\r")==0) {Serial.println("[moon_alt] " + String(siderealPlanetData.moon_alt));}
    else if (strcmp(CMD_BUFFER, "print moon r\r")==0) {Serial.println("[moon_r] " + String(siderealPlanetData.moon_r));}
    else if (strcmp(CMD_BUFFER, "print moon s\r")==0) {Serial.println("[moon_s] " + String(siderealPlanetData.moon_s));}
    else if (strcmp(CMD_BUFFER, "print moon p\r")==0) {Serial.println("[moon_p] " + String(siderealPlanetData.moon_p_name[(int)siderealPlanetData.moon_p]));}
    else if (strcmp(CMD_BUFFER, "print moon l\r")==0) {Serial.println("[moon_lum] " + String(siderealPlanetData.moon_lum));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                        SPECIFIC REQUEST SERIAL OUTPUT: MERCURY
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print mercury ra\r")==0) {Serial.println("[mercury_ra] " + String(siderealPlanetData.mercury_ra));}
    else if (strcmp(CMD_BUFFER, "print mercury dec\r")==0) {Serial.println("[mercury_dec] " + String(siderealPlanetData.mercury_dec));}
    else if (strcmp(CMD_BUFFER, "print mercury az\r")==0) {Serial.println("[mercury_az] " + String(siderealPlanetData.mercury_az));}
    else if (strcmp(CMD_BUFFER, "print mercury alt\r")==0) {Serial.println("[mercury_alt] " + String(siderealPlanetData.mercury_alt));}
    else if (strcmp(CMD_BUFFER, "print mercury r\r")==0) {Serial.println("[mercury_r] " + String(siderealPlanetData.mercury_r));}
    else if (strcmp(CMD_BUFFER, "print mercury s\r")==0) {Serial.println("[mercury_s] " + String(siderealPlanetData.mercury_s));}
    else if (strcmp(CMD_BUFFER, "print mercury hlat\r")==0) {Serial.println("[mercury_helio_ecliptic_lat] " + String(siderealPlanetData.mercury_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print mercury hlon\r")==0) {Serial.println("[mercury_helio_ecliptic_long] " + String(siderealPlanetData.mercury_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print mercury rv\r")==0) {Serial.println("[mercury_radius_vector] " + String(siderealPlanetData.mercury_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print mercury dis\r")==0) {Serial.println("[mercury_distance] " + String(siderealPlanetData.mercury_distance));}
    else if (strcmp(CMD_BUFFER, "print mercury elat\r")==0) {Serial.println("[mercury_ecliptic_lat] " + String(siderealPlanetData.mercury_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print mercury elon\r")==0) {Serial.println("[mercury_ecliptic_long] " + String(siderealPlanetData.mercury_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                          SPECIFIC REQUEST SERIAL OUTPUT: VENUS
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print venus ra\r")==0) {Serial.println("[venus_ra] " + String(siderealPlanetData.venus_ra));}
    else if (strcmp(CMD_BUFFER, "print venus dec\r")==0) {Serial.println("[venus_dec] " + String(siderealPlanetData.venus_dec));}
    else if (strcmp(CMD_BUFFER, "print venus az\r")==0) {Serial.println("[venus_az] " + String(siderealPlanetData.venus_az));}
    else if (strcmp(CMD_BUFFER, "print venus alt\r")==0) {Serial.println("[venus_alt] " + String(siderealPlanetData.venus_alt));}
    else if (strcmp(CMD_BUFFER, "print venus r\r")==0) {Serial.println("[venus_r] " + String(siderealPlanetData.venus_r));}
    else if (strcmp(CMD_BUFFER, "print venus s\r")==0) {Serial.println("[venus_s] " + String(siderealPlanetData.venus_s));}
    else if (strcmp(CMD_BUFFER, "print venus hlat\r")==0) {Serial.println("[venus_helio_ecliptic_lat] " + String(siderealPlanetData.venus_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print venus hlon\r")==0) {Serial.println("[venus_helio_ecliptic_long] " + String(siderealPlanetData.venus_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print venus rv\r")==0) {Serial.println("[venus_radius_vector] " + String(siderealPlanetData.venus_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print venus dis\r")==0) {Serial.println("[venus_distance] " + String(siderealPlanetData.venus_distance));}
    else if (strcmp(CMD_BUFFER, "print venus elat\r")==0) {Serial.println("[venus_ecliptic_lat] " + String(siderealPlanetData.venus_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print venus elon\r")==0) {Serial.println("[venus_ecliptic_long] " + String(siderealPlanetData.venus_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                           SPECIFIC REQUEST SERIAL OUTPUT: MARS
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print mars ra\r")==0) {Serial.println("[mars_ra] " + String(siderealPlanetData.mars_ra));}
    else if (strcmp(CMD_BUFFER, "print mars dec\r")==0) {Serial.println("[mars_dec] " + String(siderealPlanetData.mars_dec));}
    else if (strcmp(CMD_BUFFER, "print mars az\r")==0) {Serial.println("[mars_az] " + String(siderealPlanetData.mars_az));}
    else if (strcmp(CMD_BUFFER, "print mars alt\r")==0) {Serial.println("[mars_alt] " + String(siderealPlanetData.mars_alt));}
    else if (strcmp(CMD_BUFFER, "print mars r\r")==0) {Serial.println("[mars_r] " + String(siderealPlanetData.mars_r));}
    else if (strcmp(CMD_BUFFER, "print mars s\r")==0) {Serial.println("[mars_s] " + String(siderealPlanetData.mars_s));}
    else if (strcmp(CMD_BUFFER, "print mars hlat\r")==0) {Serial.println("[mars_helio_ecliptic_lat] " + String(siderealPlanetData.mars_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print mars hlon\r")==0) {Serial.println("[mars_helio_ecliptic_long] " + String(siderealPlanetData.mars_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print mars rv\r")==0) {Serial.println("[mars_radius_vector] " + String(siderealPlanetData.mars_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print mars dis\r")==0) {Serial.println("[mars_distance] " + String(siderealPlanetData.mars_distance));}
    else if (strcmp(CMD_BUFFER, "print mars elat\r")==0) {Serial.println("[mars_ecliptic_lat] " + String(siderealPlanetData.mars_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print mars elon\r")==0) {Serial.println("[mars_ecliptic_long] " + String(siderealPlanetData.mars_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                        SPECIFIC REQUEST SERIAL OUTPUT: JUPITER
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print jupiter ra\r")==0) {Serial.println("[jupiter_ra] " + String(siderealPlanetData.jupiter_ra));}
    else if (strcmp(CMD_BUFFER, "print jupiter dec\r")==0) {Serial.println("[jupiter_dec] " + String(siderealPlanetData.jupiter_dec));}
    else if (strcmp(CMD_BUFFER, "print jupiter az\r")==0) {Serial.println("[jupiter_az] " + String(siderealPlanetData.jupiter_az));}
    else if (strcmp(CMD_BUFFER, "print jupiter alt\r")==0) {Serial.println("[jupiter_alt] " + String(siderealPlanetData.jupiter_alt));}
    else if (strcmp(CMD_BUFFER, "print jupiter r\r")==0) {Serial.println("[jupiter_r] " + String(siderealPlanetData.jupiter_r));}
    else if (strcmp(CMD_BUFFER, "print jupiter s\r")==0) {Serial.println("[jupiter_s] " + String(siderealPlanetData.jupiter_s));}
    else if (strcmp(CMD_BUFFER, "print jupiter hlat\r")==0) {Serial.println("[jupiter_helio_ecliptic_lat] " + String(siderealPlanetData.jupiter_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print jupiter hlon\r")==0) {Serial.println("[jupiter_helio_ecliptic_long] " + String(siderealPlanetData.jupiter_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print jupiter rv\r")==0) {Serial.println("[jupiter_radius_vector] " + String(siderealPlanetData.jupiter_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print jupiter dis\r")==0) {Serial.println("[jupiter_distance] " + String(siderealPlanetData.jupiter_distance));}
    else if (strcmp(CMD_BUFFER, "print jupiter elat\r")==0) {Serial.println("[jupiter_ecliptic_lat] " + String(siderealPlanetData.jupiter_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print jupiter elon\r")==0) {Serial.println("[jupiter_ecliptic_long] " + String(siderealPlanetData.jupiter_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                         SPECIFIC REQUEST SERIAL OUTPUT: SATURN
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print saturn ra\r")==0) {Serial.println("[saturn_ra] " + String(siderealPlanetData.saturn_ra));}
    else if (strcmp(CMD_BUFFER, "print saturn dec\r")==0) {Serial.println("[saturn_dec] " + String(siderealPlanetData.saturn_dec));}
    else if (strcmp(CMD_BUFFER, "print saturn az\r")==0) {Serial.println("[saturn_az] " + String(siderealPlanetData.saturn_az));}
    else if (strcmp(CMD_BUFFER, "print saturn alt\r")==0) {Serial.println("[saturn_alt] " + String(siderealPlanetData.saturn_alt));}
    else if (strcmp(CMD_BUFFER, "print saturn r\r")==0) {Serial.println("[saturn_r] " + String(siderealPlanetData.saturn_r));}
    else if (strcmp(CMD_BUFFER, "print saturn s\r")==0) {Serial.println("[saturn_s] " + String(siderealPlanetData.saturn_s));}
    else if (strcmp(CMD_BUFFER, "print saturn hlat\r")==0) {Serial.println("[saturn_helio_ecliptic_lat] " + String(siderealPlanetData.saturn_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print saturn hlon\r")==0) {Serial.println("[saturn_helio_ecliptic_long] " + String(siderealPlanetData.saturn_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print saturn rv\r")==0) {Serial.println("[saturn_radius_vector] " + String(siderealPlanetData.saturn_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print saturn dis\r")==0) {Serial.println("[saturn_distance] " + String(siderealPlanetData.saturn_distance));}
    else if (strcmp(CMD_BUFFER, "print saturn elat\r")==0) {Serial.println("[saturn_ecliptic_lat] " + String(siderealPlanetData.saturn_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print saturn elon\r")==0) {Serial.println("[saturn_ecliptic_long] " + String(siderealPlanetData.saturn_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                         SPECIFIC REQUEST SERIAL OUTPUT: URANUS
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print uranus ra\r")==0) {Serial.println("[uranus_ra] " + String(siderealPlanetData.uranus_ra));}
    else if (strcmp(CMD_BUFFER, "print uranus dec\r")==0) {Serial.println("[uranus_dec] " + String(siderealPlanetData.uranus_dec));}
    else if (strcmp(CMD_BUFFER, "print uranus az\r")==0) {Serial.println("[uranus_az] " + String(siderealPlanetData.uranus_az));}
    else if (strcmp(CMD_BUFFER, "print uranus alt\r")==0) {Serial.println("[uranus_alt] " + String(siderealPlanetData.uranus_alt));}
    else if (strcmp(CMD_BUFFER, "print uranus r\r")==0) {Serial.println("[uranus_r] " + String(siderealPlanetData.uranus_r));}
    else if (strcmp(CMD_BUFFER, "print uranus s\r")==0) {Serial.println("[uranus_s] " + String(siderealPlanetData.uranus_s));}
    else if (strcmp(CMD_BUFFER, "print uranus hlat\r")==0) {Serial.println("[uranus_helio_ecliptic_lat] " + String(siderealPlanetData.uranus_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print uranus hlon\r")==0) {Serial.println("[uranus_helio_ecliptic_long] " + String(siderealPlanetData.uranus_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print uranus rv\r")==0) {Serial.println("[uranus_radius_vector] " + String(siderealPlanetData.uranus_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print uranus dis\r")==0) {Serial.println("[uranus_distance] " + String(siderealPlanetData.uranus_distance));}
    else if (strcmp(CMD_BUFFER, "print uranus elat\r")==0) {Serial.println("[uranus_ecliptic_lat] " + String(siderealPlanetData.uranus_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print uranus elon\r")==0) {Serial.println("[uranus_ecliptic_long] " + String(siderealPlanetData.uranus_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                        SPECIFIC REQUEST SERIAL OUTPUT: NEPTUNE
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "print neptune ra\r")==0) {Serial.println("[neptune_ra] " + String(siderealPlanetData.neptune_ra));}
    else if (strcmp(CMD_BUFFER, "print neptune dec\r")==0) {Serial.println("[neptune_dec] " + String(siderealPlanetData.neptune_dec));}
    else if (strcmp(CMD_BUFFER, "print neptune az\r")==0) {Serial.println("[neptune_az] " + String(siderealPlanetData.neptune_az));}
    else if (strcmp(CMD_BUFFER, "print neptune alt\r")==0) {Serial.println("[neptune_alt] " + String(siderealPlanetData.neptune_alt));}
    else if (strcmp(CMD_BUFFER, "print neptune r\r")==0) {Serial.println("[neptune_r] " + String(siderealPlanetData.neptune_r));}
    else if (strcmp(CMD_BUFFER, "print neptune s\r")==0) {Serial.println("[neptune_s] " + String(siderealPlanetData.neptune_s));}
    else if (strcmp(CMD_BUFFER, "print neptune hlat\r")==0) {Serial.println("[neptune_helio_ecliptic_lat] " + String(siderealPlanetData.neptune_helio_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print neptune hlon\r")==0) {Serial.println("[neptune_helio_ecliptic_long] " + String(siderealPlanetData.neptune_helio_ecliptic_long));}
    else if (strcmp(CMD_BUFFER, "print neptune rv\r")==0) {Serial.println("[neptune_radius_vector] " + String(siderealPlanetData.neptune_radius_vector));}
    else if (strcmp(CMD_BUFFER, "print neptune dis\r")==0) {Serial.println("[neptune_distance] " + String(siderealPlanetData.neptune_distance));}
    else if (strcmp(CMD_BUFFER, "print neptune elat\r")==0) {Serial.println("[neptune_ecliptic_lat] " + String(siderealPlanetData.neptune_ecliptic_lat));}
    else if (strcmp(CMD_BUFFER, "print neptune elon\r")==0) {Serial.println("[neptune_ecliptic_long] " + String(siderealPlanetData.neptune_ecliptic_long));}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                                                          BENCH
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (strcmp(CMD_BUFFER, "bench\r")==0) {systemData.t_bench^=true;}
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                                                 SERIAL COMMAND
    // ------------------------------------------------------------------------------------------------------------------------------
    else if (systemData.serial_command==true) {

      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                MENU NAVIGATION
      // ------------------------------------------------------------------------------------------------------------------------------
      // may result in race condition if ControlPad buttons pressed while serial commands being sent (race condition not yet observed)
      if      (strcmp(CMD_BUFFER, "menu up\r")==0)    {Serial.println("[menu up]");    menuUp();}
      else if (strcmp(CMD_BUFFER, "menu down\r")==0)  {Serial.println("[menu down]");  menuDown();}
      else if (strcmp(CMD_BUFFER, "menu left\r")==0)  {Serial.println("[menu left]");  menuLeft();}
      else if (strcmp(CMD_BUFFER, "menu right\r")==0) {Serial.println("[menu right]"); menuRight();}
      else if (strcmp(CMD_BUFFER, "menu back\r")==0)  {Serial.println("[menu back]");  menuBack();}
      else if (strcmp(CMD_BUFFER, "menu enter\r")==0) {Serial.println("[menu enter]"); menuEnter();}
      else if (strcmp(CMD_BUFFER, "menu home\r")==0)  {Serial.println("[menu home]");  menu_page=page_home; astroclock_key=0;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                              MENU ENTER DIGITS
      // ------------------------------------------------------------------------------------------------------------------------------
      // requires further sanitization
      else if (strncmp(CMD_BUFFER, "enter digits \r", strlen("enter digits "))==0) {
        TMP_CMD_STRING_0 = String(CMD_BUFFER);
        if ((atol(TMP_CMD_STRING_0.c_str()) <= 99) && (atol(TMP_CMD_STRING_0.c_str()) >= -99)) {
          memset(input_data, 0, sizeof(input_data));
          strcpy(input_data, TMP_CMD_STRING_0.c_str());
        }
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                        DISPLAY
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch display timeout")==0) {systemData.display_auto_off^=true;}
      else if (strcmp(CMD_BUFFER, "set display timeout 0\r")==0) {systemData.index_display_autooff_times=0;}
      else if (strcmp(CMD_BUFFER, "set display timeout 1\r")==0) {systemData.index_display_autooff_times=1;}
      else if (strcmp(CMD_BUFFER, "set display timeout 2\r")==0) {systemData.index_display_autooff_times=2;}
      else if (strcmp(CMD_BUFFER, "set display timeout 3\r")==0) {systemData.index_display_autooff_times=3;}
      else if (strcmp(CMD_BUFFER, "set display timeout 4\r")==0) {systemData.index_display_autooff_times=4;}
      else if (strcmp(CMD_BUFFER, "set display timeout 5\r")==0) {systemData.index_display_autooff_times=5;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                       OVERLOAD
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "set overload 0\r")==0) {systemData.index_overload_times=0;}
      else if (strcmp(CMD_BUFFER, "set overload 1\r")==0) {systemData.index_overload_times=1;}
      else if (strcmp(CMD_BUFFER, "set overload 2\r")==0) {systemData.index_overload_times=2;}
      else if (strcmp(CMD_BUFFER, "set overload 3\r")==0) {systemData.index_overload_times=3;}
      else if (strcmp(CMD_BUFFER, "set overload 4\r")==0) {systemData.index_overload_times=4;}
      else if (strcmp(CMD_BUFFER, "set overload 5\r")==0) {systemData.index_overload_times=5;}
      else if (strcmp(CMD_BUFFER, "set overload 6\r")==0) {systemData.index_overload_times=6;}
      else if (strcmp(CMD_BUFFER, "set overload 7\r")==0) {systemData.index_overload_times=7;}
      else if (strcmp(CMD_BUFFER, "set overload 8\r")==0) {systemData.index_overload_times=8;}
      else if (strcmp(CMD_BUFFER, "set overload 9\r")==0) {systemData.index_overload_times=9;}
      else if (strcmp(CMD_BUFFER, "set overload 10\r")==0) {systemData.index_overload_times=10;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                          WT901
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch wt901 enabled\r")==0) {systemData.wt901_enabled^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                MATRIX SWITCHES
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch matrix enabled\r")==0) {systemData.matrix_enabled^=true;} // toggle automatic switching
      else if (strcmp(CMD_BUFFER, "set matrix enabled 0\r")==0) {systemData.matrix_enabled=false;}  // disable automatic switching
      else if (strcmp(CMD_BUFFER, "set matrix enabled 1\r")==0) {systemData.matrix_enabled=true;}   // enabled automatic switching

      else if (strcmp(CMD_BUFFER, "switch matrix startup enabled\r")==0) {systemData.matrix_run_on_startup^=true;}
      else if (strcmp(CMD_BUFFER, "switch matrix io enabled\r")==0) {systemData.matrix_io_enabled^=true;} // enable matrix switch gpio on port portcontroller
      /*
      the following commands may be overridden if automatic switching is enabled.
      these commands allow for setting port controller output high low from other systems and or manually.
      */
      else if (strcmp(CMD_BUFFER, "set pcio 0 0\r")==0) {matrixData.matrix_switch_state[0][0]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 0 1\r")==0) {matrixData.matrix_switch_state[0][0]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 1 0\r")==0) {matrixData.matrix_switch_state[0][1]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 1 1\r")==0) {matrixData.matrix_switch_state[0][1]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 2 0\r")==0) {matrixData.matrix_switch_state[0][2]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 2 1\r")==0) {matrixData.matrix_switch_state[0][2]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 3 0\r")==0) {matrixData.matrix_switch_state[0][3]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 3 1\r")==0) {matrixData.matrix_switch_state[0][3]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 4 0\r")==0) {matrixData.matrix_switch_state[0][4]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 4 1\r")==0) {matrixData.matrix_switch_state[0][4]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 5 0\r")==0) {matrixData.matrix_switch_state[0][5]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 5 1\r")==0) {matrixData.matrix_switch_state[0][5]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 6 0\r")==0) {matrixData.matrix_switch_state[0][6]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 6 1\r")==0) {matrixData.matrix_switch_state[0][6]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 7 0\r")==0) {matrixData.matrix_switch_state[0][7]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 7 1\r")==0) {matrixData.matrix_switch_state[0][7]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 8 0\r")==0) {matrixData.matrix_switch_state[0][8]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 8 1\r")==0) {matrixData.matrix_switch_state[0][8]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 9 0\r")==0) {matrixData.matrix_switch_state[0][9]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 9 1\r")==0) {matrixData.matrix_switch_state[0][9]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 10 0\r")==0) {matrixData.matrix_switch_state[0][10]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 10 1\r")==0) {matrixData.matrix_switch_state[0][10]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 11 0\r")==0) {matrixData.matrix_switch_state[0][11]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 11 1\r")==0) {matrixData.matrix_switch_state[0][11]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 12 0\r")==0) {matrixData.matrix_switch_state[0][12]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 12 1\r")==0) {matrixData.matrix_switch_state[0][12]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 13 0\r")==0) {matrixData.matrix_switch_state[0][13]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 13 1\r")==0) {matrixData.matrix_switch_state[0][13]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 14 0\r")==0) {matrixData.matrix_switch_state[0][14]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 14 1\r")==0) {matrixData.matrix_switch_state[0][14]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 15 0\r")==0) {matrixData.matrix_switch_state[0][15]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 15 1\r")==0) {matrixData.matrix_switch_state[0][15]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 16 0\r")==0) {matrixData.matrix_switch_state[0][16]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 16 1\r")==0) {matrixData.matrix_switch_state[0][16]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 17 0\r")==0) {matrixData.matrix_switch_state[0][17]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 17 1\r")==0) {matrixData.matrix_switch_state[0][17]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 18 0\r")==0) {matrixData.matrix_switch_state[0][18]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 18 1\r")==0) {matrixData.matrix_switch_state[0][18]=true;}
      else if (strcmp(CMD_BUFFER, "set pcio 19 0\r")==0) {matrixData.matrix_switch_state[0][19]=false;}
      else if (strcmp(CMD_BUFFER, "set pcio 19 1\r")==0) {matrixData.matrix_switch_state[0][19]=true;}

      else if (strcmp(CMD_BUFFER, "set pcioi 0 0\r")==0) {matrixData.matrix_indicator_colors[0][0]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 0 1\r")==0) {matrixData.matrix_indicator_colors[0][0]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 0 2\r")==0) {matrixData.matrix_indicator_colors[0][0]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 0 3\r")==0) {matrixData.matrix_indicator_colors[0][0]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 0 4\r")==0) {matrixData.matrix_indicator_colors[0][0]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 0 5\r")==0) {matrixData.matrix_indicator_colors[0][0]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 0 6\r")==0) {matrixData.matrix_indicator_colors[0][0]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 0\r")==0) {matrixData.matrix_indicator_colors[0][1]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 1\r")==0) {matrixData.matrix_indicator_colors[0][1]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 2\r")==0) {matrixData.matrix_indicator_colors[0][1]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 3\r")==0) {matrixData.matrix_indicator_colors[0][1]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 4\r")==0) {matrixData.matrix_indicator_colors[0][1]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 5\r")==0) {matrixData.matrix_indicator_colors[0][1]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 1 6\r")==0) {matrixData.matrix_indicator_colors[0][1]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 0\r")==0) {matrixData.matrix_indicator_colors[0][2]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 1\r")==0) {matrixData.matrix_indicator_colors[0][2]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 2\r")==0) {matrixData.matrix_indicator_colors[0][2]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 3\r")==0) {matrixData.matrix_indicator_colors[0][2]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 4\r")==0) {matrixData.matrix_indicator_colors[0][2]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 5\r")==0) {matrixData.matrix_indicator_colors[0][2]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 2 6\r")==0) {matrixData.matrix_indicator_colors[0][2]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 0\r")==0) {matrixData.matrix_indicator_colors[0][3]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 1\r")==0) {matrixData.matrix_indicator_colors[0][3]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 2\r")==0) {matrixData.matrix_indicator_colors[0][3]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 3\r")==0) {matrixData.matrix_indicator_colors[0][3]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 4\r")==0) {matrixData.matrix_indicator_colors[0][3]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 5\r")==0) {matrixData.matrix_indicator_colors[0][3]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 3 6\r")==0) {matrixData.matrix_indicator_colors[0][3]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 0\r")==0) {matrixData.matrix_indicator_colors[0][4]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 1\r")==0) {matrixData.matrix_indicator_colors[0][4]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 2\r")==0) {matrixData.matrix_indicator_colors[0][4]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 3\r")==0) {matrixData.matrix_indicator_colors[0][4]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 4\r")==0) {matrixData.matrix_indicator_colors[0][4]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 5\r")==0) {matrixData.matrix_indicator_colors[0][4]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 4 6\r")==0) {matrixData.matrix_indicator_colors[0][4]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 0\r")==0) {matrixData.matrix_indicator_colors[0][5]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 1\r")==0) {matrixData.matrix_indicator_colors[0][5]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 2\r")==0) {matrixData.matrix_indicator_colors[0][5]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 3\r")==0) {matrixData.matrix_indicator_colors[0][5]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 4\r")==0) {matrixData.matrix_indicator_colors[0][5]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 5\r")==0) {matrixData.matrix_indicator_colors[0][5]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 5 6\r")==0) {matrixData.matrix_indicator_colors[0][5]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 0\r")==0) {matrixData.matrix_indicator_colors[0][6]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 1\r")==0) {matrixData.matrix_indicator_colors[0][6]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 2\r")==0) {matrixData.matrix_indicator_colors[0][6]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 3\r")==0) {matrixData.matrix_indicator_colors[0][6]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 4\r")==0) {matrixData.matrix_indicator_colors[0][6]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 5\r")==0) {matrixData.matrix_indicator_colors[0][6]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 6 6\r")==0) {matrixData.matrix_indicator_colors[0][6]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 0\r")==0) {matrixData.matrix_indicator_colors[0][7]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 1\r")==0) {matrixData.matrix_indicator_colors[0][7]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 2\r")==0) {matrixData.matrix_indicator_colors[0][7]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 3\r")==0) {matrixData.matrix_indicator_colors[0][7]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 4\r")==0) {matrixData.matrix_indicator_colors[0][7]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 5\r")==0) {matrixData.matrix_indicator_colors[0][7]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 7 6\r")==0) {matrixData.matrix_indicator_colors[0][7]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 0\r")==0) {matrixData.matrix_indicator_colors[0][8]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 1\r")==0) {matrixData.matrix_indicator_colors[0][8]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 2\r")==0) {matrixData.matrix_indicator_colors[0][8]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 3\r")==0) {matrixData.matrix_indicator_colors[0][8]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 4\r")==0) {matrixData.matrix_indicator_colors[0][8]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 5\r")==0) {matrixData.matrix_indicator_colors[0][8]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 8 6\r")==0) {matrixData.matrix_indicator_colors[0][8]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 0\r")==0) {matrixData.matrix_indicator_colors[0][9]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 1\r")==0) {matrixData.matrix_indicator_colors[0][9]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 2\r")==0) {matrixData.matrix_indicator_colors[0][9]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 3\r")==0) {matrixData.matrix_indicator_colors[0][9]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 4\r")==0) {matrixData.matrix_indicator_colors[0][9]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 5\r")==0) {matrixData.matrix_indicator_colors[0][9]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 9 6\r")==0) {matrixData.matrix_indicator_colors[0][9]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 0\r")==0) {matrixData.matrix_indicator_colors[0][10]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 1\r")==0) {matrixData.matrix_indicator_colors[0][10]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 2\r")==0) {matrixData.matrix_indicator_colors[0][10]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 3\r")==0) {matrixData.matrix_indicator_colors[0][10]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 4\r")==0) {matrixData.matrix_indicator_colors[0][10]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 5\r")==0) {matrixData.matrix_indicator_colors[0][10]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 10 6\r")==0) {matrixData.matrix_indicator_colors[0][10]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 0\r")==0) {matrixData.matrix_indicator_colors[0][11]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 1\r")==0) {matrixData.matrix_indicator_colors[0][11]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 2\r")==0) {matrixData.matrix_indicator_colors[0][11]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 3\r")==0) {matrixData.matrix_indicator_colors[0][11]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 4\r")==0) {matrixData.matrix_indicator_colors[0][11]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 5\r")==0) {matrixData.matrix_indicator_colors[0][11]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 11 6\r")==0) {matrixData.matrix_indicator_colors[0][11]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 0\r")==0) {matrixData.matrix_indicator_colors[0][12]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 1\r")==0) {matrixData.matrix_indicator_colors[0][12]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 2\r")==0) {matrixData.matrix_indicator_colors[0][12]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 3\r")==0) {matrixData.matrix_indicator_colors[0][12]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 4\r")==0) {matrixData.matrix_indicator_colors[0][12]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 5\r")==0) {matrixData.matrix_indicator_colors[0][12]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 12 6\r")==0) {matrixData.matrix_indicator_colors[0][12]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 0\r")==0) {matrixData.matrix_indicator_colors[0][13]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 1\r")==0) {matrixData.matrix_indicator_colors[0][13]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 2\r")==0) {matrixData.matrix_indicator_colors[0][13]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 3\r")==0) {matrixData.matrix_indicator_colors[0][13]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 4\r")==0) {matrixData.matrix_indicator_colors[0][13]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 5\r")==0) {matrixData.matrix_indicator_colors[0][13]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 13 6\r")==0) {matrixData.matrix_indicator_colors[0][13]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 0\r")==0) {matrixData.matrix_indicator_colors[0][14]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 1\r")==0) {matrixData.matrix_indicator_colors[0][14]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 2\r")==0) {matrixData.matrix_indicator_colors[0][14]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 3\r")==0) {matrixData.matrix_indicator_colors[0][14]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 4\r")==0) {matrixData.matrix_indicator_colors[0][14]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 5\r")==0) {matrixData.matrix_indicator_colors[0][14]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 14 6\r")==0) {matrixData.matrix_indicator_colors[0][14]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 0\r")==0) {matrixData.matrix_indicator_colors[0][15]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 1\r")==0) {matrixData.matrix_indicator_colors[0][15]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 2\r")==0) {matrixData.matrix_indicator_colors[0][15]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 3\r")==0) {matrixData.matrix_indicator_colors[0][15]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 4\r")==0) {matrixData.matrix_indicator_colors[0][15]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 5\r")==0) {matrixData.matrix_indicator_colors[0][15]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 15 6\r")==0) {matrixData.matrix_indicator_colors[0][15]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 0\r")==0) {matrixData.matrix_indicator_colors[0][16]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 1\r")==0) {matrixData.matrix_indicator_colors[0][16]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 2\r")==0) {matrixData.matrix_indicator_colors[0][16]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 3\r")==0) {matrixData.matrix_indicator_colors[0][16]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 4\r")==0) {matrixData.matrix_indicator_colors[0][16]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 5\r")==0) {matrixData.matrix_indicator_colors[0][16]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 16 6\r")==0) {matrixData.matrix_indicator_colors[0][16]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 0\r")==0) {matrixData.matrix_indicator_colors[0][17]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 1\r")==0) {matrixData.matrix_indicator_colors[0][17]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 2\r")==0) {matrixData.matrix_indicator_colors[0][17]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 3\r")==0) {matrixData.matrix_indicator_colors[0][17]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 4\r")==0) {matrixData.matrix_indicator_colors[0][17]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 5\r")==0) {matrixData.matrix_indicator_colors[0][17]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 17 6\r")==0) {matrixData.matrix_indicator_colors[0][17]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 0\r")==0) {matrixData.matrix_indicator_colors[0][18]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 1\r")==0) {matrixData.matrix_indicator_colors[0][18]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 2\r")==0) {matrixData.matrix_indicator_colors[0][18]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 3\r")==0) {matrixData.matrix_indicator_colors[0][18]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 4\r")==0) {matrixData.matrix_indicator_colors[0][18]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 5\r")==0) {matrixData.matrix_indicator_colors[0][18]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 18 6\r")==0) {matrixData.matrix_indicator_colors[0][18]=6;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 0\r")==0) {matrixData.matrix_indicator_colors[0][19]=0;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 1\r")==0) {matrixData.matrix_indicator_colors[0][19]=1;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 2\r")==0) {matrixData.matrix_indicator_colors[0][19]=2;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 3\r")==0) {matrixData.matrix_indicator_colors[0][19]=3;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 4\r")==0) {matrixData.matrix_indicator_colors[0][19]=4;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 5\r")==0) {matrixData.matrix_indicator_colors[0][19]=5;}
      else if (strcmp(CMD_BUFFER, "set pcioi 19 6\r")==0) {matrixData.matrix_indicator_colors[0][19]=6;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                      SET MATRIX SWITCH ENABLED
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix switch enabled \r", strlen("set matrix switch enabled "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==3) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==4) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==2) {
          // --------------------------------------------------------------------
          // set enabled/disabled
          // --------------------------------------------------------------------
          matrixData.matrix_switch_enabled[0][atoi(TMP_CMD_STRING_0.c_str())]=atoi(TMP_CMD_STRING_1.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                         SET MATRIX SWITCH PORT
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix port \r", strlen("set matrix port "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==3) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==4) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==2) {
          // --------------------------------------------------------------------
          // set switch port
          // --------------------------------------------------------------------
          matrixData.matrix_port_map[0][atoi(TMP_CMD_STRING_0.c_str())]=atoi(TMP_CMD_STRING_1.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // 
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                  SET MATRIX FUNCTION INVERSION
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix inverted \r", strlen("set matrix inverted "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==3) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==4) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==5) {TMP_CMD_STRING_2=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==3) {
          // --------------------------------------------------------------------
          // set function inverted
          // --------------------------------------------------------------------
          matrixData.matrix_switch_inverted_logic[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]=atoi(TMP_CMD_STRING_2.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                 SET MATRIX FUNCTION EXPRESSION
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix expression \r", strlen("set matrix expression "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==3) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==4) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==5) {TMP_CMD_STRING_2=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==3) {
          // --------------------------------------------------------------------
          // set expression
          // --------------------------------------------------------------------
          matrixData.matrix_switch_expression_index[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]=atoi(TMP_CMD_STRING_2.c_str());
          // ------------------------------------------------
          // put current str in temp
          // ------------------------------------------------
          memset(matrixData.temp, 0, sizeof(matrixData.temp));
          strcpy(matrixData.temp, matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]);
          // ------------------------------------------------
          // remove expression
          // ------------------------------------------------
          matrixData.tempStr=String(matrixData.temp);
          matrixData.tempStr.replace("Under", "");
          matrixData.tempStr.replace("Over", "");
          matrixData.tempStr.replace("Equal", "");
          matrixData.tempStr.replace("Range", "");
          // ------------------------------------------------
          // concatinate base function name with expression
          // ------------------------------------------------
          matrixData.tempStr=matrixData.tempStr + matrixData.expression[matrixData.matrix_switch_expression_index[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]];
          // ------------------------------------------------
          // copy new name into matrix
          // ------------------------------------------------
          memset(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())], 0, sizeof(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]));
          strcpy(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())], matrixData.tempStr.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                               SET MATRIX ENTRY
      // ------------------------------------------------------------------------------------------------------------------------------
      /*
      example: set matrix entry 1 0 None 0 0 0 0 0 -1 0
      example: set matrix entry 1 0 Enabled 0 0 0 0 0 40 1
      */
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix entry \r", strlen("set matrix entry "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==3) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==4) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==5) {if (is_all_alpha(TMP_CMD_TOKEN)) {TMP_CMD_STRING_2=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==6) {if (is_all_digits_plus_char(TMP_CMD_TOKEN, '.')) {TMP_CMD_STRING_3=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==7) {if (is_all_digits_plus_char(TMP_CMD_TOKEN, '.')) {TMP_CMD_STRING_4=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==8) {if (is_all_digits_plus_char(TMP_CMD_TOKEN, '.')) {TMP_CMD_STRING_5=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==9) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_6=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==10) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_7=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==11) {if (is_all_digits_plus_char(TMP_CMD_TOKEN, '-')) {TMP_CMD_STRING_8=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==12) {TMP_CMD_STRING_9=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==10) {
          // --------------------------------------------------------------------
          // set function name
          // --------------------------------------------------------------------
          memset(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())], 0, sizeof(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]));
          strcpy(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())], TMP_CMD_STRING_2.c_str());
          // --------------------------------------------------------------------
          // set function xyz
          // --------------------------------------------------------------------
          matrixData.matrix_function_xyz[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())][0]=atol(TMP_CMD_STRING_3.c_str());
          matrixData.matrix_function_xyz[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())][1]=atol(TMP_CMD_STRING_4.c_str());
          matrixData.matrix_function_xyz[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())][2]=atol(TMP_CMD_STRING_5.c_str());
          // --------------------------------------------------------------------
          // set function inverted
          // --------------------------------------------------------------------
          matrixData.matrix_switch_inverted_logic[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]=atoi(TMP_CMD_STRING_6.c_str());
          // --------------------------------------------------------------------
          // set expression
          // --------------------------------------------------------------------
          matrixData.matrix_switch_expression_index[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]=atoi(TMP_CMD_STRING_7.c_str());
          // --------------------------------------------------------------------
          // set switch port
          // --------------------------------------------------------------------
          matrixData.matrix_port_map[0][atoi(TMP_CMD_STRING_0.c_str())]=atoi(TMP_CMD_STRING_8.c_str());
          // --------------------------------------------------------------------
          // set enabled/disabled
          // --------------------------------------------------------------------
          matrixData.matrix_switch_enabled[0][atoi(TMP_CMD_STRING_0.c_str())]=atoi(TMP_CMD_STRING_9.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                      SET MATRIX FUNCTION + XYZ
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix xyz \r", strlen("set matrix xyz "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==4) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==5) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==6) {if (is_all_digits_plus_char(TMP_CMD_TOKEN, '.')) {TMP_CMD_STRING_2=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==7) {if (is_all_digits_plus_char(TMP_CMD_TOKEN, '.')) {TMP_CMD_STRING_3=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==8) {TMP_CMD_STRING_4=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==6) {
          // --------------------------------------------------------------------
          // set function xyz
          // --------------------------------------------------------------------
          matrixData.matrix_function_xyz[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())][0]=atol(TMP_CMD_STRING_2.c_str());
          matrixData.matrix_function_xyz[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())][1]=atol(TMP_CMD_STRING_3.c_str());
          matrixData.matrix_function_xyz[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())][2]=atol(TMP_CMD_STRING_4.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                            SET MATRIX FUNCTION
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set matrix function \r", strlen("set matrix function "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==3) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==4) {if (is_all_digits(TMP_CMD_TOKEN)) {TMP_CMD_STRING_1=TMP_CMD_TOKEN; COMMAND_PASS++;}}
          else if (ITER_TMP_CMD_TOKEN==5) {TMP_CMD_STRING_2=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==3) {
          // --------------------------------------------------------------------
          // set function name
          // --------------------------------------------------------------------
          memset(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())], 0, sizeof(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())]));
          strcpy(matrixData.matrix_function[atoi(TMP_CMD_STRING_0.c_str())][atoi(TMP_CMD_STRING_1.c_str())], TMP_CMD_STRING_2.c_str());
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                     NEW MATRIX
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "new matrix\r")==0) {
        setMatrixDefault();
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                      SAVE SYSTEM CONFIGURATION
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "save system\r")==0) {
        saveSystemHandleUI(menu_page);
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                    SAVE MATRIX
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "save matrix \r", strlen("save matrix "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==2) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==1) {
          createMatrixFileNameN(atoi(TMP_CMD_STRING_0.c_str()));
          saveMatrixHandleUI(menu_page);
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                    LOAD MATRIX
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "load matrix \r", strlen("load matrix "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==2) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==1) {
          setMatrixDefault();
          createMatrixFileNameN(atoi(TMP_CMD_STRING_0.c_str()));
          loadMatrixHandleUI(menu_page);
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                  DELETE MATRIX
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "delete matrix \r", strlen("delete matrix "))==0) {
        TMP_CMD_TOKEN=strtok(CMD_BUFFER, " ");
        ITER_TMP_CMD_TOKEN=0;
        COMMAND_PASS=0;
        while (TMP_CMD_TOKEN!=NULL) {
          if      (ITER_TMP_CMD_TOKEN==2) {TMP_CMD_STRING_0=TMP_CMD_TOKEN; COMMAND_PASS++;} // ToDo: sanitize last token
          TMP_CMD_TOKEN=strtok(NULL, " ");
          ITER_TMP_CMD_TOKEN++;
        }
        if (COMMAND_PASS==1) {
          setMatrixDefault();
          createMatrixFileNameN(atoi(TMP_CMD_STRING_0.c_str()));
          deleteMatrixHandleUI(menu_page);
        }
        else {Serial.println("[command failed]");}
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                            GPS
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch satio\r")==0) {systemData.satio_enabled^=true;}
      else if (strcmp(CMD_BUFFER, "switch gngga\r")==0) {systemData.gngga_enabled^=true;}
      else if (strcmp(CMD_BUFFER, "switch gnrmc\r")==0) {systemData.gnrmc_enabled^=true;}
      else if (strcmp(CMD_BUFFER, "switch gpatt\r")==0) {systemData.gpatt_enabled^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                               SIDERAL TRACKING
      // ------------------------------------------------------------------------------------------------------------------------------
      // toggle automatic
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch track sun\r")==0) {systemData.sidereal_track_sun^=true;}
      else if (strcmp(CMD_BUFFER, "switch track moon\r")==0) {systemData.sidereal_track_moon^=true;}
      else if (strcmp(CMD_BUFFER, "switch track mercury\r")==0) {systemData.sidereal_track_mercury^=true;}
      else if (strcmp(CMD_BUFFER, "switch track venus\r")==0) {systemData.sidereal_track_venus^=true;}
      else if (strcmp(CMD_BUFFER, "switch track mars\r")==0) {systemData.sidereal_track_mars^=true;}
      else if (strcmp(CMD_BUFFER, "switch track jupiter\r")==0) {systemData.sidereal_track_jupiter^=true;}
      else if (strcmp(CMD_BUFFER, "switch track saturn\r")==0) {systemData.sidereal_track_saturn^=true;}
      else if (strcmp(CMD_BUFFER, "switch track uranus\r")==0) {systemData.sidereal_track_uranus^=true;}
      else if (strcmp(CMD_BUFFER, "switch track neptune\r")==0) {systemData.sidereal_track_neptune^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      // run once
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "run track planets\r")==0) {trackPlanets();}
      else if (strcmp(CMD_BUFFER, "run track sun\r")==0) {trackSun();}
      else if (strcmp(CMD_BUFFER, "run track moon\r")==0) {trackMoon();}
      else if (strcmp(CMD_BUFFER, "run track mercury\r")==0) {trackMercury();}
      else if (strcmp(CMD_BUFFER, "run track venus\r")==0) {trackVenus();}
      else if (strcmp(CMD_BUFFER, "run track mars\r")==0) {trackMars();}
      else if (strcmp(CMD_BUFFER, "run track jupiter\r")==0) {trackJupiter();}
      else if (strcmp(CMD_BUFFER, "run track saturn\r")==0) {trackSaturn();}
      else if (strcmp(CMD_BUFFER, "run track uranus\r")==0) {trackUranus();}
      else if (strcmp(CMD_BUFFER, "run track neptune\r")==0) {trackNeptune();}

      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                       IIC MULTIPLEXER CHANNELS
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 0")==0) {systemData.CD74HC4067_channel_enabled[0]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 1")==0) {systemData.CD74HC4067_channel_enabled[1]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan ")==0) {systemData.CD74HC4067_channel_enabled[2]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 3")==0) {systemData.CD74HC4067_channel_enabled[3]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 4")==0) {systemData.CD74HC4067_channel_enabled[4]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 5")==0) {systemData.CD74HC4067_channel_enabled[5]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 6")==0) {systemData.CD74HC4067_channel_enabled[6]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 7")==0) {systemData.CD74HC4067_channel_enabled[7]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 8")==0) {systemData.CD74HC4067_channel_enabled[8]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 9")==0) {systemData.CD74HC4067_channel_enabled[9]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 10")==0) {systemData.CD74HC4067_channel_enabled[10]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 11")==0) {systemData.CD74HC4067_channel_enabled[11]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 12")==0) {systemData.CD74HC4067_channel_enabled[12]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 13")==0) {systemData.CD74HC4067_channel_enabled[13]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 14")==0) {systemData.CD74HC4067_channel_enabled[14]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan 15")==0) {systemData.CD74HC4067_channel_enabled[15]^=true;}
      else if (strcmp(CMD_BUFFER, "switch iic-plex chan all")==0) {systemData.CD74HC4067_enabled^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                            ANALOG/DIGITAL MULTIPLEXER CHANNELS
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 0\r")==0) {systemData.TCA9548A_channel_enabled[0]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 1\r")==0) {systemData.TCA9548A_channel_enabled[1]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 2\r")==0) {systemData.TCA9548A_channel_enabled[2]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 3\r")==0) {systemData.TCA9548A_channel_enabled[3]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 4\r")==0) {systemData.TCA9548A_channel_enabled[4]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 5\r")==0) {systemData.TCA9548A_channel_enabled[5]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 6\r")==0) {systemData.TCA9548A_channel_enabled[6]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan 7\r")==0) {systemData.TCA9548A_channel_enabled[7]^=true;}
      else if (strcmp(CMD_BUFFER, "switch ad-plex chan all")==0) {systemData.TCA9548A_enabled^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                                 SWITCH SENSORS
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch dht11_0_display_hic\r")==0) {sensorData.dht11_0_display_hic^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                               SWITCH SATIO CONVERT COORDINATES
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "switch convert coordinates\r")==0) {satData.convert_coordinates^=true;}
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                             SET SATIO CONVERT COORDINATES MODE
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strcmp(CMD_BUFFER, "set convert coordinates GNGGA\r")==0) {
        memset(satData.coordinate_conversion_mode, 0, sizeof(satData.coordinate_conversion_mode));
        strcpy(satData.coordinate_conversion_mode, "GNGGA");
      }
      else if (strcmp(CMD_BUFFER, "set convert coordinates GNRMC\r")==0) {
        memset(satData.coordinate_conversion_mode, 0, sizeof(satData.coordinate_conversion_mode));
        strcpy(satData.coordinate_conversion_mode, "GNRMC");
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                                    SET SATIO UTC SECOND OFFSET
      // ------------------------------------------------------------------------------------------------------------------------------
      else if (strncmp(CMD_BUFFER, "set utc_second_offset \r", strlen("set utc_second_offset "))==0) {
        TMP_CMD_STRING_0="";
        TMP_CMD_STRING_0 = String(CMD_BUFFER);
        TMP_CMD_STRING_0.replace("set utc_second_offset ", "");
        if ((atol(TMP_CMD_STRING_0.c_str()) <= 179769313486232) && (atol(TMP_CMD_STRING_0.c_str()) >= -179769313486232)) {
          satData.utc_second_offset=atol(TMP_CMD_STRING_0.c_str());
        }
        // Serial.println("[TMP_CMD_STRING_0] " + String(TMP_CMD_STRING_0));
        // Serial.println("[satData.utc_second_offset] " + String(satData.utc_second_offset));
      }
      // ------------------------------------------------------------------------------------------------------------------------------
      //                                                                                               SET SATIO UTC SECOND OFFSET FLAG
      // ------------------------------------------------------------------------------------------------------------------------------
      // else if (strcmp(CMD_BUFFER, "set utc_auto_offset_flag\r")==0) {satData.utc_auto_offset_flag^=true;} // currently manual only
    }
    // ------------------------------------------------------------------------------------------------------------------------------
    //                                                                                                                 TRIP UPDATE UI
    // ------------------------------------------------------------------------------------------------------------------------------
    // this covers any command that should be reflected in ui. comment here and instead add specifically to required commands to be more efficient
    // ------------------------------------------------------------------------------------------------------------------------------
    if (systemData.DISPLAY_ENABLED==true) {WaitToUpdateUI();}
  }
  memset(CMD_BUFFER, 0, sizeof(CMD_BUFFER));
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                        SENSORS
// ------------------------------------------------------------------------------------------------------------------------------
// Sensors are mostly intentionally left blank for custum configurations.
// ------------------------------------------------------------------------------------------------------------------------------

bool sensor_0_issue_flag=false;

void setCD74HC4067_NAN() {
  sensorData.sensor_0=NAN;
  sensorData.sensor_1=NAN;
  sensorData.sensor_2=NAN;
  sensorData.sensor_3=NAN;
  sensorData.sensor_4=NAN;
  sensorData.sensor_5=NAN;
  sensorData.sensor_6=NAN;
  sensorData.sensor_7=NAN;
  sensorData.sensor_8=NAN;
  sensorData.sensor_9=NAN;
  sensorData.sensor_10=NAN;
  sensorData.sensor_11=NAN;
  sensorData.sensor_12=NAN;
  sensorData.sensor_13=NAN;
  sensorData.sensor_14=NAN;
  sensorData.sensor_15=NAN;
}

void setTCA9548A_NAN() {
  sensorData.sensor_0=NAN;
  sensorData.sensor_1=NAN;
  sensorData.sensor_2=NAN;
  sensorData.sensor_3=NAN;
  sensorData.sensor_4=NAN;
  sensorData.sensor_5=NAN;
  sensorData.sensor_6=NAN;
  sensorData.sensor_7=NAN;
}

void getSensorData() {

  // ------------------------------------------------------------------------------------------
  // step over each multiplexer analog/digital channel
  // ------------------------------------------------------------------------------------------
  if (systemData.CD74HC4067_enabled==true) {
    for (int i_chan=0; i_chan < 16; i_chan++) {

      if (systemData.CD74HC4067_channel_enabled[i_chan]==true) {
        // --------------------------------------------------
        // set multiplexer channel
        // --------------------------------------------------
        setMultiplexChannel_CD74HC4067(i_chan);
        // --------------------------------------------------
        // sensor 0
        // --------------------------------------------------
        if (i_chan==0) {
          sensorData.dht11_h_0=dht.readHumidity();
          sensorData.dht11_c_0=dht.readTemperature();     // celsius default
          sensorData.dht11_f_0=dht.readTemperature(true); // fahreheit=true
          if (isnan(sensorData.dht11_h_0) || isnan(sensorData.dht11_c_0) || isnan(sensorData.dht11_f_0)) {
            if (sensor_0_issue_flag==false) {Serial.println("[dht11] failed"); sensor_0_issue_flag=true;}
          }
          else {if (sensor_0_issue_flag==true) {Serial.println("[dht11] succeeded"); sensor_0_issue_flag=false;}}
          sensorData.dht11_hif_0=dht.computeHeatIndex(sensorData.dht11_f_0, sensorData.dht11_h_0);        // fahreheit default
          sensorData.dht11_hic_0=dht.computeHeatIndex(sensorData.dht11_c_0, sensorData.dht11_h_0, false); // fahreheit=false
          sensorData.sensor_0=sensorData.dht11_hic_0; // custum sensor 0
        }
        // --------------------------------------------------
        // sensor 1
        // --------------------------------------------------
        else if (i_chan==1) {
          sensorData.sensor_1=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 2
        // --------------------------------------------------
        else if (i_chan==2) {
          sensorData.sensor_2=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 3
        // --------------------------------------------------
        else if (i_chan==3) {
          sensorData.sensor_3=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 4
        // --------------------------------------------------
        else if (i_chan==4) {
          sensorData.sensor_4=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 5
        // --------------------------------------------------
        else if (i_chan==5) {
          sensorData.sensor_5=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 6
        // --------------------------------------------------
        else if (i_chan==6) {
          sensorData.sensor_6=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 7
        // --------------------------------------------------
        else if (i_chan==7) {
          sensorData.sensor_7=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 8
        // --------------------------------------------------
        else if (i_chan==8) {
          sensorData.sensor_8=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 9
        // --------------------------------------------------
        else if (i_chan==9) {
          sensorData.sensor_9=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 10
        // --------------------------------------------------
        else if (i_chan==10) {
          sensorData.sensor_10=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 11
        // --------------------------------------------------
        else if (i_chan==11) {
          sensorData.sensor_11=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 12
        // --------------------------------------------------
        else if (i_chan==12) {
          sensorData.sensor_12=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 13
        // --------------------------------------------------
        else if (i_chan==13) {
          sensorData.sensor_13=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 14
        // --------------------------------------------------
        else if (i_chan==14) {
          sensorData.sensor_14=analogRead(CD74HC4067_SIG);
        }
        // --------------------------------------------------
        // sensor 15
        // --------------------------------------------------
        else if (i_chan==15) {
          sensorData.sensor_15=analogRead(CD74HC4067_SIG);
        }
      }
      else {
        if (i_chan==0) {sensorData.sensor_0=NAN;}
        else if (i_chan==1) {sensorData.sensor_1=NAN;}
        else if (i_chan==2) {sensorData.sensor_2=NAN;}
        else if (i_chan==3) {sensorData.sensor_3=NAN;}
        else if (i_chan==4) {sensorData.sensor_4=NAN;}
        else if (i_chan==5) {sensorData.sensor_5=NAN;}
        else if (i_chan==6) {sensorData.sensor_6=NAN;}
        else if (i_chan==7) {sensorData.sensor_7=NAN;}
        else if (i_chan==8) {sensorData.sensor_8=NAN;}
        else if (i_chan==9) {sensorData.sensor_9=NAN;}
        else if (i_chan==10) {sensorData.sensor_10=NAN;}
        else if (i_chan==11) {sensorData.sensor_11=NAN;}
        else if (i_chan==12) {sensorData.sensor_12=NAN;}
        else if (i_chan==13) {sensorData.sensor_13=NAN;}
        else if (i_chan==14) {sensorData.sensor_14=NAN;}
        else if (i_chan==15) {sensorData.sensor_15=NAN;}
      }
    }
    // --------------------------------------------------
    // set multiplexer channel back to zero
    // --------------------------------------------------
    // setMultiplexChannel_CD74HC4067(0);
  }
  else {setCD74HC4067_NAN();}

  // --------------------------------------------------------------------------------------------------------------------------------------------
  // step over each I2C multiplexer channel (using the IIC extension bus is recommended except for reasons where the IIC multiplexer is required)
  // --------------------------------------------------------------------------------------------------------------------------------------------
  if (systemData.TCA9548A_enabled==true) {
    for (int i_chan=0; i_chan < 8; i_chan++) {
      if (systemData.TCA9548A_channel_enabled[i_chan]==true) {

        // --------------------------------------------------
        // set multiplexer channel
        // --------------------------------------------------
        setMultiplexChannel_TCA9548A(i_chan);
        // --------------------------------------------------
        // I2C channel 0
        // --------------------------------------------------
        if (i_chan==0) {
        }
        // --------------------------------------------------
        // I2C channel 1
        // --------------------------------------------------
        else if (i_chan==1) {
        }
        // --------------------------------------------------
        // I2C channel 2
        // --------------------------------------------------
        else if (i_chan==2) {
        }
        // --------------------------------------------------
        // I2C channel 3
        // --------------------------------------------------
        else if (i_chan==3) {
        }
        // --------------------------------------------------
        // I2C channel 4
        // --------------------------------------------------
        else if (i_chan==4) {
        }
        // --------------------------------------------------
        // I2C channel 5
        // --------------------------------------------------
        else if (i_chan==5) {
        }
        // --------------------------------------------------
        // I2C channel 6
        // --------------------------------------------------
        else if (i_chan==6) {
        }
        // --------------------------------------------------
        // I2C channel 7
        // --------------------------------------------------
        else if (i_chan==7) {
        }
      }
    }
    // --------------------------------------------------
    // set multiplexer channel back to zeroa
    // --------------------------------------------------
    // setMultiplexChannel_TCA9548A(0);
  }

  // --------------------------------------------------
  // output sentence
  // --------------------------------------------------
  if (systemData.output_sensors_enabled==true) {
    memset(sensorData.sensor_sentence, 0, sizeof(sensorData.sensor_sentence));
    strcat(sensorData.sensor_sentence, "$SENSORS,");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_0).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_1).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_2).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_3).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_4).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_5).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_6).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_7).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_8).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_9).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_10).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_11).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_12).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_13).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_14).c_str());
    strcat(sensorData.sensor_sentence, ",");
    strcat(sensorData.sensor_sentence, String(sensorData.sensor_15).c_str());
    strcat(sensorData.sensor_sentence, ",");
    // append checksum
    createChecksum(sensorData.sensor_sentence);
    strcat(sensorData.sensor_sentence, "*");
    strcat(sensorData.sensor_sentence, SerialLink.checksum);
    if (systemData.output_sensors_enabled==true) {Serial.println(sensorData.sensor_sentence);}
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                          SETUP
// ------------------------------------------------------------------------------------------------------------------------------

void setup() {
  // ----------------------------------------------------------------------------------------------------------------------------
  // Watchdog Timer
  // ----------------------------------------------------------------------------------------------------------------------------
  // rtc_wdt_protect_off();
  // rtc_wdt_disable();

  // ----------------------------------------------------------------------------------------------------------------------------
  // Serial 0
  // ----------------------------------------------------------------------------------------------------------------------------
  Serial.setRxBufferSize(2000); // ensure this is set before begin()
  Serial.setTimeout(50); // ensure this is set before begin()
  Serial.begin(115200); while(!Serial);
  Serial.println("[setup] serial");

  // ----------------------------------------------------------------------------------------------------------------------------
  // Serial 1
  // ----------------------------------------------------------------------------------------------------------------------------
  // ESP32 can map hardware serial to alternative pins.
  Serial2.setPins(27, -1, ctsPin, rtsPin); // serial to gps module. ensure this is set before begin()
  Serial2.setRxBufferSize(2000); // ensure this is set before begin()
  Serial2.setTimeout(10); // ensure this is set before begin()
  Serial2.begin(115200);
  Serial.println("[setup] serial1 (hardware serial remap)");

  // ----------------------------------------------------------------------------------------------------------------------------
  // System Information
  // ----------------------------------------------------------------------------------------------------------------------------
  Serial.println("[xPortGetCoreID] " + String(xPortGetCoreID()));
  Serial.println("[ESP_PM_CPU_FREQ_MAX] " + String(ESP_PM_CPU_FREQ_MAX));
  Serial.println("[ESP_PM_APB_FREQ_MAX] " + String(ESP_PM_APB_FREQ_MAX));
  Serial.println("[ESP_PM_NO_LIGHT_SLEEP] " + String(ESP_PM_NO_LIGHT_SLEEP));
  Serial.println("[CONFIG_ESPTOOLPY_FLASHFREQ] " + String(CONFIG_ESPTOOLPY_FLASHFREQ));
  Serial.println("[CONFIG_ESPTOOLPY_FLASHMODE] " + String(CONFIG_ESPTOOLPY_FLASHMODE));
  Serial.println("[CONFIG_ESP32_REV_MIN] " + String(CONFIG_ESP32_REV_MIN));
  Serial.println("[CONFIG_LOG_DEFAULT_LEVEL] " + String(CONFIG_LOG_DEFAULT_LEVEL));
  Serial.println("[CONFIG_BOOTLOADER_LOG_LEVEL] " + String(CONFIG_BOOTLOADER_LOG_LEVEL));
  Serial.println("[CONFIG_ESP_CONSOLE_UART_BAUDRATE] " + String(CONFIG_ESP_CONSOLE_UART_BAUDRATE));
  Serial.println("[CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL] " + String(CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL));
  Serial.println("[getCpuFrequencyMhz] " + String(getCpuFrequencyMhz()));
  Serial.println("[APB_CLK_FREQ] " + String(getApbFrequency()));

  // ----------------------------------------------------------------------------------------------------------------------------
  // Pins
  // ----------------------------------------------------------------------------------------------------------------------------
  pinMode(CD74HC4067_S0, OUTPUT); 
  pinMode(CD74HC4067_S1, OUTPUT); 
  pinMode(CD74HC4067_S2, OUTPUT); 
  pinMode(CD74HC4067_S3, OUTPUT); 
  pinMode(CD74HC4067_SIG, INPUT); 
  digitalWrite(CD74HC4067_S0, LOW);
  digitalWrite(CD74HC4067_S1, LOW);
  digitalWrite(CD74HC4067_S2, LOW);
  digitalWrite(CD74HC4067_S3, LOW);

  // ----------------------------------------------------------------------------------------------------------------------------
  // Interval Timer Interrupt
  // ----------------------------------------------------------------------------------------------------------------------------
  /*
  WARNING: 1: Changing INTERVAL_TIME will effect all MatrixTimers.
           2: This is desirable behaviour while any other usage of INTERVAL_TIME should be carefully considered to work as expected
           accross different INTERVAL_TIME values.
           3: Hardware & performace should also be considered if reducing INTERVAL_TIME below 1 second.
           4: MatrixTimer resolution pertaining to INTERVAL_TIME value is ultimately dependant on main loop speed.

  Example INTERVAL_TIME=1000000: 1 Second on 1 Second off MatrixTimer=MatrixTimer x=1,       y=1.       SECOND TIMER
  Example INTERVAL_TIME=500000:  1 Second on 1 Second off MatrixTimer=MatrixTimer x=4,       y=2.       HALF SECOND TIMER
  Example INTERVAL_TIME=1000:    1 Second on 1 Second off MatrixTimer=MatrixTimer x=2000,    y=1000.    MILLISECOND TIMER
  Example INTERVAL_TIME=1:       1 Second on 1 Second off MatrixTimer=MatrixTimer x=2000000, y=1000000. MICROSECOND TIMER

  CONCLUSION: Decreasing INTERVAL_TIME increases MatrixTimer resolution and changes required values for matrix timers by a factor of INTERVAL_TIME.
              This allows for increasing MatrixTimer resolution without the need for more timers, timer functions and timer values.
              Changing INTERVAL_TIME outside of given hardware capabilities may have adverse and unpredictable effects.
              Variable names and functions depending on INTERVAL_TIME are agnostic to any specific unit of time.
  */
  INTERVAL_TIME=1000000; // SECOND TIMER
  // INTERVAL_TIME=500000;  // HALF SECOND TIMER
  // INTERVAL_TIME=1000;    // MILLISECOND TIMER
  // INTERVAL_TIME=1;       // MICROSECOND TIMER
  Serial.println("[INTERVAL_TIME] " + String(INTERVAL_TIME));
  interval_timer=timerBegin(0, 80, true);
  timerAttachInterrupt(interval_timer, &isr_interval_timer, true);
  timerAlarmWrite(interval_timer, INTERVAL_TIME, true);
  timerAlarmEnable(interval_timer);

  // ----------------------------------------------------------------------------------------------------------------------------
  // Second Timer Interrupt
  // ----------------------------------------------------------------------------------------------------------------------------
  second_timer=timerBegin(2, 80, true);
  timerAttachInterrupt(second_timer, &isr_second_timer, true);
  timerAlarmWrite(second_timer, 1000000, true);
  timerAlarmEnable(second_timer);

  // ----------------------------------------------------------------------------------------------------------------------------
  // I2C Interrupts
  // ----------------------------------------------------------------------------------------------------------------------------
  // Interrupt line: connects one or more I2C peripherals so they can tell us when to make a request (instead of switching between master slave).
  pinMode(ISR_I2C_PERIPHERAL_PIN, INPUT_PULLDOWN);
  attachInterrupt(digitalPinToInterrupt(ISR_I2C_PERIPHERAL_PIN), ISR_I2C_PERIPHERAL, FALLING);

  // ----------------------------------------------------------------------------------------------------------------------------
  // I2C
  // ----------------------------------------------------------------------------------------------------------------------------
  Wire.begin();

  // ----------------------------------------------------------------------------------------------------------------------------
  // I2C Multiplexer CD74HC4067
  // ----------------------------------------------------------------------------------------------------------------------------
  setMultiplexChannel_CD74HC4067(0);

  // ----------------------------------------------------------------------------------------------------------------------------
  // I2C Multiplexer TCA9548A
  // ----------------------------------------------------------------------------------------------------------------------------
  setMultiplexChannel_TCA9548A(0);

  // ----------------------------------------------------------------------------------------------------------------------------
  // RTC
  // ----------------------------------------------------------------------------------------------------------------------------
  rtc.begin();

  // ----------------------------------------------------------------------------------------------------------------------------
  // DHT Sensor
  // ----------------------------------------------------------------------------------------------------------------------------
  dht.begin();

  // ----------------------------------------------------------------------------------------------------------------------------
  // HSPI: SSD1351 OLED Display
  // ----------------------------------------------------------------------------------------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    //---------------
    // begin
    //---------------
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS);
    //---------------
    // begin lcdgfx
    //---------------
    display.begin();
    //---------------
    // begin TFT_eSPI
    //---------------
    tft.init();
    //---------------
    // test TFT_eSPI
    //---------------
    // tft.fillScreen(TFT_BLACK);
    // tft.drawRect(0, 0, 127, 127, TFT_GREEN);
    // delay(1000);
    //---------------
    // test lcdgfx
    //---------------
    // canvas49x8.setFixedFont(ssd1306xled_font6x8);
    // canvas49x8.clear();
    // display.setColor(RGB_COLOR16(0,255,0));
    // canvas49x8.printFixed(1, 1, "test");
    // display.drawCanvas(4, 4, canvas49x8);
    // delay(1000);
    //---------------
    // setup lcdgfx
    //---------------
    display.setFixedFont(ssd1306xled_font6x8);
    display.fill(0x0000);
    canvas6x8.setFixedFont(ssd1306xled_font6x8);
    canvas8x8.setFixedFont(ssd1306xled_font6x8);
    canvas13x8.setFixedFont(ssd1306xled_font6x8);
    canvas19x8.setFixedFont(ssd1306xled_font6x8);
    canvas120x8.setFixedFont(ssd1306xled_font6x8);
    canvas108x8.setFixedFont(ssd1306xled_font6x8);
    canvas120x120.setFixedFont(ssd1306xled_font6x8);
    canvas60x8.setFixedFont(ssd1306xled_font6x8);
    canvas64x8.setFixedFont(ssd1306xled_font6x8);
    canvas74x8.setFixedFont(ssd1306xled_font6x8);
    canvas76x8.setFixedFont(ssd1306xled_font6x8);
    canvas28x8.setFixedFont(ssd1306xled_font6x8);
    canvas21x8.setFixedFont(ssd1306xled_font6x8);
    canvas32x8.setFixedFont(ssd1306xled_font6x8);
    canvas38x8.setFixedFont(ssd1306xled_font6x8);
    canvas42x8.setFixedFont(ssd1306xled_font6x8);
    canvas54x8.setFixedFont(ssd1306xled_font6x8);
    canvas56x8.setFixedFont(ssd1306xled_font6x8);
    canvas80x8.setFixedFont(ssd1306xled_font6x8);
    canvas49x8.setFixedFont(ssd1306xled_font6x8);
    canvas92x8.setFixedFont(ssd1306xled_font6x8);
    canvas62x8.setFixedFont(ssd1306xled_font6x8);
    //---------------
    // loading splash
    //---------------
    menu_page=-1;
    display.clear();
    display.drawBitmap16(0, 0, 128, 128, UnidentifiedStudioBMP);
    //---------------
    // end
    //---------------
    endSPIDevice(SSD1351_CS);
  }

  // ----------------------------------------------------------------------------------------------------------------------------
  // VSPI: SDCARD
  // ----------------------------------------------------------------------------------------------------------------------------
  beginSPIDevice(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  setupSDCard();
  sd.end();
  endSPIDevice(SD_CS);

  // ----------------------------------------------------------------------------------------------------------------------------
  // Sidereal Planets
  // ----------------------------------------------------------------------------------------------------------------------------
  myAstro.begin();

  // ----------------------------------------------------------------------------------------------------------------------------
  // xTask GPS
  // ----------------------------------------------------------------------------------------------------------------------------
  xTaskCreatePinnedToCore(
      readGPS,   /* Function to implement the task */
      "GPSTask", /* Name of the task */
      10240,     /* Stack size in words */
      NULL,      /* Task input parameter */
      2,         /* Priority of the task */
      &GPSTask,  /* Task handle. */
      0);        /* Core where the task should run */
    
  delay(10);
  
  // ----------------------------------------------------------------------------------------------------------------------------
  // xTask Update UI
  // ----------------------------------------------------------------------------------------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    xTaskCreatePinnedToCore(
      UpdateUI,       /* Function to implement the task */
      "UpdateUITask", /* Name of the task */
      102400,         /* Stack size in words */
      NULL,           /* Task input parameter */
      2,              /* Priority of the task */
      &UpdateUITask,  /* Task handle. */
      0);             /* Core where the task should run */
  }

  delay(10);

  // ----------------------------------------------------------------------------------------------------------------------------
  // xTask Track Planets
  // ----------------------------------------------------------------------------------------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    xTaskCreatePinnedToCore(
      setTrackPlanets,    /* Function to implement the task */
      "TrackPlanetsTask", /* Name of the task */
      10240,              /* Stack size in words */
      NULL,               /* Task input parameter */
      2,                  /* Priority of the task */
      &TrackPlanetsTask,  /* Task handle. */
      0);                 /* Core where the task should run */
  }

  delay(10);

  // ----------------------------------------------------------------------------------------------------------------------------
  // todo: run startup tests
  // ----------------------------------------------------------------------------------------------------------------------------
  
  // ----------------------------------------------------------------------------------------------------------------------------
  // wait a moment before entering main loop
  // ----------------------------------------------------------------------------------------------------------------------------
  delay(3000);

  // ----------------------------------------------------------------------------------------------------------------------------
  // HSPI: SSD1351 OLED Display
  // ----------------------------------------------------------------------------------------------------------------------------
  if (systemData.DISPLAY_ENABLED==true) {
    beginSPIDevice(SSD1351_SCLK, SSD1351_MISO, SSD1351_MOSI, SSD1351_CS);
    display.begin();
    menu_page=0;
  }
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                RETAIN GPS DATA
// ------------------------------------------------------------------------------------------------------------------------------
// retain some information for the port controller which runs every loop while gps task is overwriting data.
// ------------------------------------------------------------------------------------------------------------------------------
void retainGPSData() {
  satellite_count = atoi(gnggaData.satellite_count_gngga);
  if (atoi(gnggaData.satellite_count_gngga)==0) {gps_signal=0;}
  else if ((atoi(gnggaData.satellite_count_gngga)>0) && (atoi(gnggaData.hdop_precision_factor)>1)) {gps_signal=1;}
  else if ((atoi(gnggaData.satellite_count_gngga)>0) && (atoi(gnggaData.hdop_precision_factor)<=1)) {gps_signal=2;}
}

// ------------------------------------------------------------------------------------------------------------------------------
//                                                                                                                      MAIN LOOP
// ------------------------------------------------------------------------------------------------------------------------------
// care has been taken to reduce maximum loop times using vTasks and 'load distribution' for running on ESP32.
// wtgps300p outputs every 100 milliseconds. ensure loop time always below 100 milliseconds if intending to utilize gps data
// 10 times a second.
// ------------------------------------------------------------------------------------------------------------------------------
int t0=millis();
bool longer_loop=false;
int load_distribution=0;
bool suspended_gps_task=false;
bool matrix_run_state_flag=false;
bool port_controller_run_state_flag=false;
bool cleared_dynamic_data_satio=false;
bool cleared_dynamic_data_gngga=false;
bool cleared_dynamic_data_gnrmc=false;
bool cleared_dynamic_data_gpatt=false;
bool second_time_period_sync_rtc=false;
bool second_time_period_track_planets=false;
int remain_rtc_sync_flag=0;
int sdcard_check_counter=0;
int i_request_wt901;
int i_sync_utc;

void loop() {
  // bench("-----");
  systemData.t_bench=false;
  timeData.mainLoopTimeStart=micros();
  systemData.loops_a_second++;

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                           SUSPEND/RESUME GPS
  // ----------------------------------------------------------------------------------------------------------------------------
  // suspend/resume task once if all gps parsing was disabled. this is done here rather than on another task.
  // ----------------------------------------------------------------------------------------------------------------------------
  if (systemData.gngga_enabled==false && systemData.gnrmc_enabled==false && systemData.gpatt_enabled==false) {
    if (suspended_gps_task==false) {vTaskSuspend(GPSTask);}
    suspended_gps_task=true;
    first_gps_pass=true;
  }
  else {if (suspended_gps_task==true) {vTaskResume(GPSTask);} suspended_gps_task=false;}

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                  DYNAMIC DATA (STATION MODE)
  // ----------------------------------------------------------------------------------------------------------------------------
  // clear dynamic data once.
  // static data allows many calculations to be perfromed from a stationary position if time & location has already been synced.
  // syncing manually and periodically will increase perfromance if required.
  // ----------------------------------------------------------------------------------------------------------------------------
  if (systemData.satio_enabled==false) {gps_signal=0; if (cleared_dynamic_data_satio==false) {clearDynamicSATIO(); cleared_dynamic_data_satio=true;} else {cleared_dynamic_data_satio=false;}}
  if (systemData.gngga_enabled==false) {if (cleared_dynamic_data_gngga==false) {clearDynamicGNGGA(); cleared_dynamic_data_gngga=true;} else {cleared_dynamic_data_gngga=false;}}
  if (systemData.gnrmc_enabled==false) {if (cleared_dynamic_data_gnrmc==false) {clearDynamicGNRMC(); cleared_dynamic_data_gnrmc=true;} else {cleared_dynamic_data_gnrmc=false;}}
  if (systemData.gpatt_enabled==false) {if (cleared_dynamic_data_gpatt==false) {clearGPATT(); cleared_dynamic_data_gpatt=true;} else {cleared_dynamic_data_gpatt=false;}}

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                                          GPS
  // ----------------------------------------------------------------------------------------------------------------------------
  longer_loop=false;
  if (gps_done==true && suspended_gps_task==false)  {
    longer_loop=true;
    // -----------------------------------------------------------------------
    //                                                           SUSPEND TASKS
    // -----------------------------------------------------------------------
    vTaskSuspend(GPSTask);
    // bench("[gps_done_t] " + String((float)(gps_done_t1-gps_done_t0)/1000000, 4) + "s");
    // -----------------------------------------------------------------------
    //                                                              GPS OUTPUT
    // -----------------------------------------------------------------------
    if (systemData.output_gngga_enabled==true) {Serial.println(gnggaData.outsentence);}
    if (systemData.output_gnrmc_enabled==true) {Serial.println(gnrmcData.outsentence);}
    if (systemData.output_gpatt_enabled==true) {Serial.println(gpattData.outsentence);}
    // -----------------------------------------------------------------------
    //                                                                SYNC RTC
    // -----------------------------------------------------------------------
    crunching_time_data=true;
    // t0=micros();
    syncUTCTime();
    // bench("[syncUTCTime] " + String((float)(micros()-t0)/1000000, 4) + "s");
    crunching_time_data=false;
    // -----------------------------------------------------------------------
    //                                                      CALCULATE LOCATION
    // -----------------------------------------------------------------------
    if (systemData.satio_enabled==true) {
      // t0=micros();
      calculateLocation();
      setGroundHeadingName(atof(gnrmcData.ground_heading));
      // bench("[calculateLocation] " + String((float)(micros()-t0)/1000000, 4) + "s");
    }
    // -----------------------------------------------------------------------
    //                                                         RETAIN GPS DATA
    // -----------------------------------------------------------------------
    retainGPSData();
  }

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                    CONVERT UTC TO LOCAL TIME
  // ----------------------------------------------------------------------------------------------------------------------------
  if (second_time_period_sync_rtc==true) {
    crunching_time_data=true;
    // t0=micros();
    syncTaskSafeRTCTime();
    convertUTCTimeToLocalTime();
    // bench("[convertUTCTimeToLocalTime] " + String((float)(micros()-t0)/1000000, 4) + "s");
    crunching_time_data=false;
    i_sync_utc++;
    second_time_period_sync_rtc=false;
    // load_distribution=0; // force next load distribution to lightest load
  }

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                                MATRIX SWITCH
  // ----------------------------------------------------------------------------------------------------------------------------
  // run matrix immediately after GPS operations so that GPS task can be resumed more quickly.
  // ----------------------------------------------------------------------------------------------------------------------------
  // t0=micros();
  if (systemData.matrix_enabled==true) {
    matrix_run_state_flag=true;
    // -----------------------------------------------------------------------
    //                                                           SUSPEND TASKS
    // -----------------------------------------------------------------------
    vTaskSuspend(TrackPlanetsTask);
    // -----------------------------------------------------------------------
    //                                                                  MATRIX
    // -----------------------------------------------------------------------
    matrixSwitch();
    // -----------------------------------------------------------------------
    //                                                            RESUME TASKS
    // -----------------------------------------------------------------------
    gps_done=false;
    vTaskResume(GPSTask); // challenge: try to get resume even closer to suspend.
    vTaskResume(TrackPlanetsTask);
  }
  else if (systemData.matrix_enabled==false) {
    if (matrix_run_state_flag==true) {matrix_run_state_flag=false; setAllMatrixSwitchesStateFalse();
    }
  }
  // bench("[matrixSwitch] " + String((float)(micros()-t0)/1000000, 4) + "s");
  MatrixStatsCounter();

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                            LOAD DISTRIBUTION
  // ----------------------------------------------------------------------------------------------------------------------------
  // keep loop time down! if it does not need to execute every loop then execute it in here (solution for ESP32).
  // ----------------------------------------------------------------------------------------------------------------------------
  if (longer_loop==false) {
    // ----------------------------------------------------------------------
    //                                                         TRACK PLANTETS
    // ----------------------------------------------------------------------
    if (load_distribution==0) {
      load_distribution=1;
      if (second_time_period_track_planets==true) {
        second_time_period_track_planets=false;
        // Serial.println("[load dist]");
        track_planet_period=true;
      }
    }
    // ----------------------------------------------------------------------
    //                                                         SATIO SENTENCE
    // ----------------------------------------------------------------------
    else if (load_distribution==1) {
      load_distribution=2;
      if (systemData.satio_enabled==true) {buildSatIOSentence();}
    }

    // ----------------------------------------------------------------------
    //                                                        SERIAL COMMANDS
    // ----------------------------------------------------------------------
    else if (load_distribution==2) {
      load_distribution=0;
      while (Serial.available()) {
        memset(CMD_BUFFER, 0, sizeof(CMD_BUFFER));
        Serial.readBytesUntil('\n', CMD_BUFFER, sizeof(CMD_BUFFER));
      }
      CmdProcess();
    }
  }

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                                  CONTROL PAD
  // ----------------------------------------------------------------------------------------------------------------------------
  // t0=micros();
  if (make_i2c_request==true) {requestControlPad(); make_i2c_request=false;}
  // bench("[requestControlPad] " + String((float)(micros()-t0)/1000000, 4) + "s");

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                                  SENSOR DATA
  // ----------------------------------------------------------------------------------------------------------------------------
  // t0=micros();
  getSensorData();
  // bench("[getSensorData] " + String((float)(micros()-t0)/1000000, 4) + "s");

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                                REQUEST WT901
  // ----------------------------------------------------------------------------------------------------------------------------
  // t0=micros();
  if (systemData.wt901_enabled==true) {requestWT901();}
  else {
    sensorData.wt901_acc_x=NAN;
    sensorData.wt901_acc_y=NAN;
    sensorData.wt901_acc_z=NAN;
    sensorData.wt901_ang_x=NAN;
    sensorData.wt901_ang_y=NAN;
    sensorData.wt901_ang_z=NAN;
    sensorData.wt901_gyr_x=NAN;
    sensorData.wt901_gyr_y=NAN;
    sensorData.wt901_gyr_z=NAN;
    sensorData.wt901_mag_x=NAN;
    sensorData.wt901_mag_y=NAN;
    sensorData.wt901_mag_z=NAN;
  }
  i_request_wt901++;
  // bench("[requestWT901] " + String((float)(micros()-t0)/1000000, 4) + "s");

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                              PORT CONTROLLER
  // ----------------------------------------------------------------------------------------------------------------------------
  // t0=micros();
  if (systemData.matrix_io_enabled==true) {port_controller_run_state_flag=false; writeToEnabledPortController();}
  else {
    if (port_controller_run_state_flag==false) {
      setAllMatrixSwitchesStateFalse();
      writeToEnabledPortController();
      port_controller_run_state_flag=true;
    }
    else {writeToSemiDisabledPortController();}
  }
  // bench("[writePortController] " + String((float)(micros()-t0)/1000000, 4) + "s");

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                      OPERATIONS PER INTERVAL
  // ----------------------------------------------------------------------------------------------------------------------------
  if (interrupt_interval_counter > 0) {
    // ---------------------------------------------------------------------
    //                                                     INTERRUPT COUNTER
    // ---------------------------------------------------------------------
    portENTER_CRITICAL(&interval_timer_mux);
    interrupt_interval_counter=0;
    portEXIT_CRITICAL(&interval_timer_mux);
    // ---------------------------------------------------------------------
    //                                                  INTERVAL ACCUMULATOR
    // ---------------------------------------------------------------------
    if (timeData.accumulated_intervals>DBL_MAX-2) {
      timeData.accumulated_intervals=0;
      Serial.println("[reset accumulated_intervals] " + String(timeData.accumulated_intervals));
      for (int i=0; i<20; i++) {matrixData.matrix_timers[0][i]=0;}
    }
  }

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                        OPERATIONS PER SECOND
  // ----------------------------------------------------------------------------------------------------------------------------
  if (interrupt_second_counter>0) {
    // ---------------------------------------------------------------------
    //                                                     INTERRUPT COUNTER
    // ---------------------------------------------------------------------
    portENTER_CRITICAL(&second_timer_mux);
    interrupt_second_counter=0;
    portEXIT_CRITICAL(&second_timer_mux);
    // ---------------------------------------------------------------------
    //                                                          SECOND FLAGS
    // ---------------------------------------------------------------------
    second_time_period_sync_rtc=true;
    second_time_period_track_planets=true;
    // Serial.println("[second_time_period_track_planets] true");

    // ---------------------------------------------------------------------
    //                                                    UPTIME ACCUMULATOR
    // ---------------------------------------------------------------------
    if (timeData.uptime_seconds>LONG_MAX-2) {
      timeData.uptime_seconds=0;
      Serial.println("[reset uptime_seconds] " + String(timeData.uptime_seconds));
    }
    // ---------------------------------------------------------------------
    //                                                    SECOND ACCUMULATOR
    // ---------------------------------------------------------------------
    if (timeData.accumulated_seconds>LONG_MAX-2) {
      timeData.accumulated_seconds=0;
      Serial.println("[reset accumulated_seconds] " + String(timeData.accumulated_seconds));
    }
    // ---------------------------------------------------------------------
    //                                                        LOOPS A SECOND
    // ---------------------------------------------------------------------
    // bench("[loops_a_second] " + String(systemData.total_loops_a_second));
    systemData.total_loops_a_second=systemData.loops_a_second;
    systemData.loops_a_second=0;
    // ---------------------------------------------------------------------
    //                                                              SYNC RTC
    // ---------------------------------------------------------------------
    // give rtc sync flag an opportunity to be processed.
    // ---------------------------------------------------------------------
    if(rtc_sync_flag==true) {remain_rtc_sync_flag++;}
    if (remain_rtc_sync_flag>1) {remain_rtc_sync_flag=0; rtc_sync_flag=false;}
    // bench("[reset i_request_wt901] times ran: " + String(i_request_wt901));
    // bench("[reset i_sync_utc]      times ran: " + String(i_sync_utc));
    i_request_wt901=0;
    i_sync_utc=0;
  }

  // ----------------------------------------------------------------------------------------------------------------------------
  //                                                                                                                       TIMING
  // ----------------------------------------------------------------------------------------------------------------------------
  // delay(50); // debug test overload: increase loop time
  timeData.mainLoopTimeTaken=(micros() - timeData.mainLoopTimeStart);
  if (timeData.mainLoopTimeTaken>=systemData.overload_max) {systemData.overload=true; systemData.i_overload++; if (systemData.i_overload>9999) {systemData.i_overload=0;}}
  else {systemData.overload=false;}
  if (timeData.mainLoopTimeTaken > timeData.mainLoopTimeTakenMax) {timeData.mainLoopTimeTakenMax=timeData.mainLoopTimeTaken;}
  // bench("[overload] " + String(systemData.overload));
  // bench("[Looptime] " + String((float)(timeData.mainLoopTimeTaken)/1000000, 4) + "s");
  // bench("[Looptime Max] " + String((float)(timeData.mainLoopTimeTakenMax)/1000000, 4) + "s");
  systemData.load_percentage = 100 * ((float)timeData.mainLoopTimeTaken / systemData.overload_max);
  // bench("[load] " + String(systemData.load_percentage, 10) + "%");
}
